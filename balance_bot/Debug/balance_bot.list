
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fc8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08002160  08002160  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08002160  08002160  00004070  2**0
                  CONTENTS
  4 .ARM          00000000  08002160  08002160  00004070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002160  08002160  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002160  08002160  00003160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002164  08002164  00003164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002168  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  080021d8  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080021d8  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fdb  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000083e  00000000  00000000  0000607b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000068c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e8  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192be  00000000  00000000  00006d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003835  00000000  00000000  00020006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae34e  00000000  00000000  0002383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1b89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e04  00000000  00000000  000d1bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d29d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002148 	.word	0x08002148

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08002148 	.word	0x08002148

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <main>:
float constrain(float var, float min, float max);
uint32_t map(float in, float in_min, float in_max, float out_min, float out_max);


int main(void)
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b0a2      	sub	sp, #136	@ 0x88
 8000b78:	af02      	add	r7, sp, #8

	clock_config();
 8000b7a:	f000 f977 	bl	8000e6c <clock_config>
	motors_config();
 8000b7e:	f000 fa99 	bl	80010b4 <motors_config>

	encoder_config();
 8000b82:	f000 fb13 	bl	80011ac <encoder_config>
	refresh_tim_config();
 8000b86:	f000 fb6b 	bl	8001260 <refresh_tim_config>

	// ensure IMU connected
	while (!imu_config());
 8000b8a:	bf00      	nop
 8000b8c:	f000 fb90 	bl	80012b0 <imu_config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0fa      	beq.n	8000b8c <main+0x18>

	// Encoder PID constants
	const float encoder_kp = 0.00625;		// could be too strong
 8000b96:	4ba6      	ldr	r3, [pc, #664]	@ (8000e30 <main+0x2bc>)
 8000b98:	663b      	str	r3, [r7, #96]	@ 0x60
	const float encoder_ki = 0.0002;
 8000b9a:	4ba6      	ldr	r3, [pc, #664]	@ (8000e34 <main+0x2c0>)
 8000b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const float encoder_kd = 0.00125;
 8000b9e:	4ba6      	ldr	r3, [pc, #664]	@ (8000e38 <main+0x2c4>)
 8000ba0:	65bb      	str	r3, [r7, #88]	@ 0x58

	// IMU PID constants
	const float imu_kp = 0.737;
 8000ba2:	4ba6      	ldr	r3, [pc, #664]	@ (8000e3c <main+0x2c8>)
 8000ba4:	657b      	str	r3, [r7, #84]	@ 0x54
	const float imu_kd = 0.04;
 8000ba6:	4ba6      	ldr	r3, [pc, #664]	@ (8000e40 <main+0x2cc>)
 8000ba8:	653b      	str	r3, [r7, #80]	@ 0x50
	const float dt = 1 / 100.0;			// 100Hz fusion refresh rate
 8000baa:	4ba6      	ldr	r3, [pc, #664]	@ (8000e44 <main+0x2d0>)
 8000bac:	64fb      	str	r3, [r7, #76]	@ 0x4c

	// Critical thresholds
	const float critical_angle = 18;	// after 18 degrees, there is no returning
 8000bae:	4ba6      	ldr	r3, [pc, #664]	@ (8000e48 <main+0x2d4>)
 8000bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
	const float max_imu_pid = 10;
 8000bb2:	4ba6      	ldr	r3, [pc, #664]	@ (8000e4c <main+0x2d8>)
 8000bb4:	647b      	str	r3, [r7, #68]	@ 0x44

	// don't select a target pitch greater or less than these values
	const float max_target_pitch = 5;
 8000bb6:	4ba6      	ldr	r3, [pc, #664]	@ (8000e50 <main+0x2dc>)
 8000bb8:	643b      	str	r3, [r7, #64]	@ 0x40
	const float min_target_pitch = -5;
 8000bba:	4ba6      	ldr	r3, [pc, #664]	@ (8000e54 <main+0x2e0>)
 8000bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c


	const uint16_t min_pwm = 225;		// minimum speed when motors begin to turn
 8000bbe:	23e1      	movs	r3, #225	@ 0xe1
 8000bc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
	const uint16_t max_pwm = TIM3->ARR;	// full duty cycle
 8000bc2:	4ba5      	ldr	r3, [pc, #660]	@ (8000e58 <main+0x2e4>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bc6:	873b      	strh	r3, [r7, #56]	@ 0x38

	int16_t roll_raw, heading_raw, pitch_raw;
	float roll, heading, pitch;

	float target_pitch;
	float pitch_err, last_pitch_err = 0;
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	67bb      	str	r3, [r7, #120]	@ 0x78

	// Encoder variables
	float encoder_integral = 0;
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	677b      	str	r3, [r7, #116]	@ 0x74
	const float max_encoder_integral = 500;
 8000bd4:	4ba1      	ldr	r3, [pc, #644]	@ (8000e5c <main+0x2e8>)
 8000bd6:	637b      	str	r3, [r7, #52]	@ 0x34
	const float min_encoder_integral = -500;
 8000bd8:	4ba1      	ldr	r3, [pc, #644]	@ (8000e60 <main+0x2ec>)
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
	const int32_t encoder_home = 0;			// bot origin
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t encoder_loop_cnt = 0;			// run encoder loop at a rate of ~14Hz instead of 100Hz
 8000be0:	2300      	movs	r3, #0
 8000be2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	int32_t encoder_ticks, last_encoder_ticks = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66bb      	str	r3, [r7, #104]	@ 0x68

	// Average out 100 readings
	float sensor_offset = imu_calibrate();
 8000bea:	f000 fc43 	bl	8001474 <imu_calibrate>
 8000bee:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

	while (1)
	{

	  TIM5->SR &= ~TIM_SR_UIF;				// clear update interrupt flag
 8000bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8000e64 <main+0x2f0>)
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	4a9b      	ldr	r2, [pc, #620]	@ (8000e64 <main+0x2f0>)
 8000bf8:	f023 0301 	bic.w	r3, r3, #1
 8000bfc:	6113      	str	r3, [r2, #16]
	  while (!(TIM5->SR & (TIM_SR_UIF)));	// wait for next fusion data
 8000bfe:	bf00      	nop
 8000c00:	4b98      	ldr	r3, [pc, #608]	@ (8000e64 <main+0x2f0>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f9      	beq.n	8000c00 <main+0x8c>

	  // Run this loop at ~14Hz to allow time for motors to engage, makes for much smoother balancing
	  if (++encoder_loop_cnt == 7) {
 8000c0c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c10:	3301      	adds	r3, #1
 8000c12:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000c16:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d14f      	bne.n	8000cbe <main+0x14a>

		  // 768 encoder ticks per wheel revolution (TIM2->CNT will read 768)
		  // read encoder error and calculate target pitch
		  // ticks is < 0 when pitch > 0
		  encoder_ticks = TIM2->CNT - encoder_home;
 8000c1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	66fb      	str	r3, [r7, #108]	@ 0x6c

		  float pitch_pid = encoder_kp * encoder_ticks
 8000c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c34:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000c38:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ encoder_ki * encoder_integral
 8000c3c:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8000c40:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c48:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ encoder_kd * (encoder_ticks - last_encoder_ticks) / dt;
 8000c4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000c5e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000c62:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8000c66:	eec6 7a26 	vdiv.f32	s15, s12, s13
		  float pitch_pid = encoder_kp * encoder_ticks
 8000c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		  // small errors with give a smooth, linear response, but large errors will taper off
		  target_pitch = max_target_pitch * tanh(pitch_pid / max_target_pitch);
 8000c72:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000c74:	f7ff fc14 	bl	80004a0 <__aeabi_f2d>
 8000c78:	4604      	mov	r4, r0
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000c80:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c88:	ee16 0a90 	vmov	r0, s13
 8000c8c:	f7ff fc08 	bl	80004a0 <__aeabi_f2d>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	ec43 2b10 	vmov	d0, r2, r3
 8000c98:	f000 ff52 	bl	8001b40 <tanh>
 8000c9c:	ec53 2b10 	vmov	r2, r3, d0
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	f7ff fc54 	bl	8000550 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff ff10 	bl	8000ad4 <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c

		  encoder_loop_cnt = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	  }


	  // read orientation and convert to degrees
	  imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 8000cbe:	f107 0210 	add.w	r2, r7, #16
 8000cc2:	f107 010e 	add.w	r1, r7, #14
 8000cc6:	f107 0312 	add.w	r3, r7, #18
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fb5a 	bl	8001384 <imu_read_euler>
	  convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 8000cd0:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8000cd4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000cd8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cdc:	f107 0408 	add.w	r4, r7, #8
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	4623      	mov	r3, r4
 8000cea:	f000 fb79 	bl	80013e0 <convert_euler>

	  // error is difference between current pitch and target pitch
	  pitch_err = pitch - target_pitch - sensor_offset;
 8000cee:	ed97 7a00 	vldr	s14, [r7]
 8000cf2:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8000cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cfa:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d02:	edc7 7a08 	vstr	s15, [r7, #32]


	  float imu_pid = imu_kp * pitch_err
 8000d06:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000d0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
			  	  	  + imu_kd * (pitch_err - last_pitch_err) / dt;
 8000d12:	edd7 6a08 	vldr	s13, [r7, #32]
 8000d16:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000d1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d1e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000d22:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000d26:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8000d2a:	eec6 7a26 	vdiv.f32	s15, s12, s13
	  float imu_pid = imu_kp * pitch_err
 8000d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d32:	edc7 7a07 	vstr	s15, [r7, #28]

	  // use absolute value of controller to select pwm duty value
	  // direction of motors is determined by sign of pid_out
	  float imu_pid_abs = fabs(imu_pid);
 8000d36:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d3a:	eef0 7ae7 	vabs.f32	s15, s15
 8000d3e:	edc7 7a06 	vstr	s15, [r7, #24]

	  // limit the top of the controller
	  imu_pid_abs = constrain(imu_pid_abs, 0, max_imu_pid);
 8000d42:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 8000d46:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8000e68 <main+0x2f4>
 8000d4a:	ed97 0a06 	vldr	s0, [r7, #24]
 8000d4e:	f000 fbdf 	bl	8001510 <constrain>
 8000d52:	ed87 0a06 	vstr	s0, [r7, #24]

	  // generate PWM based on PID controller
	  uint32_t pwm = map(imu_pid_abs, 0, max_imu_pid, min_pwm, max_pwm);
 8000d56:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d60:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d62:	ee07 3a10 	vmov	s14, r3
 8000d66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d6a:	eeb0 2a47 	vmov.f32	s4, s14
 8000d6e:	eef0 1a67 	vmov.f32	s3, s15
 8000d72:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 8000d76:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8000e68 <main+0x2f4>
 8000d7a:	ed97 0a06 	vldr	s0, [r7, #24]
 8000d7e:	f000 fbf0 	bl	8001562 <map>
 8000d82:	6178      	str	r0, [r7, #20]

	  uint8_t motor_dir;

	  if (imu_pid > 0)				motor_dir = MOTOR_FWD;
 8000d84:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	dd03      	ble.n	8000d9a <main+0x226>
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d98:	e002      	b.n	8000da0 <main+0x22c>
	  else							motor_dir = MOTOR_BACKWD;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67


	  // if robot passes critical angle, turn off
	  if (fabs(pitch) > critical_angle) {
 8000da0:	edd7 7a00 	vldr	s15, [r7]
 8000da4:	eef0 7ae7 	vabs.f32	s15, s15
 8000da8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	d50e      	bpl.n	8000dd4 <main+0x260>

		  motors_set_speed(MOTOR_LEFT, motor_dir, 0);
 8000db6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f996 	bl	80010f0 <motors_set_speed>
		  motors_set_speed(MOTOR_RIGHT, motor_dir, 0);
 8000dc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 f98f 	bl	80010f0 <motors_set_speed>
		  continue;
 8000dd2:	e02c      	b.n	8000e2e <main+0x2ba>
	  }


	  motors_set_speed(MOTOR_LEFT, motor_dir, pwm);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f986 	bl	80010f0 <motors_set_speed>
	  motors_set_speed(MOTOR_RIGHT, motor_dir, pwm);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000dec:	4619      	mov	r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 f97e 	bl	80010f0 <motors_set_speed>

	  last_pitch_err = pitch_err;
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	67bb      	str	r3, [r7, #120]	@ 0x78
	  last_encoder_ticks = encoder_ticks;
 8000df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
	  encoder_integral += encoder_ticks * dt;
 8000dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e06:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	  encoder_integral = constrain(encoder_integral, min_encoder_integral, max_encoder_integral);
 8000e1a:	ed97 1a0d 	vldr	s2, [r7, #52]	@ 0x34
 8000e1e:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8000e22:	ed97 0a1d 	vldr	s0, [r7, #116]	@ 0x74
 8000e26:	f000 fb73 	bl	8001510 <constrain>
 8000e2a:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	{
 8000e2e:	e6e0      	b.n	8000bf2 <main+0x7e>
 8000e30:	3bcccccd 	.word	0x3bcccccd
 8000e34:	3951b717 	.word	0x3951b717
 8000e38:	3aa3d70a 	.word	0x3aa3d70a
 8000e3c:	3f3cac08 	.word	0x3f3cac08
 8000e40:	3d23d70a 	.word	0x3d23d70a
 8000e44:	3c23d70a 	.word	0x3c23d70a
 8000e48:	41900000 	.word	0x41900000
 8000e4c:	41200000 	.word	0x41200000
 8000e50:	40a00000 	.word	0x40a00000
 8000e54:	c0a00000 	.word	0xc0a00000
 8000e58:	40000400 	.word	0x40000400
 8000e5c:	43fa0000 	.word	0x43fa0000
 8000e60:	c3fa0000 	.word	0xc3fa0000
 8000e64:	40000c00 	.word	0x40000c00
 8000e68:	00000000 	.word	0x00000000

08000e6c <clock_config>:

  }
}

void clock_config() {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <clock_config+0x110>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a41      	ldr	r2, [pc, #260]	@ (8000f7c <clock_config+0x110>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000e7e:	bf00      	nop
 8000e80:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <clock_config+0x110>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f9      	beq.n	8000e80 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f7c <clock_config+0x110>)
 8000e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e92:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000e94:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <clock_config+0x114>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a39      	ldr	r2, [pc, #228]	@ (8000f80 <clock_config+0x114>)
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e9e:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000ea0:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <clock_config+0x114>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a36      	ldr	r2, [pc, #216]	@ (8000f80 <clock_config+0x114>)
 8000ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000eaa:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000eac:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000eb0:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000eba:	4a32      	ldr	r2, [pc, #200]	@ (8000f84 <clock_config+0x118>)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000eca:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ed2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000eda:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000edc:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <clock_config+0x110>)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <clock_config+0x110>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000eee:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ef6:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000efe:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f0a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000f12:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f1a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000f24:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <clock_config+0x110>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <clock_config+0x110>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <clock_config+0x110>)
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f34:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000f36:	bf00      	nop
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <clock_config+0x110>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f9      	beq.n	8000f38 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <clock_config+0x110>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <clock_config+0x110>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000f60:	bf00      	nop
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <clock_config+0x110>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <clock_config+0xf6>
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <pwm_config>:

void pwm_config() {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	// TIM3_CH3 is PB0 (A3)
	// TIM3_CH4 is PB1 (PIN 24)
	// CH1 and CH2 are used to drive left motor
	// CH3 and CH4 are used to drive right motor

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;							// enable TIM3 clock
 8000f8c:	4b45      	ldr	r3, [pc, #276]	@ (80010a4 <pwm_config+0x11c>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a44      	ldr	r2, [pc, #272]	@ (80010a4 <pwm_config+0x11c>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;	// enable GPIOA and B clock
 8000f98:	4b42      	ldr	r3, [pc, #264]	@ (80010a4 <pwm_config+0x11c>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	4a41      	ldr	r2, [pc, #260]	@ (80010a4 <pwm_config+0x11c>)
 8000f9e:	f043 0303 	orr.w	r3, r3, #3
 8000fa2:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode for PB0 and PB1
	GPIOB->MODER |= GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 8000fa4:	4b40      	ldr	r3, [pc, #256]	@ (80010a8 <pwm_config+0x120>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a3f      	ldr	r2, [pc, #252]	@ (80010a8 <pwm_config+0x120>)
 8000faa:	f043 030a 	orr.w	r3, r3, #10
 8000fae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <pwm_config+0x120>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80010a8 <pwm_config+0x120>)
 8000fb6:	f023 0305 	bic.w	r3, r3, #5
 8000fba:	6013      	str	r3, [r2, #0]
	// select alternate function mode for PA6 and PA7
	GPIOA->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 8000fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ac <pwm_config+0x124>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80010ac <pwm_config+0x124>)
 8000fc2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000fc6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
 8000fc8:	4b38      	ldr	r3, [pc, #224]	@ (80010ac <pwm_config+0x124>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a37      	ldr	r2, [pc, #220]	@ (80010ac <pwm_config+0x124>)
 8000fce:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8000fd2:	6013      	str	r3, [r2, #0]

	// select alternate function mode 2 for PB0 and PB1
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 8000fd4:	4b34      	ldr	r3, [pc, #208]	@ (80010a8 <pwm_config+0x120>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a33      	ldr	r2, [pc, #204]	@ (80010a8 <pwm_config+0x120>)
 8000fda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fde:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL1_1;
 8000fe0:	4b31      	ldr	r3, [pc, #196]	@ (80010a8 <pwm_config+0x120>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a30      	ldr	r2, [pc, #192]	@ (80010a8 <pwm_config+0x120>)
 8000fe6:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000fea:	6213      	str	r3, [r2, #32]
	// select alternate function mode 2 for PA6 and PA7
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL6 | GPIO_AFRL_AFRL7);
 8000fec:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <pwm_config+0x124>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80010ac <pwm_config+0x124>)
 8000ff2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000ff6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL7_1;
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <pwm_config+0x124>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80010ac <pwm_config+0x124>)
 8000ffe:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8001002:	6213      	str	r3, [r2, #32]

	TIM3->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 8001004:	4b2a      	ldr	r3, [pc, #168]	@ (80010b0 <pwm_config+0x128>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	TIM3->PSC = 0;		// /1 prescaler
 800100a:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <pwm_config+0x128>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;		// configure TIM3_CH1 (PA6) to PWM mode
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <pwm_config+0x128>)
 8001012:	2260      	movs	r2, #96	@ 0x60
 8001014:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;		// configure TIM3_CH2 (PA7) to PWM mode
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <pwm_config+0x128>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a25      	ldr	r2, [pc, #148]	@ (80010b0 <pwm_config+0x128>)
 800101c:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001020:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE;		// output compare 1 and 2 preload enable
 8001022:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <pwm_config+0x128>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <pwm_config+0x128>)
 8001028:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6193      	str	r3, [r2, #24]

	TIM3->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;		// configure TIM3_CH3 (PB0) to PWM mode
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <pwm_config+0x128>)
 8001034:	2260      	movs	r2, #96	@ 0x60
 8001036:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;		// configure TIM3_CH4 (PB1) to PWM mode
 8001038:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <pwm_config+0x128>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a1c      	ldr	r2, [pc, #112]	@ (80010b0 <pwm_config+0x128>)
 800103e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001042:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;		// preload register enable
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <pwm_config+0x128>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <pwm_config+0x128>)
 800104a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	61d3      	str	r3, [r2, #28]

	TIM3->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;		// active high, output channels enabled
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <pwm_config+0x128>)
 8001056:	f241 1211 	movw	r2, #4369	@ 0x1111
 800105a:	621a      	str	r2, [r3, #32]


	TIM3->ARR = 1680;		// output frequency 50kHz
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <pwm_config+0x128>)
 800105e:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR1 = 0;			// pwm duty cycle of 0
 8001064:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <pwm_config+0x128>)
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <pwm_config+0x128>)
 800106c:	2200      	movs	r2, #0
 800106e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = 0;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <pwm_config+0x128>)
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <pwm_config+0x128>)
 8001078:	2200      	movs	r2, #0
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM3->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <pwm_config+0x128>)
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	601a      	str	r2, [r3, #0]

	TIM3->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <pwm_config+0x128>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]

	TIM3->CNT = 0;				// reset counter
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <pwm_config+0x128>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CR1 |= TIM_CR1_CEN;	// enable counter
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <pwm_config+0x128>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <pwm_config+0x128>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6013      	str	r3, [r2, #0]
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40000400 	.word	0x40000400

080010b4 <motors_config>:


void motors_config() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

	pwm_config();
 80010b8:	f7ff ff66 	bl	8000f88 <pwm_config>

	// DRV8833 sleep is pin D2 (PA10)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <motors_config+0x34>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c0:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <motors_config+0x34>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6313      	str	r3, [r2, #48]	@ 0x30

	// configure D2 output
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <motors_config+0x38>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <motors_config+0x38>)
 80010ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER10_1;
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <motors_config+0x38>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <motors_config+0x38>)
 80010da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80010de:	6013      	str	r3, [r2, #0]

	motors_en();
 80010e0:	f000 f854 	bl	800118c <motors_en>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000

080010f0 <motors_set_speed>:

void motors_set_speed(uint8_t motor, uint8_t dir, uint16_t pwm) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	460b      	mov	r3, r1
 80010fc:	71bb      	strb	r3, [r7, #6]
 80010fe:	4613      	mov	r3, r2
 8001100:	80bb      	strh	r3, [r7, #4]

	// to set forward PWM on DRV8833, IN1 = PWM, IN2 = 1
	// to set backward PWM, IN1 = 1, IN2 = PWM
	// these are for slow decay mode, enabling responsive motors

	if (motor == MOTOR_LEFT) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d11b      	bne.n	8001140 <motors_set_speed+0x50>

		if (dir == MOTOR_FWD) {
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10a      	bne.n	8001124 <motors_set_speed+0x34>

			TIM3->CCR1 = TIM3->ARR - pwm;			// inverse of pwm for slow decay
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <motors_set_speed+0x98>)
 8001110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	491c      	ldr	r1, [pc, #112]	@ (8001188 <motors_set_speed+0x98>)
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	634b      	str	r3, [r1, #52]	@ 0x34
			TIM3->CCR2 = TIM3->ARR;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <motors_set_speed+0x98>)
 800111c:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <motors_set_speed+0x98>)
 800111e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001120:	6393      	str	r3, [r2, #56]	@ 0x38

			TIM3->CCR4 = TIM3->ARR;
			TIM3->CCR3 = TIM3->ARR - pwm;
		}
	}
}
 8001122:	e02b      	b.n	800117c <motors_set_speed+0x8c>
		else if (dir == MOTOR_BACKWD){
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d128      	bne.n	800117c <motors_set_speed+0x8c>
			TIM3->CCR1 = TIM3->ARR;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <motors_set_speed+0x98>)
 800112c:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <motors_set_speed+0x98>)
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM3->CCR2 = TIM3->ARR - pwm;
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <motors_set_speed+0x98>)
 8001134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	4913      	ldr	r1, [pc, #76]	@ (8001188 <motors_set_speed+0x98>)
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800113e:	e01d      	b.n	800117c <motors_set_speed+0x8c>
	else if (motor == MOTOR_RIGHT) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d11a      	bne.n	800117c <motors_set_speed+0x8c>
		if (dir == MOTOR_FWD) {
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <motors_set_speed+0x72>
			TIM3->CCR4 = TIM3->ARR - pwm;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <motors_set_speed+0x98>)
 800114e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <motors_set_speed+0x98>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	640b      	str	r3, [r1, #64]	@ 0x40
			TIM3->CCR3 = TIM3->ARR;
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <motors_set_speed+0x98>)
 800115a:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <motors_set_speed+0x98>)
 800115c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001160:	e00c      	b.n	800117c <motors_set_speed+0x8c>
		else if (dir == MOTOR_BACKWD) {
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d109      	bne.n	800117c <motors_set_speed+0x8c>
			TIM3->CCR4 = TIM3->ARR;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <motors_set_speed+0x98>)
 800116a:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <motors_set_speed+0x98>)
 800116c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116e:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM3->CCR3 = TIM3->ARR - pwm;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <motors_set_speed+0x98>)
 8001172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001174:	88bb      	ldrh	r3, [r7, #4]
 8001176:	4904      	ldr	r1, [pc, #16]	@ (8001188 <motors_set_speed+0x98>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40000400 	.word	0x40000400

0800118c <motors_en>:


void motors_en() {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

	// turn on PA10 to disable sleep DRV8833
	GPIOA->ODR |= GPIO_ODR_OD10;
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <motors_en+0x1c>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <motors_en+0x1c>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119a:	6153      	str	r3, [r2, #20]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40020000 	.word	0x40020000

080011ac <encoder_config>:
	// turn off PA10 to sleep DRV8833
	GPIOA->ODR &= ~GPIO_ODR_OD10;
}


void encoder_config() {
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;		// enable TIM2 clock
 80011b0:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <encoder_config+0xac>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	4a28      	ldr	r2, [pc, #160]	@ (8001258 <encoder_config+0xac>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 80011bc:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <encoder_config+0xac>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	4a25      	ldr	r2, [pc, #148]	@ (8001258 <encoder_config+0xac>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6313      	str	r3, [r2, #48]	@ 0x30

	// alternate function mode on PA0 and PA1
	GPIOA->MODER |= GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1;
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <encoder_config+0xb0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a23      	ldr	r2, [pc, #140]	@ (800125c <encoder_config+0xb0>)
 80011ce:	f043 030a 	orr.w	r3, r3, #10
 80011d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0);
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <encoder_config+0xb0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a20      	ldr	r2, [pc, #128]	@ (800125c <encoder_config+0xb0>)
 80011da:	f023 0305 	bic.w	r3, r3, #5
 80011de:	6013      	str	r3, [r2, #0]

	// select AF1 for PA0 and PA1 (TIM2_CH1 and TIM2_CH2)
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 80011e0:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <encoder_config+0xb0>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	@ (800125c <encoder_config+0xb0>)
 80011e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0 | GPIO_AFRL_AFRL1_0;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <encoder_config+0xb0>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a1a      	ldr	r2, [pc, #104]	@ (800125c <encoder_config+0xb0>)
 80011f2:	f043 0311 	orr.w	r3, r3, #17
 80011f6:	6213      	str	r3, [r2, #32]

	// configure internal pullups for encoder open drain output
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <encoder_config+0xb0>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a17      	ldr	r2, [pc, #92]	@ (800125c <encoder_config+0xb0>)
 80011fe:	f023 030f 	bic.w	r3, r3, #15
 8001202:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0 | GPIO_PUPDR_PUPD1_0;
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <encoder_config+0xb0>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <encoder_config+0xb0>)
 800120a:	f043 0305 	orr.w	r3, r3, #5
 800120e:	60d3      	str	r3, [r2, #12]

	// encoder mode 3 - counts up/down on both TI1FP1 and TI2FP2 edges depending on other input level
	TIM2->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8001210:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001214:	2203      	movs	r2, #3
 8001216:	609a      	str	r2, [r3, #8]

	// CC1 and CC2 channels are inputs - IC1 mapped to T1, IC2 mapped to T2
	TIM2->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_CC1S_0;
 8001218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121c:	f240 1201 	movw	r2, #257	@ 0x101
 8001220:	619a      	str	r2, [r3, #24]
	TIM2->CCER = 0;			// non inverted inputs
 8001222:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]

	TIM2->ARR = 0xffffffff;		// set ARR to be max of 32-bit counter
 800122a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CNT = 0;					// reset home position
 8001234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;		// enable counter
 800123c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000

08001260 <refresh_tim_config>:


void refresh_tim_config() {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		// enable TIM5 clock
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <refresh_tim_config+0x44>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <refresh_tim_config+0x44>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 0;				// /1 prescaler
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <refresh_tim_config+0x48>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 840000;			// 84MHz clock on APB1 for TIM5, generates a timer overflow at 100Hz
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <refresh_tim_config+0x48>)
 8001278:	4a0c      	ldr	r2, [pc, #48]	@ (80012ac <refresh_tim_config+0x4c>)
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->CNT = 0;				// reset counter
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <refresh_tim_config+0x48>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;	// update registers
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <refresh_tim_config+0x48>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <refresh_tim_config+0x48>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;	// enable counter
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <refresh_tim_config+0x48>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <refresh_tim_config+0x48>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40000c00 	.word	0x40000c00
 80012ac:	000cd140 	.word	0x000cd140

080012b0 <imu_config>:


uint8_t imu_config() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

	i2c1_config();
 80012b6:	f000 fa05 	bl	80016c4 <i2c1_config>

	while (!imu_test());		// read chip id
 80012ba:	bf00      	nop
 80012bc:	f000 f854 	bl	8001368 <imu_test>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0fa      	beq.n	80012bc <imu_config+0xc>

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_reg = 0x3d;
 80012c6:	233d      	movs	r3, #61	@ 0x3d
 80012c8:	73fb      	strb	r3, [r7, #15]
	const uint8_t opr_mode_config = 0x00;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73bb      	strb	r3, [r7, #14]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_config);
 80012ce:	7bba      	ldrb	r2, [r7, #14]
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4619      	mov	r1, r3
 80012d4:	2050      	movs	r0, #80	@ 0x50
 80012d6:	f000 fa57 	bl	8001788 <i2c1_writebyte>

	// delay >19 ms
	for (volatile int i = 0; i < 2000000; i++);
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e002      	b.n	80012e6 <imu_config+0x36>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <imu_config+0xb4>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	ddf8      	ble.n	80012e0 <imu_config+0x30>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 80012ee:	233b      	movs	r3, #59	@ 0x3b
 80012f0:	737b      	strb	r3, [r7, #13]
	i2c1_writebyte(IMU_ADDR, unit_sel_reg, 0x80);
 80012f2:	7b7b      	ldrb	r3, [r7, #13]
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	4619      	mov	r1, r3
 80012f8:	2050      	movs	r0, #80	@ 0x50
 80012fa:	f000 fa45 	bl	8001788 <i2c1_writebyte>

	// for current setup, placement P3 is used (from BNO055 datasheet)
	// thus, AXIS_REMAP = 0x21 and AXIS_SIGN = 0x02
	const uint8_t axis_map_config_reg = 0x41;
 80012fe:	2341      	movs	r3, #65	@ 0x41
 8001300:	733b      	strb	r3, [r7, #12]
	const uint8_t axis_map_sign_reg = 0x42;
 8001302:	2342      	movs	r3, #66	@ 0x42
 8001304:	72fb      	strb	r3, [r7, #11]
	i2c1_writebyte(IMU_ADDR, axis_map_config_reg, 0x21);
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	2221      	movs	r2, #33	@ 0x21
 800130a:	4619      	mov	r1, r3
 800130c:	2050      	movs	r0, #80	@ 0x50
 800130e:	f000 fa3b 	bl	8001788 <i2c1_writebyte>
	i2c1_writebyte(IMU_ADDR, axis_map_sign_reg, 0x02);
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	2202      	movs	r2, #2
 8001316:	4619      	mov	r1, r3
 8001318:	2050      	movs	r0, #80	@ 0x50
 800131a:	f000 fa35 	bl	8001788 <i2c1_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_fusion = 0x08;
 800131e:	2308      	movs	r3, #8
 8001320:	72bb      	strb	r3, [r7, #10]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_fusion);
 8001322:	7aba      	ldrb	r2, [r7, #10]
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	4619      	mov	r1, r3
 8001328:	2050      	movs	r0, #80	@ 0x50
 800132a:	f000 fa2d 	bl	8001788 <i2c1_writebyte>

	// delay >7 ms
	for (volatile int i = 0; i < 2000000; i++);
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	e002      	b.n	800133a <imu_config+0x8a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <imu_config+0xb4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	ddf8      	ble.n	8001334 <imu_config+0x84>

	// check POST register ST_RESULT
	// returns 1 if all sensors are working
	return ((i2c1_readbyte(IMU_ADDR, IMU_ST_RESULT_REG) & 0x0f) == 0x0f) ? 1 : 0;
 8001342:	2136      	movs	r1, #54	@ 0x36
 8001344:	2050      	movs	r0, #80	@ 0x50
 8001346:	f000 fa61 	bl	800180c <i2c1_readbyte>
 800134a:	4603      	mov	r3, r0
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	2b0f      	cmp	r3, #15
 8001352:	bf0c      	ite	eq
 8001354:	2301      	moveq	r3, #1
 8001356:	2300      	movne	r3, #0
 8001358:	b2db      	uxtb	r3, r3
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	001e847f 	.word	0x001e847f

08001368 <imu_test>:


uint8_t imu_test() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

	// returns 1 if correct chip id is read
	return (i2c1_readbyte(IMU_ADDR, IMU_WHO_AM_I_REG) == 0xa0) ? 1 : 0;
 800136c:	2100      	movs	r1, #0
 800136e:	2050      	movs	r0, #80	@ 0x50
 8001370:	f000 fa4c 	bl	800180c <i2c1_readbyte>
 8001374:	4603      	mov	r3, r0
 8001376:	2ba0      	cmp	r3, #160	@ 0xa0
 8001378:	bf0c      	ite	eq
 800137a:	2301      	moveq	r3, #1
 800137c:	2300      	movne	r3, #0
 800137e:	b2db      	uxtb	r3, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}

08001384 <imu_read_euler>:


void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]

	uint8_t raw_euler[6];			// 6 bytes total for euler angles
	const uint8_t start_addr = 0x1a;		// starting byte is heading LSB
 8001390:	231a      	movs	r3, #26
 8001392:	75fb      	strb	r3, [r7, #23]
	i2c1_readburst(IMU_ADDR, start_addr, 6, raw_euler);		// read 6 consecutive bytes
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	7df9      	ldrb	r1, [r7, #23]
 800139a:	2206      	movs	r2, #6
 800139c:	2050      	movs	r0, #80	@ 0x50
 800139e:	f000 fa89 	bl	80018b4 <i2c1_readburst>
	*heading_raw = raw_euler[0] | (raw_euler[1] << 8);
 80013a2:	7c3b      	ldrb	r3, [r7, #16]
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7c7b      	ldrb	r3, [r7, #17]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	801a      	strh	r2, [r3, #0]
	*roll_raw = raw_euler[2] | (raw_euler[3] << 8);
 80013b4:	7cbb      	ldrb	r3, [r7, #18]
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	801a      	strh	r2, [r3, #0]
	*pitch_raw = raw_euler[4] | (raw_euler[5] << 8);
 80013c6:	7d3b      	ldrb	r3, [r7, #20]
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	7d7b      	ldrb	r3, [r7, #21]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	801a      	strh	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <convert_euler>:


void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4603      	mov	r3, r0
 80013ea:	81fb      	strh	r3, [r7, #14]
 80013ec:	460b      	mov	r3, r1
 80013ee:	81bb      	strh	r3, [r7, #12]
 80013f0:	4613      	mov	r3, r2
 80013f2:	817b      	strh	r3, [r7, #10]

	*roll = roll_raw / 16.0;		// 1 degree = 16 LSB
 80013f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f83f 	bl	800047c <__aeabi_i2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <convert_euler+0x90>)
 8001404:	f7ff f9ce 	bl	80007a4 <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fb60 	bl	8000ad4 <__aeabi_d2f>
 8001414:	4602      	mov	r2, r0
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
	*pitch = pitch_raw / 16.0;
 800141a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f82c 	bl	800047c <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <convert_euler+0x90>)
 800142a:	f7ff f9bb 	bl	80007a4 <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb4d 	bl	8000ad4 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]
	*heading = heading_raw / 16.0;
 8001440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f819 	bl	800047c <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <convert_euler+0x90>)
 8001450:	f7ff f9a8 	bl	80007a4 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb3a 	bl	8000ad4 <__aeabi_d2f>
 8001460:	4602      	mov	r2, r0
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	601a      	str	r2, [r3, #0]
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40300000 	.word	0x40300000

08001474 <imu_calibrate>:


float imu_calibrate() {
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b08b      	sub	sp, #44	@ 0x2c
 8001478:	af02      	add	r7, sp, #8

	float err = 0;
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]

	int16_t roll_raw, pitch_raw, heading_raw;
	float roll, pitch, heading;

	// average 100 readings to get error
	for (int i = 0; i < 100; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	e030      	b.n	80014e8 <imu_calibrate+0x74>

		TIM5->SR &= ~TIM_SR_UIF;				// clear update interrupt flag
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <imu_calibrate+0x94>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <imu_calibrate+0x94>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6113      	str	r3, [r2, #16]
		while (!(TIM5->SR & (TIM_SR_UIF)));		// wait for next fusion data
 8001492:	bf00      	nop
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <imu_calibrate+0x94>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f9      	beq.n	8001494 <imu_calibrate+0x20>
		imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 80014a0:	f107 0212 	add.w	r2, r7, #18
 80014a4:	f107 0114 	add.w	r1, r7, #20
 80014a8:	f107 0316 	add.w	r3, r7, #22
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff69 	bl	8001384 <imu_read_euler>
		convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 80014b2:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80014b6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80014ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80014be:	f107 040c 	add.w	r4, r7, #12
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4623      	mov	r3, r4
 80014ce:	f7ff ff87 	bl	80013e0 <convert_euler>
		err += pitch;
 80014d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < 100; i++) {
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b63      	cmp	r3, #99	@ 0x63
 80014ec:	ddcb      	ble.n	8001486 <imu_calibrate+0x12>
	}

	return err / 100.0;
 80014ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f2:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800150c <imu_calibrate+0x98>
 80014f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	3724      	adds	r7, #36	@ 0x24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	40000c00 	.word	0x40000c00
 800150c:	42c80000 	.word	0x42c80000

08001510 <constrain>:


float constrain(float var, float min, float max) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0a03 	vstr	s0, [r7, #12]
 800151a:	edc7 0a02 	vstr	s1, [r7, #8]
 800151e:	ed87 1a01 	vstr	s2, [r7, #4]

	// returns value in range [min, max]
	if (var > max)
 8001522:	ed97 7a03 	vldr	s14, [r7, #12]
 8001526:	edd7 7a01 	vldr	s15, [r7, #4]
 800152a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	dd01      	ble.n	8001538 <constrain+0x28>
		return max;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	e00b      	b.n	8001550 <constrain+0x40>
	else if (var < min)
 8001538:	ed97 7a03 	vldr	s14, [r7, #12]
 800153c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d501      	bpl.n	800154e <constrain+0x3e>
		return min;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	e000      	b.n	8001550 <constrain+0x40>
	else
		return var;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <map>:


uint32_t map(float in, float in_min, float in_max, float out_min, float out_max) {
 8001562:	b480      	push	{r7}
 8001564:	b087      	sub	sp, #28
 8001566:	af00      	add	r7, sp, #0
 8001568:	ed87 0a05 	vstr	s0, [r7, #20]
 800156c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001570:	ed87 1a03 	vstr	s2, [r7, #12]
 8001574:	edc7 1a02 	vstr	s3, [r7, #8]
 8001578:	ed87 2a01 	vstr	s4, [r7, #4]

	// map function: output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
	return (uint32_t) (out_min + ((out_max - out_min) / (in_max - in_min)) * (in - in_min));
 800157c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001580:	edd7 7a02 	vldr	s15, [r7, #8]
 8001584:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001588:	ed97 7a03 	vldr	s14, [r7, #12]
 800158c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001598:	edd7 6a05 	vldr	s13, [r7, #20]
 800159c:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b4:	ee17 3a90 	vmov	r3, s15
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	371c      	adds	r7, #28
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <NMI_Handler+0x4>

080015cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <MemManage_Handler+0x4>

080015dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161a:	f000 f83f 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
 8001656:	2300      	movs	r3, #0
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:
 800165a:	58d4      	ldr	r4, [r2, r3]
 800165c:	50c4      	str	r4, [r0, r3]
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:
 8001660:	18c4      	adds	r4, r0, r3
 8001662:	428c      	cmp	r4, r1
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
 800166a:	2300      	movs	r3, #0
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:
 8001672:	42a2      	cmp	r2, r4
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>
 8001676:	f000 fa3f 	bl	8001af8 <__libc_init_array>
 800167a:	f7ff fa7b 	bl	8000b74 <main>
 800167e:	4770      	bx	lr
 8001680:	20018000 	.word	0x20018000
 8001684:	20000000 	.word	0x20000000
 8001688:	20000070 	.word	0x20000070
 800168c:	08002168 	.word	0x08002168
 8001690:	20000070 	.word	0x20000070
 8001694:	200001c8 	.word	0x200001c8

08001698 <ADC_IRQHandler>:
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000000 	.word	0x20000000
 80016c0:	2000008c 	.word	0x2000008c

080016c4 <i2c1_config>:
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "i2c1.h"
#include <stdint.h>

void i2c1_config() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

	// PB8 is SCL
	// PB9 is SDA
	// enable I2C clock before configuring pins
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C1 clock
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <i2c1_config+0x8c>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <i2c1_config+0x8c>)
 80016ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <i2c1_config+0x8c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <i2c1_config+0x8c>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	6313      	str	r3, [r2, #48]	@ 0x30

	// before configuring SCL and SDA pins for AF, make sure bus is not busy by clocking out extra
	// data to slave devices
	i2c1_release();
 80016e0:	f000 f9b0 	bl	8001a44 <i2c1_release>


	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <i2c1_config+0x90>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001754 <i2c1_config+0x90>)
 80016ea:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80016ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <i2c1_config+0x90>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <i2c1_config+0x90>)
 80016f6:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 80016fa:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <i2c1_config+0x90>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <i2c1_config+0x90>)
 8001702:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001706:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// set max output speed for both
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR8;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <i2c1_config+0x90>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <i2c1_config+0x90>)
 800170e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001712:	6093      	str	r3, [r2, #8]

	// AF04 for PB8 and PB9 to select I2C1_SCL and I2C1_SDA
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <i2c1_config+0x90>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <i2c1_config+0x90>)
 800171a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800171e:	6253      	str	r3, [r2, #36]	@ 0x24
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 8001720:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <i2c1_config+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
	i2c1_sw_rst();		// reset I2C to clear busy bit
 8001726:	f000 f819 	bl	800175c <i2c1_sw_rst>
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <i2c1_config+0x94>)
 800172c:	222a      	movs	r2, #42	@ 0x2a
 800172e:	605a      	str	r2, [r3, #4]
	// tLOW = 2 * tHIGH
	// 300kHz = 1 / (tLOW + tHIGH) = 1 / (3 * tHIGH)
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode and set freq to 300kHz
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <i2c1_config+0x94>)
 8001732:	f248 022f 	movw	r2, #32815	@ 0x802f
 8001736:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <i2c1_config+0x94>)
 800173a:	220d      	movs	r2, #13
 800173c:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <i2c1_config+0x94>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <i2c1_config+0x94>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400
 8001758:	40005400 	.word	0x40005400

0800175c <i2c1_sw_rst>:


void i2c1_sw_rst() {
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

	// reset I2C1
	I2C1->CR1 |= I2C_CR1_SWRST;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <i2c1_sw_rst+0x28>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <i2c1_sw_rst+0x28>)
 8001766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800176a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <i2c1_sw_rst+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <i2c1_sw_rst+0x28>)
 8001772:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40005400 	.word	0x40005400

08001788 <i2c1_writebyte>:


void i2c1_writebyte(uint8_t slave_addr, uint8_t reg_addr, uint8_t byte) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 800179a:	bf00      	nop
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <i2c1_writebyte+0x80>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <i2c1_writebyte+0x14>

	i2c1_start();
 80017a8:	f000 f904 	bl	80019b4 <i2c1_start>
	I2C1->DR = slave_addr;
 80017ac:	4a16      	ldr	r2, [pc, #88]	@ (8001808 <i2c1_writebyte+0x80>)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80017b2:	bf00      	nop
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <i2c1_writebyte+0x80>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f9      	beq.n	80017b4 <i2c1_writebyte+0x2c>
	(void)I2C1->SR2;						// dummy read to clear status bit
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <i2c1_writebyte+0x80>)
 80017c2:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80017c4:	bf00      	nop
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <i2c1_writebyte+0x80>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f9      	beq.n	80017c6 <i2c1_writebyte+0x3e>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 80017d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <i2c1_writebyte+0x80>)
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80017d8:	bf00      	nop
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <i2c1_writebyte+0x80>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f9      	beq.n	80017da <i2c1_writebyte+0x52>
	I2C1->DR = byte;
 80017e6:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <i2c1_writebyte+0x80>)
 80017e8:	797b      	ldrb	r3, [r7, #5]
 80017ea:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 80017ec:	bf00      	nop
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <i2c1_writebyte+0x80>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f9      	beq.n	80017ee <i2c1_writebyte+0x66>
	i2c1_request_stop();
 80017fa:	f000 f8f3 	bl	80019e4 <i2c1_request_stop>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40005400 	.word	0x40005400

0800180c <i2c1_readbyte>:


uint8_t i2c1_readbyte(uint8_t slave_addr, uint8_t reg_addr) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 800181c:	bf00      	nop
 800181e:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f9      	bne.n	800181e <i2c1_readbyte+0x12>

	i2c1_start();
 800182a:	f000 f8c3 	bl	80019b4 <i2c1_start>
	I2C1->DR = slave_addr;
 800182e:	4a20      	ldr	r2, [pc, #128]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001834:	bf00      	nop
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f9      	beq.n	8001836 <i2c1_readbyte+0x2a>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001844:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001846:	bf00      	nop
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <i2c1_readbyte+0xa4>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f9      	beq.n	8001848 <i2c1_readbyte+0x3c>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8001854:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 800185a:	bf00      	nop
 800185c:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <i2c1_readbyte+0xa4>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f9      	beq.n	800185c <i2c1_readbyte+0x50>

	// For single byte reads, pg 482 of reference manual "Closing the communication"
	i2c1_start();
 8001868:	f000 f8a4 	bl	80019b4 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001876:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001878:	bf00      	nop
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <i2c1_readbyte+0xa4>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f9      	beq.n	800187a <i2c1_readbyte+0x6e>
	i2c1_nack();
 8001886:	f000 f8cd 	bl	8001a24 <i2c1_nack>
	(void)I2C1->SR2;						// dummy read to clear status bit
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <i2c1_readbyte+0xa4>)
 800188c:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 800188e:	f000 f8a9 	bl	80019e4 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001892:	bf00      	nop
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <i2c1_readbyte+0xa4>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f9      	beq.n	8001894 <i2c1_readbyte+0x88>
	return I2C1->DR;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <i2c1_readbyte+0xa4>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	b2db      	uxtb	r3, r3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005400 	.word	0x40005400

080018b4 <i2c1_readburst>:


void i2c1_readburst(uint8_t slave_addr, uint8_t reg_addr, uint8_t len, uint8_t * bytes) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	460b      	mov	r3, r1
 80018c2:	71bb      	strb	r3, [r7, #6]
 80018c4:	4613      	mov	r3, r2
 80018c6:	717b      	strb	r3, [r7, #5]

	if (len == 0)
 80018c8:	797b      	ldrb	r3, [r7, #5]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d06b      	beq.n	80019a6 <i2c1_readburst+0xf2>
		return;

	while (I2C1->SR2 & I2C_SR2_BUSY);
 80018ce:	bf00      	nop
 80018d0:	4b37      	ldr	r3, [pc, #220]	@ (80019b0 <i2c1_readburst+0xfc>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <i2c1_readburst+0x1c>

	i2c1_start();
 80018dc:	f000 f86a 	bl	80019b4 <i2c1_start>
	I2C1->DR = slave_addr;
 80018e0:	4a33      	ldr	r2, [pc, #204]	@ (80019b0 <i2c1_readburst+0xfc>)
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80018e6:	bf00      	nop
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <i2c1_readburst+0xfc>)
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f9      	beq.n	80018e8 <i2c1_readburst+0x34>
	(void)I2C1->SR2;						// dummy read to clear status bit
 80018f4:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <i2c1_readburst+0xfc>)
 80018f6:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80018f8:	bf00      	nop
 80018fa:	4b2d      	ldr	r3, [pc, #180]	@ (80019b0 <i2c1_readburst+0xfc>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f9      	beq.n	80018fa <i2c1_readburst+0x46>
	I2C1->DR = reg_addr;					// set first pointer on BNO055
 8001906:	4a2a      	ldr	r2, [pc, #168]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 800190c:	bf00      	nop
 800190e:	4b28      	ldr	r3, [pc, #160]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f9      	beq.n	800190e <i2c1_readburst+0x5a>

	i2c1_start();
 800191a:	f000 f84b 	bl	80019b4 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001928:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800192a:	bf00      	nop
 800192c:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <i2c1_readburst+0xfc>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f9      	beq.n	800192c <i2c1_readburst+0x78>

	// acknowledge next byte if burst >1 byte
	if (len != 1)
 8001938:	797b      	ldrb	r3, [r7, #5]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d001      	beq.n	8001942 <i2c1_readburst+0x8e>
		(void)I2C1->SR2;
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001940:	699b      	ldr	r3, [r3, #24]

	for (uint8_t i = 0; i < len - 1; i++) {
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e013      	b.n	8001970 <i2c1_readburst+0xbc>

		i2c1_ack();
 8001948:	f000 f85c 	bl	8001a04 <i2c1_ack>
		while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 800194c:	bf00      	nop
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f9      	beq.n	800194e <i2c1_readburst+0x9a>
		*bytes = I2C1->DR;					// store byte
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <i2c1_readburst+0xfc>)
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	701a      	strb	r2, [r3, #0]
		bytes++;							// move pointer
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < len - 1; i++) {
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	3301      	adds	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	3b01      	subs	r3, #1
 8001976:	429a      	cmp	r2, r3
 8001978:	dbe6      	blt.n	8001948 <i2c1_readburst+0x94>
	}

	i2c1_nack();								// clear ACK bit just after reading second last data byte
 800197a:	f000 f853 	bl	8001a24 <i2c1_nack>
	if (len == 1)
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <i2c1_readburst+0xd4>
		(void)I2C1->SR2;
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001986:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 8001988:	f000 f82c 	bl	80019e4 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 800198c:	bf00      	nop
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <i2c1_readburst+0xfc>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f9      	beq.n	800198e <i2c1_readburst+0xda>
	*bytes = I2C1->DR;
 800199a:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <i2c1_readburst+0xfc>)
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e000      	b.n	80019a8 <i2c1_readburst+0xf4>
		return;
 80019a6:	bf00      	nop
}
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40005400 	.word	0x40005400

080019b4 <i2c1_start>:


void i2c1_start() {
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <i2c1_start+0x2c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a08      	ldr	r2, [pc, #32]	@ (80019e0 <i2c1_start+0x2c>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c2:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));		// wait for start bit generation
 80019c4:	bf00      	nop
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <i2c1_start+0x2c>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f9      	beq.n	80019c6 <i2c1_start+0x12>
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40005400 	.word	0x40005400

080019e4 <i2c1_request_stop>:

void i2c1_request_stop() {
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 80019e8:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <i2c1_request_stop+0x1c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <i2c1_request_stop+0x1c>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40005400 	.word	0x40005400

08001a04 <i2c1_ack>:

void i2c1_ack() {
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_ACK;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <i2c1_ack+0x1c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <i2c1_ack+0x1c>)
 8001a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400

08001a24 <i2c1_nack>:

void i2c1_nack() {
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~I2C_CR1_ACK;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <i2c1_nack+0x1c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <i2c1_nack+0x1c>)
 8001a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40005400 	.word	0x40005400

08001a44 <i2c1_release>:


void i2c1_release() {
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0

	// set SCL and SDA lines as outputs
	GPIOB->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a26      	ldr	r2, [pc, #152]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a50:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001a54:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1);
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a5c:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8001a60:	6013      	str	r3, [r2, #0]

	// output open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a20      	ldr	r2, [pc, #128]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a68:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a6c:	6053      	str	r3, [r2, #4]

	// set SDA line high, so that after slave releases the SDA and listens for ACK/NACK, it will get NACK
	GPIOB->ODR |= GPIO_ODR_ODR_9;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a78:	6153      	str	r3, [r2, #20]

	// generate 10 clock pulses on SCL line
	for (int i = 0; i < 10; i++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e024      	b.n	8001aca <i2c1_release+0x86>

		GPIOB->ODR |= GPIO_ODR_ODR_8;
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <i2c1_release+0xa4>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	e003      	b.n	8001a9a <i2c1_release+0x56>
			__NOP();
 8001a92:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3301      	adds	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aa0:	dbf7      	blt.n	8001a92 <i2c1_release+0x4e>

		GPIOB->ODR &= ~GPIO_ODR_ODR_8;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <i2c1_release+0xa4>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <i2c1_release+0xa4>)
 8001aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aac:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	e003      	b.n	8001abc <i2c1_release+0x78>
			__NOP();
 8001ab4:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ac2:	dbf7      	blt.n	8001ab4 <i2c1_release+0x70>
	for (int i = 0; i < 10; i++) {
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	ddd7      	ble.n	8001a80 <i2c1_release+0x3c>
	}

	// set SCL high, line should be pulled high when I2C is idle
	GPIOB->ODR |= GPIO_ODR_ODR_8;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <i2c1_release+0xa4>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <i2c1_release+0xa4>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ada:	6153      	str	r3, [r2, #20]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40020400 	.word	0x40020400

08001aec <__errno>:
 8001aec:	4b01      	ldr	r3, [pc, #4]	@ (8001af4 <__errno+0x8>)
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000004 	.word	0x20000004

08001af8 <__libc_init_array>:
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	4d0d      	ldr	r5, [pc, #52]	@ (8001b30 <__libc_init_array+0x38>)
 8001afc:	4c0d      	ldr	r4, [pc, #52]	@ (8001b34 <__libc_init_array+0x3c>)
 8001afe:	1b64      	subs	r4, r4, r5
 8001b00:	10a4      	asrs	r4, r4, #2
 8001b02:	2600      	movs	r6, #0
 8001b04:	42a6      	cmp	r6, r4
 8001b06:	d109      	bne.n	8001b1c <__libc_init_array+0x24>
 8001b08:	4d0b      	ldr	r5, [pc, #44]	@ (8001b38 <__libc_init_array+0x40>)
 8001b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8001b3c <__libc_init_array+0x44>)
 8001b0c:	f000 fb1c 	bl	8002148 <_init>
 8001b10:	1b64      	subs	r4, r4, r5
 8001b12:	10a4      	asrs	r4, r4, #2
 8001b14:	2600      	movs	r6, #0
 8001b16:	42a6      	cmp	r6, r4
 8001b18:	d105      	bne.n	8001b26 <__libc_init_array+0x2e>
 8001b1a:	bd70      	pop	{r4, r5, r6, pc}
 8001b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b20:	4798      	blx	r3
 8001b22:	3601      	adds	r6, #1
 8001b24:	e7ee      	b.n	8001b04 <__libc_init_array+0xc>
 8001b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b2a:	4798      	blx	r3
 8001b2c:	3601      	adds	r6, #1
 8001b2e:	e7f2      	b.n	8001b16 <__libc_init_array+0x1e>
 8001b30:	08002160 	.word	0x08002160
 8001b34:	08002160 	.word	0x08002160
 8001b38:	08002160 	.word	0x08002160
 8001b3c:	08002164 	.word	0x08002164

08001b40 <tanh>:
 8001b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b44:	ec57 6b10 	vmov	r6, r7, d0
 8001b48:	4a43      	ldr	r2, [pc, #268]	@ (8001c58 <tanh+0x118>)
 8001b4a:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	463c      	mov	r4, r7
 8001b52:	d919      	bls.n	8001b88 <tanh+0x48>
 8001b54:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <tanh+0x11c>)
 8001b56:	2f00      	cmp	r7, #0
 8001b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b5c:	4632      	mov	r2, r6
 8001b5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b62:	463b      	mov	r3, r7
 8001b64:	db09      	blt.n	8001b7a <tanh+0x3a>
 8001b66:	f7fe fe1d 	bl	80007a4 <__aeabi_ddiv>
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	f7fe fb39 	bl	80001e4 <__adddf3>
 8001b72:	ec41 0b10 	vmov	d0, r0, r1
 8001b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b7a:	f7fe fe13 	bl	80007a4 <__aeabi_ddiv>
 8001b7e:	4622      	mov	r2, r4
 8001b80:	462b      	mov	r3, r5
 8001b82:	f7fe fb2d 	bl	80001e0 <__aeabi_dsub>
 8001b86:	e7f4      	b.n	8001b72 <tanh+0x32>
 8001b88:	4a35      	ldr	r2, [pc, #212]	@ (8001c60 <tanh+0x120>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d85c      	bhi.n	8001c48 <tanh+0x108>
 8001b8e:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 8001b92:	d20b      	bcs.n	8001bac <tanh+0x6c>
 8001b94:	4931      	ldr	r1, [pc, #196]	@ (8001c5c <tanh+0x11c>)
 8001b96:	4632      	mov	r2, r6
 8001b98:	463b      	mov	r3, r7
 8001b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b9e:	f7fe fb21 	bl	80001e4 <__adddf3>
 8001ba2:	4632      	mov	r2, r6
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	f7fe fcd3 	bl	8000550 <__aeabi_dmul>
 8001baa:	e7e2      	b.n	8001b72 <tanh+0x32>
 8001bac:	4a2d      	ldr	r2, [pc, #180]	@ (8001c64 <tanh+0x124>)
 8001bae:	4d2e      	ldr	r5, [pc, #184]	@ (8001c68 <tanh+0x128>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d923      	bls.n	8001bfc <tanh+0xbc>
 8001bb4:	f000 fac0 	bl	8002138 <fabs>
 8001bb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001bbc:	ec51 0b10 	vmov	r0, r1, d0
 8001bc0:	f7fe fcc6 	bl	8000550 <__aeabi_dmul>
 8001bc4:	ec41 0b10 	vmov	d0, r0, r1
 8001bc8:	f000 f852 	bl	8001c70 <expm1>
 8001bcc:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <tanh+0x11c>)
 8001bce:	ec53 2b10 	vmov	r2, r3, d0
 8001bd2:	e9d1 6700 	ldrd	r6, r7, [r1]
 8001bd6:	e9d5 8900 	ldrd	r8, r9, [r5]
 8001bda:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001bde:	f7fe fb01 	bl	80001e4 <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4640      	mov	r0, r8
 8001be8:	4649      	mov	r1, r9
 8001bea:	f7fe fddb 	bl	80007a4 <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	4639      	mov	r1, r7
 8001bf6:	f7fe faf3 	bl	80001e0 <__aeabi_dsub>
 8001bfa:	e01d      	b.n	8001c38 <tanh+0xf8>
 8001bfc:	e9d5 6700 	ldrd	r6, r7, [r5]
 8001c00:	f000 fa9a 	bl	8002138 <fabs>
 8001c04:	4630      	mov	r0, r6
 8001c06:	ec53 2b10 	vmov	r2, r3, d0
 8001c0a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8001c0e:	f7fe fc9f 	bl	8000550 <__aeabi_dmul>
 8001c12:	ec41 0b10 	vmov	d0, r0, r1
 8001c16:	f000 f82b 	bl	8001c70 <expm1>
 8001c1a:	ec53 2b10 	vmov	r2, r3, d0
 8001c1e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001c22:	4616      	mov	r6, r2
 8001c24:	f103 4700 	add.w	r7, r3, #2147483648	@ 0x80000000
 8001c28:	f7fe fadc 	bl	80001e4 <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4630      	mov	r0, r6
 8001c32:	4639      	mov	r1, r7
 8001c34:	f7fe fdb6 	bl	80007a4 <__aeabi_ddiv>
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	bfbf      	itttt	lt
 8001c3c:	4602      	movlt	r2, r0
 8001c3e:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 8001c42:	4610      	movlt	r0, r2
 8001c44:	4619      	movlt	r1, r3
 8001c46:	e794      	b.n	8001b72 <tanh+0x32>
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <tanh+0x11c>)
 8001c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4e:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <tanh+0x12c>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	e7cf      	b.n	8001bf6 <tanh+0xb6>
 8001c56:	bf00      	nop
 8001c58:	7fefffff 	.word	0x7fefffff
 8001c5c:	20000068 	.word	0x20000068
 8001c60:	4035ffff 	.word	0x4035ffff
 8001c64:	3fefffff 	.word	0x3fefffff
 8001c68:	20000060 	.word	0x20000060
 8001c6c:	20000058 	.word	0x20000058

08001c70 <expm1>:
 8001c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c74:	ec5b ab10 	vmov	sl, fp, d0
 8001c78:	49cf      	ldr	r1, [pc, #828]	@ (8001fb8 <expm1+0x348>)
 8001c7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8001c7e:	428b      	cmp	r3, r1
 8001c80:	b085      	sub	sp, #20
 8001c82:	f00b 4400 	and.w	r4, fp, #2147483648	@ 0x80000000
 8001c86:	d93b      	bls.n	8001d00 <expm1+0x90>
 8001c88:	49cc      	ldr	r1, [pc, #816]	@ (8001fbc <expm1+0x34c>)
 8001c8a:	428b      	cmp	r3, r1
 8001c8c:	d922      	bls.n	8001cd4 <expm1+0x64>
 8001c8e:	49cc      	ldr	r1, [pc, #816]	@ (8001fc0 <expm1+0x350>)
 8001c90:	428b      	cmp	r3, r1
 8001c92:	d911      	bls.n	8001cb8 <expm1+0x48>
 8001c94:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8001c98:	4653      	mov	r3, sl
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	d006      	beq.n	8001cac <expm1+0x3c>
 8001c9e:	4652      	mov	r2, sl
 8001ca0:	465b      	mov	r3, fp
 8001ca2:	4650      	mov	r0, sl
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	f7fe fa9d 	bl	80001e4 <__adddf3>
 8001caa:	e1b7      	b.n	800201c <expm1+0x3ac>
 8001cac:	bb1c      	cbnz	r4, 8001cf6 <expm1+0x86>
 8001cae:	ec4b ab10 	vmov	d0, sl, fp
 8001cb2:	b005      	add	sp, #20
 8001cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001f58 <expm1+0x2e8>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	4650      	mov	r0, sl
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	f7fe fed5 	bl	8000a70 <__aeabi_dcmpgt>
 8001cc6:	b128      	cbz	r0, 8001cd4 <expm1+0x64>
 8001cc8:	2000      	movs	r0, #0
 8001cca:	b005      	add	sp, #20
 8001ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd0:	f000 ba2a 	b.w	8002128 <__math_oflow>
 8001cd4:	2c00      	cmp	r4, #0
 8001cd6:	f000 80c1 	beq.w	8001e5c <expm1+0x1ec>
 8001cda:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001f60 <expm1+0x2f0>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	4650      	mov	r0, sl
 8001ce2:	4659      	mov	r1, fp
 8001ce4:	f7fe fa7e 	bl	80001e4 <__adddf3>
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2300      	movs	r3, #0
 8001cec:	f7fe fea2 	bl	8000a34 <__aeabi_dcmplt>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f000 80de 	beq.w	8001eb2 <expm1+0x242>
 8001cf6:	f8df b2ec 	ldr.w	fp, [pc, #748]	@ 8001fe4 <expm1+0x374>
 8001cfa:	f04f 0a00 	mov.w	sl, #0
 8001cfe:	e7d6      	b.n	8001cae <expm1+0x3e>
 8001d00:	4ab0      	ldr	r2, [pc, #704]	@ (8001fc4 <expm1+0x354>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f240 80ed 	bls.w	8001ee2 <expm1+0x272>
 8001d08:	4aaf      	ldr	r2, [pc, #700]	@ (8001fc8 <expm1+0x358>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f200 80dd 	bhi.w	8001eca <expm1+0x25a>
 8001d10:	a395      	add	r3, pc, #596	@ (adr r3, 8001f68 <expm1+0x2f8>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4650      	mov	r0, sl
 8001d18:	4659      	mov	r1, fp
 8001d1a:	2c00      	cmp	r4, #0
 8001d1c:	f040 8093 	bne.w	8001e46 <expm1+0x1d6>
 8001d20:	f7fe fa5e 	bl	80001e0 <__aeabi_dsub>
 8001d24:	f20f 2948 	addw	r9, pc, #584	@ 0x248
 8001d28:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001d2c:	4606      	mov	r6, r0
 8001d2e:	460f      	mov	r7, r1
 8001d30:	2401      	movs	r4, #1
 8001d32:	4642      	mov	r2, r8
 8001d34:	464b      	mov	r3, r9
 8001d36:	4630      	mov	r0, r6
 8001d38:	4639      	mov	r1, r7
 8001d3a:	f7fe fa51 	bl	80001e0 <__aeabi_dsub>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4682      	mov	sl, r0
 8001d44:	468b      	mov	fp, r1
 8001d46:	4630      	mov	r0, r6
 8001d48:	4639      	mov	r1, r7
 8001d4a:	f7fe fa49 	bl	80001e0 <__aeabi_dsub>
 8001d4e:	4642      	mov	r2, r8
 8001d50:	464b      	mov	r3, r9
 8001d52:	f7fe fa45 	bl	80001e0 <__aeabi_dsub>
 8001d56:	e9cd 0100 	strd	r0, r1, [sp]
 8001d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8001fcc <expm1+0x35c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4650      	mov	r0, sl
 8001d60:	4659      	mov	r1, fp
 8001d62:	f7fe fbf5 	bl	8000550 <__aeabi_dmul>
 8001d66:	4606      	mov	r6, r0
 8001d68:	460f      	mov	r7, r1
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4650      	mov	r0, sl
 8001d70:	4659      	mov	r1, fp
 8001d72:	f7fe fbed 	bl	8000550 <__aeabi_dmul>
 8001d76:	a380      	add	r3, pc, #512	@ (adr r3, 8001f78 <expm1+0x308>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	4689      	mov	r9, r1
 8001d80:	f7fe fbe6 	bl	8000550 <__aeabi_dmul>
 8001d84:	a37e      	add	r3, pc, #504	@ (adr r3, 8001f80 <expm1+0x310>)
 8001d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8a:	f7fe fa2b 	bl	80001e4 <__adddf3>
 8001d8e:	4642      	mov	r2, r8
 8001d90:	464b      	mov	r3, r9
 8001d92:	f7fe fbdd 	bl	8000550 <__aeabi_dmul>
 8001d96:	a37c      	add	r3, pc, #496	@ (adr r3, 8001f88 <expm1+0x318>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fa20 	bl	80001e0 <__aeabi_dsub>
 8001da0:	4642      	mov	r2, r8
 8001da2:	464b      	mov	r3, r9
 8001da4:	f7fe fbd4 	bl	8000550 <__aeabi_dmul>
 8001da8:	a379      	add	r3, pc, #484	@ (adr r3, 8001f90 <expm1+0x320>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fa19 	bl	80001e4 <__adddf3>
 8001db2:	4642      	mov	r2, r8
 8001db4:	464b      	mov	r3, r9
 8001db6:	f7fe fbcb 	bl	8000550 <__aeabi_dmul>
 8001dba:	a377      	add	r3, pc, #476	@ (adr r3, 8001f98 <expm1+0x328>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fa0e 	bl	80001e0 <__aeabi_dsub>
 8001dc4:	4642      	mov	r2, r8
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	f7fe fbc2 	bl	8000550 <__aeabi_dmul>
 8001dcc:	4b80      	ldr	r3, [pc, #512]	@ (8001fd0 <expm1+0x360>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f7fe fa08 	bl	80001e4 <__adddf3>
 8001dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4630      	mov	r0, r6
 8001dde:	4639      	mov	r1, r7
 8001de0:	f7fe fbb6 	bl	8000550 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	2000      	movs	r0, #0
 8001dea:	497a      	ldr	r1, [pc, #488]	@ (8001fd4 <expm1+0x364>)
 8001dec:	f7fe f9f8 	bl	80001e0 <__aeabi_dsub>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4606      	mov	r6, r0
 8001df6:	460f      	mov	r7, r1
 8001df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001dfc:	f7fe f9f0 	bl	80001e0 <__aeabi_dsub>
 8001e00:	4632      	mov	r2, r6
 8001e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e06:	463b      	mov	r3, r7
 8001e08:	4650      	mov	r0, sl
 8001e0a:	4659      	mov	r1, fp
 8001e0c:	f7fe fba0 	bl	8000550 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	2000      	movs	r0, #0
 8001e16:	4970      	ldr	r1, [pc, #448]	@ (8001fd8 <expm1+0x368>)
 8001e18:	f7fe f9e2 	bl	80001e0 <__aeabi_dsub>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e24:	f7fe fcbe 	bl	80007a4 <__aeabi_ddiv>
 8001e28:	4642      	mov	r2, r8
 8001e2a:	464b      	mov	r3, r9
 8001e2c:	f7fe fb90 	bl	8000550 <__aeabi_dmul>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d16b      	bne.n	8001f10 <expm1+0x2a0>
 8001e38:	4650      	mov	r0, sl
 8001e3a:	4659      	mov	r1, fp
 8001e3c:	f7fe fb88 	bl	8000550 <__aeabi_dmul>
 8001e40:	4642      	mov	r2, r8
 8001e42:	464b      	mov	r3, r9
 8001e44:	e059      	b.n	8001efa <expm1+0x28a>
 8001e46:	f7fe f9cd 	bl	80001e4 <__adddf3>
 8001e4a:	f20f 1954 	addw	r9, pc, #340	@ 0x154
 8001e4e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001e52:	4606      	mov	r6, r0
 8001e54:	460f      	mov	r7, r1
 8001e56:	f04f 34ff 	mov.w	r4, #4294967295
 8001e5a:	e76a      	b.n	8001d32 <expm1+0xc2>
 8001e5c:	a352      	add	r3, pc, #328	@ (adr r3, 8001fa8 <expm1+0x338>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	4650      	mov	r0, sl
 8001e64:	4659      	mov	r1, fp
 8001e66:	f7fe fb73 	bl	8000550 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4957      	ldr	r1, [pc, #348]	@ (8001fcc <expm1+0x35c>)
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7fe f9b7 	bl	80001e4 <__adddf3>
 8001e76:	f7fe fe05 	bl	8000a84 <__aeabi_d2iz>
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	f7fe fafe 	bl	800047c <__aeabi_i2d>
 8001e80:	a339      	add	r3, pc, #228	@ (adr r3, 8001f68 <expm1+0x2f8>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	4680      	mov	r8, r0
 8001e88:	4689      	mov	r9, r1
 8001e8a:	f7fe fb61 	bl	8000550 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4650      	mov	r0, sl
 8001e94:	4659      	mov	r1, fp
 8001e96:	f7fe f9a3 	bl	80001e0 <__aeabi_dsub>
 8001e9a:	a335      	add	r3, pc, #212	@ (adr r3, 8001f70 <expm1+0x300>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	460f      	mov	r7, r1
 8001ea4:	4640      	mov	r0, r8
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	f7fe fb52 	bl	8000550 <__aeabi_dmul>
 8001eac:	4680      	mov	r8, r0
 8001eae:	4689      	mov	r9, r1
 8001eb0:	e73f      	b.n	8001d32 <expm1+0xc2>
 8001eb2:	a33d      	add	r3, pc, #244	@ (adr r3, 8001fa8 <expm1+0x338>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4650      	mov	r0, sl
 8001eba:	4659      	mov	r1, fp
 8001ebc:	f7fe fb48 	bl	8000550 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4945      	ldr	r1, [pc, #276]	@ (8001fdc <expm1+0x36c>)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7d3      	b.n	8001e72 <expm1+0x202>
 8001eca:	a337      	add	r3, pc, #220	@ (adr r3, 8001fa8 <expm1+0x338>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	4650      	mov	r0, sl
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	f7fe fb3c 	bl	8000550 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	2c00      	cmp	r4, #0
 8001ede:	d1f1      	bne.n	8001ec4 <expm1+0x254>
 8001ee0:	e7c5      	b.n	8001e6e <expm1+0x1fe>
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe0 <expm1+0x370>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d811      	bhi.n	8001f0c <expm1+0x29c>
 8001ee8:	a331      	add	r3, pc, #196	@ (adr r3, 8001fb0 <expm1+0x340>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	4650      	mov	r0, sl
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	f7fe f977 	bl	80001e4 <__adddf3>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	f7fe f971 	bl	80001e0 <__aeabi_dsub>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4650      	mov	r0, sl
 8001f04:	4659      	mov	r1, fp
 8001f06:	f7fe f96b 	bl	80001e0 <__aeabi_dsub>
 8001f0a:	e087      	b.n	800201c <expm1+0x3ac>
 8001f0c:	2400      	movs	r4, #0
 8001f0e:	e724      	b.n	8001d5a <expm1+0xea>
 8001f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f14:	f7fe f964 	bl	80001e0 <__aeabi_dsub>
 8001f18:	4652      	mov	r2, sl
 8001f1a:	465b      	mov	r3, fp
 8001f1c:	f7fe fb18 	bl	8000550 <__aeabi_dmul>
 8001f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f24:	f7fe f95c 	bl	80001e0 <__aeabi_dsub>
 8001f28:	464b      	mov	r3, r9
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	f7fe f958 	bl	80001e0 <__aeabi_dsub>
 8001f30:	1c63      	adds	r3, r4, #1
 8001f32:	4606      	mov	r6, r0
 8001f34:	460f      	mov	r7, r1
 8001f36:	d157      	bne.n	8001fe8 <expm1+0x378>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4650      	mov	r0, sl
 8001f3e:	4659      	mov	r1, fp
 8001f40:	f7fe f94e 	bl	80001e0 <__aeabi_dsub>
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <expm1+0x35c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	f7fe fb02 	bl	8000550 <__aeabi_dmul>
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <expm1+0x35c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	e7d9      	b.n	8001f06 <expm1+0x296>
 8001f52:	bf00      	nop
 8001f54:	f3af 8000 	nop.w
 8001f58:	fefa39ef 	.word	0xfefa39ef
 8001f5c:	40862e42 	.word	0x40862e42
 8001f60:	c2f8f359 	.word	0xc2f8f359
 8001f64:	01a56e1f 	.word	0x01a56e1f
 8001f68:	fee00000 	.word	0xfee00000
 8001f6c:	3fe62e42 	.word	0x3fe62e42
 8001f70:	35793c76 	.word	0x35793c76
 8001f74:	3dea39ef 	.word	0x3dea39ef
 8001f78:	6e09c32d 	.word	0x6e09c32d
 8001f7c:	be8afdb7 	.word	0xbe8afdb7
 8001f80:	86e65239 	.word	0x86e65239
 8001f84:	3ed0cfca 	.word	0x3ed0cfca
 8001f88:	9eaadbb7 	.word	0x9eaadbb7
 8001f8c:	3f14ce19 	.word	0x3f14ce19
 8001f90:	19fe5585 	.word	0x19fe5585
 8001f94:	3f5a01a0 	.word	0x3f5a01a0
 8001f98:	111110f4 	.word	0x111110f4
 8001f9c:	3fa11111 	.word	0x3fa11111
 8001fa0:	35793c76 	.word	0x35793c76
 8001fa4:	bdea39ef 	.word	0xbdea39ef
 8001fa8:	652b82fe 	.word	0x652b82fe
 8001fac:	3ff71547 	.word	0x3ff71547
 8001fb0:	8800759c 	.word	0x8800759c
 8001fb4:	7e37e43c 	.word	0x7e37e43c
 8001fb8:	40436879 	.word	0x40436879
 8001fbc:	40862e41 	.word	0x40862e41
 8001fc0:	7fefffff 	.word	0x7fefffff
 8001fc4:	3fd62e42 	.word	0x3fd62e42
 8001fc8:	3ff0a2b1 	.word	0x3ff0a2b1
 8001fcc:	3fe00000 	.word	0x3fe00000
 8001fd0:	3ff00000 	.word	0x3ff00000
 8001fd4:	40080000 	.word	0x40080000
 8001fd8:	40180000 	.word	0x40180000
 8001fdc:	bfe00000 	.word	0xbfe00000
 8001fe0:	3c8fffff 	.word	0x3c8fffff
 8001fe4:	bff00000 	.word	0xbff00000
 8001fe8:	2c01      	cmp	r4, #1
 8001fea:	d127      	bne.n	800203c <expm1+0x3cc>
 8001fec:	4b34      	ldr	r3, [pc, #208]	@ (80020c0 <expm1+0x450>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4650      	mov	r0, sl
 8001ff2:	4659      	mov	r1, fp
 8001ff4:	f7fe fd1e 	bl	8000a34 <__aeabi_dcmplt>
 8001ff8:	b198      	cbz	r0, 8002022 <expm1+0x3b2>
 8001ffa:	4b32      	ldr	r3, [pc, #200]	@ (80020c4 <expm1+0x454>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4650      	mov	r0, sl
 8002000:	4659      	mov	r1, fp
 8002002:	f7fe f8ef 	bl	80001e4 <__adddf3>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4630      	mov	r0, r6
 800200c:	4639      	mov	r1, r7
 800200e:	f7fe f8e7 	bl	80001e0 <__aeabi_dsub>
 8002012:	2200      	movs	r2, #0
 8002014:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002018:	f7fe fa9a 	bl	8000550 <__aeabi_dmul>
 800201c:	4682      	mov	sl, r0
 800201e:	468b      	mov	fp, r1
 8002020:	e645      	b.n	8001cae <expm1+0x3e>
 8002022:	4632      	mov	r2, r6
 8002024:	463b      	mov	r3, r7
 8002026:	4650      	mov	r0, sl
 8002028:	4659      	mov	r1, fp
 800202a:	f7fe f8d9 	bl	80001e0 <__aeabi_dsub>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	f7fe f8d7 	bl	80001e4 <__adddf3>
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <expm1+0x458>)
 8002038:	2200      	movs	r2, #0
 800203a:	e634      	b.n	8001ca6 <expm1+0x36>
 800203c:	1c63      	adds	r3, r4, #1
 800203e:	2b39      	cmp	r3, #57	@ 0x39
 8002040:	ea4f 5504 	mov.w	r5, r4, lsl #20
 8002044:	d90e      	bls.n	8002064 <expm1+0x3f4>
 8002046:	4652      	mov	r2, sl
 8002048:	465b      	mov	r3, fp
 800204a:	f7fe f8c9 	bl	80001e0 <__aeabi_dsub>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	2000      	movs	r0, #0
 8002054:	491c      	ldr	r1, [pc, #112]	@ (80020c8 <expm1+0x458>)
 8002056:	f7fe f8c3 	bl	80001e0 <__aeabi_dsub>
 800205a:	186b      	adds	r3, r5, r1
 800205c:	4619      	mov	r1, r3
 800205e:	2200      	movs	r2, #0
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <expm1+0x458>)
 8002062:	e750      	b.n	8001f06 <expm1+0x296>
 8002064:	2c13      	cmp	r4, #19
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	dc17      	bgt.n	800209c <expm1+0x42c>
 800206c:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 8002070:	fa46 f404 	asr.w	r4, r6, r4
 8002074:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 8002078:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 800207c:	4616      	mov	r6, r2
 800207e:	461f      	mov	r7, r3
 8002080:	4652      	mov	r2, sl
 8002082:	465b      	mov	r3, fp
 8002084:	f7fe f8ac 	bl	80001e0 <__aeabi_dsub>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4630      	mov	r0, r6
 800208e:	4639      	mov	r1, r7
 8002090:	f7fe f8a6 	bl	80001e0 <__aeabi_dsub>
 8002094:	4682      	mov	sl, r0
 8002096:	eb05 0b01 	add.w	fp, r5, r1
 800209a:	e608      	b.n	8001cae <expm1+0x3e>
 800209c:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 80020a0:	3403      	adds	r4, #3
 80020a2:	0523      	lsls	r3, r4, #20
 80020a4:	f7fe f89e 	bl	80001e4 <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4650      	mov	r0, sl
 80020ae:	4659      	mov	r1, fp
 80020b0:	f7fe f896 	bl	80001e0 <__aeabi_dsub>
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <expm1+0x458>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	f7fe f894 	bl	80001e4 <__adddf3>
 80020bc:	e7ea      	b.n	8002094 <expm1+0x424>
 80020be:	bf00      	nop
 80020c0:	bfd00000 	.word	0xbfd00000
 80020c4:	3fe00000 	.word	0x3fe00000
 80020c8:	3ff00000 	.word	0x3ff00000

080020cc <with_errno>:
 80020cc:	b510      	push	{r4, lr}
 80020ce:	ed2d 8b02 	vpush	{d8}
 80020d2:	eeb0 8a40 	vmov.f32	s16, s0
 80020d6:	eef0 8a60 	vmov.f32	s17, s1
 80020da:	4604      	mov	r4, r0
 80020dc:	f7ff fd06 	bl	8001aec <__errno>
 80020e0:	eeb0 0a48 	vmov.f32	s0, s16
 80020e4:	eef0 0a68 	vmov.f32	s1, s17
 80020e8:	ecbd 8b02 	vpop	{d8}
 80020ec:	6004      	str	r4, [r0, #0]
 80020ee:	bd10      	pop	{r4, pc}

080020f0 <xflow>:
 80020f0:	4603      	mov	r3, r0
 80020f2:	b507      	push	{r0, r1, r2, lr}
 80020f4:	ec51 0b10 	vmov	r0, r1, d0
 80020f8:	b183      	cbz	r3, 800211c <xflow+0x2c>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002100:	e9cd 2300 	strd	r2, r3, [sp]
 8002104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002108:	f7fe fa22 	bl	8000550 <__aeabi_dmul>
 800210c:	ec41 0b10 	vmov	d0, r0, r1
 8002110:	2022      	movs	r0, #34	@ 0x22
 8002112:	b003      	add	sp, #12
 8002114:	f85d eb04 	ldr.w	lr, [sp], #4
 8002118:	f7ff bfd8 	b.w	80020cc <with_errno>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	e7ee      	b.n	8002100 <xflow+0x10>
 8002122:	0000      	movs	r0, r0
 8002124:	0000      	movs	r0, r0
	...

08002128 <__math_oflow>:
 8002128:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002130 <__math_oflow+0x8>
 800212c:	f7ff bfe0 	b.w	80020f0 <xflow>
 8002130:	00000000 	.word	0x00000000
 8002134:	70000000 	.word	0x70000000

08002138 <fabs>:
 8002138:	ec51 0b10 	vmov	r0, r1, d0
 800213c:	4602      	mov	r2, r0
 800213e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002142:	ec43 2b10 	vmov	d0, r2, r3
 8002146:	4770      	bx	lr

08002148 <_init>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	bf00      	nop
 800214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214e:	bc08      	pop	{r3}
 8002150:	469e      	mov	lr, r3
 8002152:	4770      	bx	lr

08002154 <_fini>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr
