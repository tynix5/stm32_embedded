
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001794  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001928  08001928  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001928  08001928  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001928  08001928  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001928  08001928  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001928  08001928  00002928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800192c  0800192c  0000292c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001930  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001934  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001934  00003024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f5c  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000083e  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000057d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e8  00000000  00000000  00005a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192be  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000380a  00000000  00000000  0001ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae2ed  00000000  00000000  00022720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0a0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009bc  00000000  00000000  000d0a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001910 	.word	0x08001910

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001910 	.word	0x08001910

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <main>:
float constrain(float var, float min, float max);
uint32_t map(float in, float in_min, float in_max, float out_min, float out_max);


int main(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b09d      	sub	sp, #116	@ 0x74
 8000a14:	af02      	add	r7, sp, #8

	clock_config();
 8000a16:	f000 f927 	bl	8000c68 <clock_config>
	motors_config();
 8000a1a:	f000 fa49 	bl	8000eb0 <motors_config>

	encoder_config();
 8000a1e:	f000 fac3 	bl	8000fa8 <encoder_config>
	refresh_tim_config();
 8000a22:	f000 fb0b 	bl	800103c <refresh_tim_config>

//	// ensure IMU connected
	while (!imu_config());
 8000a26:	bf00      	nop
 8000a28:	f000 fb30 	bl	800108c <imu_config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0fa      	beq.n	8000a28 <main+0x18>

	// Encoder PID constants
	const float encoder_kp = 0;
 8000a32:	f04f 0300 	mov.w	r3, #0
 8000a36:	65bb      	str	r3, [r7, #88]	@ 0x58
	const float encoder_kd = 0;
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	657b      	str	r3, [r7, #84]	@ 0x54

	// IMU PID constants
	const float imu_kp = 0.64;
 8000a3e:	4b81      	ldr	r3, [pc, #516]	@ (8000c44 <main+0x234>)
 8000a40:	653b      	str	r3, [r7, #80]	@ 0x50
	const float imu_kd = 0.023;
 8000a42:	4b81      	ldr	r3, [pc, #516]	@ (8000c48 <main+0x238>)
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const float dt = 1 / 100.0;			// 100Hz fusion refresh rate
 8000a46:	4b81      	ldr	r3, [pc, #516]	@ (8000c4c <main+0x23c>)
 8000a48:	64bb      	str	r3, [r7, #72]	@ 0x48

	// Critical thresholds
	const float critical_angle = 18;	// after 18 degrees, there is no returning
 8000a4a:	4b81      	ldr	r3, [pc, #516]	@ (8000c50 <main+0x240>)
 8000a4c:	647b      	str	r3, [r7, #68]	@ 0x44
//	const float angle_thresh = 6;
//	const float spike_threshold = 8;
	const float min_err = 0.05;
 8000a4e:	4b81      	ldr	r3, [pc, #516]	@ (8000c54 <main+0x244>)
 8000a50:	643b      	str	r3, [r7, #64]	@ 0x40
	const float max_pid_out = 10;
 8000a52:	4b81      	ldr	r3, [pc, #516]	@ (8000c58 <main+0x248>)
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// don't select a target pitch greater or less than these values
	const float max_target_pitch = 8;
 8000a56:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
	const float min_target_pitch = -8;
 8000a5c:	f04f 4341 	mov.w	r3, #3238002688	@ 0xc1000000
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34


	const uint16_t min_pwm = 225;		// minimum speed when motors begin to turn
 8000a62:	23e1      	movs	r3, #225	@ 0xe1
 8000a64:	867b      	strh	r3, [r7, #50]	@ 0x32
	const uint16_t max_pwm = TIM3->ARR;
 8000a66:	4b7d      	ldr	r3, [pc, #500]	@ (8000c5c <main+0x24c>)
 8000a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6a:	863b      	strh	r3, [r7, #48]	@ 0x30
//	float pos_integral = 0;

	int16_t roll_raw, heading_raw, pitch_raw;
	float roll, heading, pitch;

	float pitch_err, last_pitch_err = 0;
 8000a6c:	f04f 0300 	mov.w	r3, #0
 8000a70:	667b      	str	r3, [r7, #100]	@ 0x64
	int32_t encoder_ticks, last_encoder_ticks = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	663b      	str	r3, [r7, #96]	@ 0x60

	float sensor_err = imu_calibrate();
 8000a76:	f000 fbeb 	bl	8001250 <imu_calibrate>
 8000a7a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	while (1)
	{

	  TIM5->SR &= ~TIM_SR_UIF;				// clear update interrupt flag
 8000a7e:	4b78      	ldr	r3, [pc, #480]	@ (8000c60 <main+0x250>)
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	4a77      	ldr	r2, [pc, #476]	@ (8000c60 <main+0x250>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6113      	str	r3, [r2, #16]
	  while (!(TIM5->SR & (TIM_SR_UIF)));	// wait for next fusion data
 8000a8a:	bf00      	nop
 8000a8c:	4b74      	ldr	r3, [pc, #464]	@ (8000c60 <main+0x250>)
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f9      	beq.n	8000a8c <main+0x7c>

	  // read encoder error and calculate target pitch
	  encoder_ticks = TIM2->CNT;
 8000a98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  float target_pitch = encoder_kp * encoder_ticks + encoder_kd * (encoder_ticks - last_encoder_ticks) / dt;
 8000aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa2:	ee07 3a90 	vmov	s15, r3
 8000aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aaa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ab4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ac0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000ac4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ac8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000acc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	  target_pitch = constrain(target_pitch, min_target_pitch, max_target_pitch);
 8000ad8:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8000adc:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8000ae0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8000ae4:	f000 fc02 	bl	80012ec <constrain>
 8000ae8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	  // read orientation
	  imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 8000aec:	f107 0210 	add.w	r2, r7, #16
 8000af0:	f107 010e 	add.w	r1, r7, #14
 8000af4:	f107 0312 	add.w	r3, r7, #18
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fb31 	bl	8001160 <imu_read_euler>
	  convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 8000afe:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8000b02:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000b06:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b0a:	f107 0408 	add.w	r4, r7, #8
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	463b      	mov	r3, r7
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4623      	mov	r3, r4
 8000b18:	f000 fb50 	bl	80011bc <convert_euler>

	  // error is difference between current pitch and target pitch
	  pitch_err = pitch - target_pitch - sensor_err;
 8000b1c:	ed97 7a00 	vldr	s14, [r7]
 8000b20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b28:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b30:	edc7 7a08 	vstr	s15, [r7, #32]
//	  else if (fabs(pitch_err) < angle_thresh)		// for small angles, compute integral
//		  pos_integral += pitch_err * dt;


//	  float pid_out = kp * pitch_err + kpos * pos_integral + kd * (pitch_err - last_err) / dt;
	  float pid_out = imu_kp * pitch_err + imu_kd * (pitch_err - last_pitch_err) / dt;
 8000b34:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000b38:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b40:	edd7 6a08 	vldr	s13, [r7, #32]
 8000b44:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000b48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b4c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000b50:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000b54:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000b58:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b60:	edc7 7a07 	vstr	s15, [r7, #28]

	  // use absolute value of controller to select pwm duty value
	  // direction of motors is determined by sign of pid_out
	  float pid_abs = fabs(pid_out);
 8000b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b68:	eef0 7ae7 	vabs.f32	s15, s15
 8000b6c:	edc7 7a06 	vstr	s15, [r7, #24]

	  // limit the top of the controller
	  pid_abs = constrain(pid_abs, 0, max_pid_out);
 8000b70:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 8000b74:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8000c64 <main+0x254>
 8000b78:	ed97 0a06 	vldr	s0, [r7, #24]
 8000b7c:	f000 fbb6 	bl	80012ec <constrain>
 8000b80:	ed87 0a06 	vstr	s0, [r7, #24]


//	  uint32_t pwm = slope * pid_abs + min_pwm;
	  uint32_t pwm = map(pid_abs, 0, max_pid_out, min_pwm, max_pwm);
 8000b84:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b8e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b90:	ee07 3a10 	vmov	s14, r3
 8000b94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000b98:	eeb0 2a47 	vmov.f32	s4, s14
 8000b9c:	eef0 1a67 	vmov.f32	s3, s15
 8000ba0:	ed97 1a0f 	vldr	s2, [r7, #60]	@ 0x3c
 8000ba4:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8000c64 <main+0x254>
 8000ba8:	ed97 0a06 	vldr	s0, [r7, #24]
 8000bac:	f000 fbc7 	bl	800133e <map>
 8000bb0:	6178      	str	r0, [r7, #20]

	  uint8_t motor_dir;

	  if (pid_out > 0)				motor_dir = MOTOR_FWD;
 8000bb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	dd03      	ble.n	8000bc8 <main+0x1b8>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000bc6:	e002      	b.n	8000bce <main+0x1be>
	  else							motor_dir = MOTOR_BACKWD;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


	  // if robot passes critical angle, turn off
	  if (fabs(pitch) > critical_angle || fabs(pitch) < min_err) {
 8000bce:	edd7 7a00 	vldr	s15, [r7]
 8000bd2:	eef0 7ae7 	vabs.f32	s15, s15
 8000bd6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be2:	d40a      	bmi.n	8000bfa <main+0x1ea>
 8000be4:	edd7 7a00 	vldr	s15, [r7]
 8000be8:	eef0 7ae7 	vabs.f32	s15, s15
 8000bec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	dd0e      	ble.n	8000c18 <main+0x208>

		  motors_set_speed(MOTOR_LEFT, motor_dir, 0);
 8000bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4619      	mov	r1, r3
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f972 	bl	8000eec <motors_set_speed>
		  motors_set_speed(MOTOR_RIGHT, motor_dir, 0);
 8000c08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 f96b 	bl	8000eec <motors_set_speed>
		  continue;
 8000c16:	e013      	b.n	8000c40 <main+0x230>
	  }

	  motors_set_speed(MOTOR_LEFT, motor_dir, pwm);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000c20:	4619      	mov	r1, r3
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f962 	bl	8000eec <motors_set_speed>
	  motors_set_speed(MOTOR_RIGHT, motor_dir, pwm);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000c30:	4619      	mov	r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 f95a 	bl	8000eec <motors_set_speed>

	  last_pitch_err = pitch_err;
 8000c38:	6a3b      	ldr	r3, [r7, #32]
 8000c3a:	667b      	str	r3, [r7, #100]	@ 0x64
	  last_encoder_ticks = encoder_ticks;
 8000c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c3e:	663b      	str	r3, [r7, #96]	@ 0x60
	{
 8000c40:	e71d      	b.n	8000a7e <main+0x6e>
 8000c42:	bf00      	nop
 8000c44:	3f23d70a 	.word	0x3f23d70a
 8000c48:	3cbc6a7f 	.word	0x3cbc6a7f
 8000c4c:	3c23d70a 	.word	0x3c23d70a
 8000c50:	41900000 	.word	0x41900000
 8000c54:	3d4ccccd 	.word	0x3d4ccccd
 8000c58:	41200000 	.word	0x41200000
 8000c5c:	40000400 	.word	0x40000400
 8000c60:	40000c00 	.word	0x40000c00
 8000c64:	00000000 	.word	0x00000000

08000c68 <clock_config>:

  }
}

void clock_config() {
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000c6e:	4b42      	ldr	r3, [pc, #264]	@ (8000d78 <clock_config+0x110>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a41      	ldr	r2, [pc, #260]	@ (8000d78 <clock_config+0x110>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000c7a:	bf00      	nop
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d78 <clock_config+0x110>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f9      	beq.n	8000c7c <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000c88:	4b3b      	ldr	r3, [pc, #236]	@ (8000d78 <clock_config+0x110>)
 8000c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c8e:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000c90:	4b3a      	ldr	r3, [pc, #232]	@ (8000d7c <clock_config+0x114>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a39      	ldr	r2, [pc, #228]	@ (8000d7c <clock_config+0x114>)
 8000c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c9a:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	@ (8000d7c <clock_config+0x114>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a36      	ldr	r2, [pc, #216]	@ (8000d7c <clock_config+0x114>)
 8000ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ca6:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000ca8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cac:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000cb6:	4a32      	ldr	r2, [pc, #200]	@ (8000d80 <clock_config+0x118>)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000cc6:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cce:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000cd6:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000cd8:	4a27      	ldr	r2, [pc, #156]	@ (8000d78 <clock_config+0x110>)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000cde:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <clock_config+0x110>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000cea:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cf2:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000cfa:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d06:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000d0e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000d16:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f043 0310 	orr.w	r3, r3, #16
 8000d1e:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000d20:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <clock_config+0x110>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <clock_config+0x110>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <clock_config+0x110>)
 8000d2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d30:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000d32:	bf00      	nop
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <clock_config+0x110>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f9      	beq.n	8000d34 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <clock_config+0x110>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <clock_config+0x110>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000d5c:	bf00      	nop
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <clock_config+0x110>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <clock_config+0xf6>
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40007000 	.word	0x40007000
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <pwm_config>:

void pwm_config() {
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	// TIM3_CH3 is PB0 (A3)
	// TIM3_CH4 is PB1 (PIN 24)
	// CH1 and CH2 are used to drive left motor
	// CH3 and CH4 are used to drive right motor

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;							// enable TIM3 clock
 8000d88:	4b45      	ldr	r3, [pc, #276]	@ (8000ea0 <pwm_config+0x11c>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a44      	ldr	r2, [pc, #272]	@ (8000ea0 <pwm_config+0x11c>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;	// enable GPIOA and B clock
 8000d94:	4b42      	ldr	r3, [pc, #264]	@ (8000ea0 <pwm_config+0x11c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	4a41      	ldr	r2, [pc, #260]	@ (8000ea0 <pwm_config+0x11c>)
 8000d9a:	f043 0303 	orr.w	r3, r3, #3
 8000d9e:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode for PB0 and PB1
	GPIOB->MODER |= GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 8000da0:	4b40      	ldr	r3, [pc, #256]	@ (8000ea4 <pwm_config+0x120>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ea4 <pwm_config+0x120>)
 8000da6:	f043 030a 	orr.w	r3, r3, #10
 8000daa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 8000dac:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <pwm_config+0x120>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea4 <pwm_config+0x120>)
 8000db2:	f023 0305 	bic.w	r3, r3, #5
 8000db6:	6013      	str	r3, [r2, #0]
	// select alternate function mode for PA6 and PA7
	GPIOA->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 8000db8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea8 <pwm_config+0x124>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ea8 <pwm_config+0x124>)
 8000dbe:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000dc2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
 8000dc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <pwm_config+0x124>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a37      	ldr	r2, [pc, #220]	@ (8000ea8 <pwm_config+0x124>)
 8000dca:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8000dce:	6013      	str	r3, [r2, #0]

	// select alternate function mode 2 for PB0 and PB1
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 8000dd0:	4b34      	ldr	r3, [pc, #208]	@ (8000ea4 <pwm_config+0x120>)
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	4a33      	ldr	r2, [pc, #204]	@ (8000ea4 <pwm_config+0x120>)
 8000dd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000dda:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL1_1;
 8000ddc:	4b31      	ldr	r3, [pc, #196]	@ (8000ea4 <pwm_config+0x120>)
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	4a30      	ldr	r2, [pc, #192]	@ (8000ea4 <pwm_config+0x120>)
 8000de2:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000de6:	6213      	str	r3, [r2, #32]
	// select alternate function mode 2 for PA6 and PA7
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL6 | GPIO_AFRL_AFRL7);
 8000de8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <pwm_config+0x124>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea8 <pwm_config+0x124>)
 8000dee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000df2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL7_1;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea8 <pwm_config+0x124>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea8 <pwm_config+0x124>)
 8000dfa:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000dfe:	6213      	str	r3, [r2, #32]

	TIM3->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 8000e00:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <pwm_config+0x128>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
	TIM3->PSC = 0;		// /1 prescaler
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <pwm_config+0x128>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;		// configure TIM3_CH1 (PA6) to PWM mode
 8000e0c:	4b27      	ldr	r3, [pc, #156]	@ (8000eac <pwm_config+0x128>)
 8000e0e:	2260      	movs	r2, #96	@ 0x60
 8000e10:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;		// configure TIM3_CH2 (PA7) to PWM mode
 8000e12:	4b26      	ldr	r3, [pc, #152]	@ (8000eac <pwm_config+0x128>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a25      	ldr	r2, [pc, #148]	@ (8000eac <pwm_config+0x128>)
 8000e18:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000e1c:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE;		// output compare 1 and 2 preload enable
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <pwm_config+0x128>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <pwm_config+0x128>)
 8000e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6193      	str	r3, [r2, #24]

	TIM3->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;		// configure TIM3_CH3 (PB0) to PWM mode
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <pwm_config+0x128>)
 8000e30:	2260      	movs	r2, #96	@ 0x60
 8000e32:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;		// configure TIM3_CH4 (PB1) to PWM mode
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <pwm_config+0x128>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <pwm_config+0x128>)
 8000e3a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000e3e:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;		// preload register enable
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <pwm_config+0x128>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <pwm_config+0x128>)
 8000e46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	61d3      	str	r3, [r2, #28]

	TIM3->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;		// active high, output channels enabled
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <pwm_config+0x128>)
 8000e52:	f241 1211 	movw	r2, #4369	@ 0x1111
 8000e56:	621a      	str	r2, [r3, #32]


	TIM3->ARR = 1680;		// output frequency 50kHz
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <pwm_config+0x128>)
 8000e5a:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR1 = 0;			// pwm duty cycle of 0
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <pwm_config+0x128>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <pwm_config+0x128>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = 0;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <pwm_config+0x128>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <pwm_config+0x128>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM3->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <pwm_config+0x128>)
 8000e7a:	2280      	movs	r2, #128	@ 0x80
 8000e7c:	601a      	str	r2, [r3, #0]

	TIM3->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <pwm_config+0x128>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]

	TIM3->CNT = 0;				// reset counter
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <pwm_config+0x128>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CR1 |= TIM_CR1_CEN;	// enable counter
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <pwm_config+0x128>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <pwm_config+0x128>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40000400 	.word	0x40000400

08000eb0 <motors_config>:


void motors_config() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

	pwm_config();
 8000eb4:	f7ff ff66 	bl	8000d84 <pwm_config>

	// DRV8833 sleep is pin D2 (PA10)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <motors_config+0x34>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <motors_config+0x34>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30

	// configure D2 output
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <motors_config+0x38>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <motors_config+0x38>)
 8000eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ece:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER10_1;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <motors_config+0x38>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <motors_config+0x38>)
 8000ed6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000eda:	6013      	str	r3, [r2, #0]

	motors_en();
 8000edc:	f000 f854 	bl	8000f88 <motors_en>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <motors_set_speed>:

void motors_set_speed(uint8_t motor, uint8_t dir, uint16_t pwm) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	71bb      	strb	r3, [r7, #6]
 8000efa:	4613      	mov	r3, r2
 8000efc:	80bb      	strh	r3, [r7, #4]

	// to set forward PWM on DRV8833, IN1 = PWM, IN2 = 1
	// to set backward PWM, IN1 = 1, IN2 = PWM
	// these are for slow decay mode, enabling responsive motors

	if (motor == MOTOR_LEFT) {
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11b      	bne.n	8000f3c <motors_set_speed+0x50>

		if (dir == MOTOR_FWD) {
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10a      	bne.n	8000f20 <motors_set_speed+0x34>

			TIM3->CCR1 = TIM3->ARR - pwm;			// inverse of pwm for slow decay
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <motors_set_speed+0x98>)
 8000f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <motors_set_speed+0x98>)
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	634b      	str	r3, [r1, #52]	@ 0x34
			TIM3->CCR2 = TIM3->ARR;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <motors_set_speed+0x98>)
 8000f18:	4a1a      	ldr	r2, [pc, #104]	@ (8000f84 <motors_set_speed+0x98>)
 8000f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1c:	6393      	str	r3, [r2, #56]	@ 0x38

			TIM3->CCR4 = TIM3->ARR;
			TIM3->CCR3 = TIM3->ARR - pwm;
		}
	}
}
 8000f1e:	e02b      	b.n	8000f78 <motors_set_speed+0x8c>
		else if (dir == MOTOR_BACKWD){
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d128      	bne.n	8000f78 <motors_set_speed+0x8c>
			TIM3->CCR1 = TIM3->ARR;
 8000f26:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <motors_set_speed+0x98>)
 8000f28:	4a16      	ldr	r2, [pc, #88]	@ (8000f84 <motors_set_speed+0x98>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f2c:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM3->CCR2 = TIM3->ARR - pwm;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <motors_set_speed+0x98>)
 8000f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f32:	88bb      	ldrh	r3, [r7, #4]
 8000f34:	4913      	ldr	r1, [pc, #76]	@ (8000f84 <motors_set_speed+0x98>)
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8000f3a:	e01d      	b.n	8000f78 <motors_set_speed+0x8c>
	else if (motor == MOTOR_RIGHT) {
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d11a      	bne.n	8000f78 <motors_set_speed+0x8c>
		if (dir == MOTOR_FWD) {
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10a      	bne.n	8000f5e <motors_set_speed+0x72>
			TIM3->CCR4 = TIM3->ARR - pwm;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <motors_set_speed+0x98>)
 8000f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	490d      	ldr	r1, [pc, #52]	@ (8000f84 <motors_set_speed+0x98>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	640b      	str	r3, [r1, #64]	@ 0x40
			TIM3->CCR3 = TIM3->ARR;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <motors_set_speed+0x98>)
 8000f56:	4a0b      	ldr	r2, [pc, #44]	@ (8000f84 <motors_set_speed+0x98>)
 8000f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f5c:	e00c      	b.n	8000f78 <motors_set_speed+0x8c>
		else if (dir == MOTOR_BACKWD) {
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d109      	bne.n	8000f78 <motors_set_speed+0x8c>
			TIM3->CCR4 = TIM3->ARR;
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <motors_set_speed+0x98>)
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <motors_set_speed+0x98>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6a:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM3->CCR3 = TIM3->ARR - pwm;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <motors_set_speed+0x98>)
 8000f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	4904      	ldr	r1, [pc, #16]	@ (8000f84 <motors_set_speed+0x98>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40000400 	.word	0x40000400

08000f88 <motors_en>:


void motors_en() {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

	// turn on PA10 to disable sleep DRV8833
	GPIOA->ODR |= GPIO_ODR_OD10;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <motors_en+0x1c>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <motors_en+0x1c>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6153      	str	r3, [r2, #20]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <encoder_config>:
	// turn off PA10 to sleep DRV8833
	GPIOA->ODR &= ~GPIO_ODR_OD10;
}


void encoder_config() {
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;		// enable TIM2 clock
 8000fac:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <encoder_config+0x8c>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	4a20      	ldr	r2, [pc, #128]	@ (8001034 <encoder_config+0x8c>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <encoder_config+0x8c>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001034 <encoder_config+0x8c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6313      	str	r3, [r2, #48]	@ 0x30

	// alternate function mode on PA0 and PA1
	GPIOA->MODER |= GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <encoder_config+0x90>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001038 <encoder_config+0x90>)
 8000fca:	f043 030a 	orr.w	r3, r3, #10
 8000fce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0);
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <encoder_config+0x90>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <encoder_config+0x90>)
 8000fd6:	f023 0305 	bic.w	r3, r3, #5
 8000fda:	6013      	str	r3, [r2, #0]

	// select AF1 for PA0 and PA1 (TIM2_CH1 and TIM2_CH2)
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <encoder_config+0x90>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <encoder_config+0x90>)
 8000fe2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fe6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0 | GPIO_AFRL_AFRL1_0;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <encoder_config+0x90>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <encoder_config+0x90>)
 8000fee:	f043 0311 	orr.w	r3, r3, #17
 8000ff2:	6213      	str	r3, [r2, #32]

	// encoder mode 3 - counts up/down on both TI1FP1 and TI2FP2 edges depending on other input level
	TIM2->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8000ff4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	609a      	str	r2, [r3, #8]

	// CC1 and CC2 channels are inputs - IC1 mapped to T1, IC2 mapped to T2
	TIM2->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_CC1S_0;
 8000ffc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001000:	f240 1201 	movw	r2, #257	@ 0x101
 8001004:	619a      	str	r2, [r3, #24]
	TIM2->CCER = 0;			// non inverted inputs
 8001006:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]

	TIM2->ARR = 0xffffffff;		// set ARR to be max of 32-bit counter
 800100e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001012:	f04f 32ff 	mov.w	r2, #4294967295
 8001016:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CR1 |= TIM_CR1_CEN;		// enable counter
 8001018:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <refresh_tim_config>:


void refresh_tim_config() {
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		// enable TIM5 clock
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <refresh_tim_config+0x44>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <refresh_tim_config+0x44>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 0;				// /1 prescaler
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <refresh_tim_config+0x48>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 840000;			// 84MHz clock on APB1 for TIM5, generates a timer overflow at 100Hz
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <refresh_tim_config+0x48>)
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <refresh_tim_config+0x4c>)
 8001056:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->CNT = 0;				// reset counter
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <refresh_tim_config+0x48>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;	// update registers
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <refresh_tim_config+0x48>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <refresh_tim_config+0x48>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;	// enable counter
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <refresh_tim_config+0x48>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <refresh_tim_config+0x48>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40023800 	.word	0x40023800
 8001084:	40000c00 	.word	0x40000c00
 8001088:	000cd140 	.word	0x000cd140

0800108c <imu_config>:


uint8_t imu_config() {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

	i2c1_config();
 8001092:	f000 fa05 	bl	80014a0 <i2c1_config>

	while (!imu_test());		// read chip id
 8001096:	bf00      	nop
 8001098:	f000 f854 	bl	8001144 <imu_test>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0fa      	beq.n	8001098 <imu_config+0xc>

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_reg = 0x3d;
 80010a2:	233d      	movs	r3, #61	@ 0x3d
 80010a4:	73fb      	strb	r3, [r7, #15]
	const uint8_t opr_mode_config = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_config);
 80010aa:	7bba      	ldrb	r2, [r7, #14]
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	4619      	mov	r1, r3
 80010b0:	2050      	movs	r0, #80	@ 0x50
 80010b2:	f000 fa57 	bl	8001564 <i2c1_writebyte>

	// delay >19 ms
	for (volatile int i = 0; i < 2000000; i++);
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	e002      	b.n	80010c2 <imu_config+0x36>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <imu_config+0xb4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	ddf8      	ble.n	80010bc <imu_config+0x30>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 80010ca:	233b      	movs	r3, #59	@ 0x3b
 80010cc:	737b      	strb	r3, [r7, #13]
	i2c1_writebyte(IMU_ADDR, unit_sel_reg, 0x80);
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	2280      	movs	r2, #128	@ 0x80
 80010d2:	4619      	mov	r1, r3
 80010d4:	2050      	movs	r0, #80	@ 0x50
 80010d6:	f000 fa45 	bl	8001564 <i2c1_writebyte>

	// for current setup, placement P3 is used (from BNO055 datasheet)
	// thus, AXIS_REMAP = 0x21 and AXIS_SIGN = 0x02
	const uint8_t axis_map_config_reg = 0x41;
 80010da:	2341      	movs	r3, #65	@ 0x41
 80010dc:	733b      	strb	r3, [r7, #12]
	const uint8_t axis_map_sign_reg = 0x42;
 80010de:	2342      	movs	r3, #66	@ 0x42
 80010e0:	72fb      	strb	r3, [r7, #11]
	i2c1_writebyte(IMU_ADDR, axis_map_config_reg, 0x21);
 80010e2:	7b3b      	ldrb	r3, [r7, #12]
 80010e4:	2221      	movs	r2, #33	@ 0x21
 80010e6:	4619      	mov	r1, r3
 80010e8:	2050      	movs	r0, #80	@ 0x50
 80010ea:	f000 fa3b 	bl	8001564 <i2c1_writebyte>
	i2c1_writebyte(IMU_ADDR, axis_map_sign_reg, 0x02);
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	2202      	movs	r2, #2
 80010f2:	4619      	mov	r1, r3
 80010f4:	2050      	movs	r0, #80	@ 0x50
 80010f6:	f000 fa35 	bl	8001564 <i2c1_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_fusion = 0x08;
 80010fa:	2308      	movs	r3, #8
 80010fc:	72bb      	strb	r3, [r7, #10]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_fusion);
 80010fe:	7aba      	ldrb	r2, [r7, #10]
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	4619      	mov	r1, r3
 8001104:	2050      	movs	r0, #80	@ 0x50
 8001106:	f000 fa2d 	bl	8001564 <i2c1_writebyte>

	// delay >7 ms
	for (volatile int i = 0; i < 2000000; i++);
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	e002      	b.n	8001116 <imu_config+0x8a>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <imu_config+0xb4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	ddf8      	ble.n	8001110 <imu_config+0x84>

	// check POST register ST_RESULT
	// returns 1 if all sensors are working
	return ((i2c1_readbyte(IMU_ADDR, IMU_ST_RESULT_REG) & 0x0f) == 0x0f) ? 1 : 0;
 800111e:	2136      	movs	r1, #54	@ 0x36
 8001120:	2050      	movs	r0, #80	@ 0x50
 8001122:	f000 fa61 	bl	80015e8 <i2c1_readbyte>
 8001126:	4603      	mov	r3, r0
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	2b0f      	cmp	r3, #15
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	001e847f 	.word	0x001e847f

08001144 <imu_test>:


uint8_t imu_test() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

	// returns 1 if correct chip id is read
	return (i2c1_readbyte(IMU_ADDR, IMU_WHO_AM_I_REG) == 0xa0) ? 1 : 0;
 8001148:	2100      	movs	r1, #0
 800114a:	2050      	movs	r0, #80	@ 0x50
 800114c:	f000 fa4c 	bl	80015e8 <i2c1_readbyte>
 8001150:	4603      	mov	r3, r0
 8001152:	2ba0      	cmp	r3, #160	@ 0xa0
 8001154:	bf0c      	ite	eq
 8001156:	2301      	moveq	r3, #1
 8001158:	2300      	movne	r3, #0
 800115a:	b2db      	uxtb	r3, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}

08001160 <imu_read_euler>:


void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]

	uint8_t raw_euler[6];			// 6 bytes total for euler angles
	const uint8_t start_addr = 0x1a;		// starting byte is heading LSB
 800116c:	231a      	movs	r3, #26
 800116e:	75fb      	strb	r3, [r7, #23]
	i2c1_readburst(IMU_ADDR, start_addr, 6, raw_euler);		// read 6 consecutive bytes
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	7df9      	ldrb	r1, [r7, #23]
 8001176:	2206      	movs	r2, #6
 8001178:	2050      	movs	r0, #80	@ 0x50
 800117a:	f000 fa89 	bl	8001690 <i2c1_readburst>
	*heading_raw = raw_euler[0] | (raw_euler[1] << 8);
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21a      	sxth	r2, r3
 8001182:	7c7b      	ldrb	r3, [r7, #17]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	801a      	strh	r2, [r3, #0]
	*roll_raw = raw_euler[2] | (raw_euler[3] << 8);
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21a      	sxth	r2, r3
 8001194:	7cfb      	ldrb	r3, [r7, #19]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21a      	sxth	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	801a      	strh	r2, [r3, #0]
	*pitch_raw = raw_euler[4] | (raw_euler[5] << 8);
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7d7b      	ldrb	r3, [r7, #21]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	801a      	strh	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <convert_euler>:


void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	4603      	mov	r3, r0
 80011c6:	81fb      	strh	r3, [r7, #14]
 80011c8:	460b      	mov	r3, r1
 80011ca:	81bb      	strh	r3, [r7, #12]
 80011cc:	4613      	mov	r3, r2
 80011ce:	817b      	strh	r3, [r7, #10]

	*roll = roll_raw / 16.0;		// 1 degree = 16 LSB
 80011d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f94f 	bl	8000478 <__aeabi_i2d>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <convert_euler+0x90>)
 80011e0:	f7ff fade 	bl	80007a0 <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fbc0 	bl	8000970 <__aeabi_d2f>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
	*pitch = pitch_raw / 16.0;
 80011f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f93c 	bl	8000478 <__aeabi_i2d>
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <convert_euler+0x90>)
 8001206:	f7ff facb 	bl	80007a0 <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fbad 	bl	8000970 <__aeabi_d2f>
 8001216:	4602      	mov	r2, r0
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]
	*heading = heading_raw / 16.0;
 800121c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f929 	bl	8000478 <__aeabi_i2d>
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <convert_euler+0x90>)
 800122c:	f7ff fab8 	bl	80007a0 <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fb9a 	bl	8000970 <__aeabi_d2f>
 800123c:	4602      	mov	r2, r0
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40300000 	.word	0x40300000

08001250 <imu_calibrate>:


float imu_calibrate() {
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b08b      	sub	sp, #44	@ 0x2c
 8001254:	af02      	add	r7, sp, #8

	float err = 0;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]

	int16_t roll_raw, pitch_raw, heading_raw;
	float roll, pitch, heading;

	// average 100 readings to get error
	for (int i = 0; i < 100; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	e030      	b.n	80012c4 <imu_calibrate+0x74>

		TIM5->SR &= ~TIM_SR_UIF;				// clear update interrupt flag
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <imu_calibrate+0x94>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4a1f      	ldr	r2, [pc, #124]	@ (80012e4 <imu_calibrate+0x94>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6113      	str	r3, [r2, #16]
		while (!(TIM5->SR & (TIM_SR_UIF)));		// wait for next fusion data
 800126e:	bf00      	nop
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <imu_calibrate+0x94>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f9      	beq.n	8001270 <imu_calibrate+0x20>
		imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 800127c:	f107 0212 	add.w	r2, r7, #18
 8001280:	f107 0114 	add.w	r1, r7, #20
 8001284:	f107 0316 	add.w	r3, r7, #22
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff69 	bl	8001160 <imu_read_euler>
		convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 800128e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001292:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001296:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800129a:	f107 040c 	add.w	r4, r7, #12
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4623      	mov	r3, r4
 80012aa:	f7ff ff87 	bl	80011bc <convert_euler>
		err += pitch;
 80012ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < 100; i++) {
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b63      	cmp	r3, #99	@ 0x63
 80012c8:	ddcb      	ble.n	8001262 <imu_calibrate+0x12>
	}

	return err / 100.0;
 80012ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80012e8 <imu_calibrate+0x98>
 80012d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	3724      	adds	r7, #36	@ 0x24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	40000c00 	.word	0x40000c00
 80012e8:	42c80000 	.word	0x42c80000

080012ec <constrain>:


float constrain(float var, float min, float max) {
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80012f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012fa:	ed87 1a01 	vstr	s2, [r7, #4]

	// returns value in range [min, max]
	if (var > max)
 80012fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001302:	edd7 7a01 	vldr	s15, [r7, #4]
 8001306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd01      	ble.n	8001314 <constrain+0x28>
		return max;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	e00b      	b.n	800132c <constrain+0x40>
	else if (var < min)
 8001314:	ed97 7a03 	vldr	s14, [r7, #12]
 8001318:	edd7 7a02 	vldr	s15, [r7, #8]
 800131c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d501      	bpl.n	800132a <constrain+0x3e>
		return min;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	e000      	b.n	800132c <constrain+0x40>
	else
		return var;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <map>:


uint32_t map(float in, float in_min, float in_max, float out_min, float out_max) {
 800133e:	b480      	push	{r7}
 8001340:	b087      	sub	sp, #28
 8001342:	af00      	add	r7, sp, #0
 8001344:	ed87 0a05 	vstr	s0, [r7, #20]
 8001348:	edc7 0a04 	vstr	s1, [r7, #16]
 800134c:	ed87 1a03 	vstr	s2, [r7, #12]
 8001350:	edc7 1a02 	vstr	s3, [r7, #8]
 8001354:	ed87 2a01 	vstr	s4, [r7, #4]

	// map function: output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
	return (uint32_t) (out_min + ((out_max - out_min) / (in_max - in_min)) * (in - in_min));
 8001358:	ed97 7a01 	vldr	s14, [r7, #4]
 800135c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001360:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001364:	ed97 7a03 	vldr	s14, [r7, #12]
 8001368:	edd7 7a04 	vldr	s15, [r7, #16]
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001374:	edd7 6a05 	vldr	s13, [r7, #20]
 8001378:	edd7 7a04 	vldr	s15, [r7, #16]
 800137c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001384:	edd7 7a02 	vldr	s15, [r7, #8]
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <NMI_Handler+0x4>

080013a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 f83f 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800145c <LoopFillZerobss+0xe>
 8001428:	f7ff ffea 	bl	8001400 <SystemInit>
 800142c:	480c      	ldr	r0, [pc, #48]	@ (8001460 <LoopFillZerobss+0x12>)
 800142e:	490d      	ldr	r1, [pc, #52]	@ (8001464 <LoopFillZerobss+0x16>)
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <LoopFillZerobss+0x1a>)
 8001432:	2300      	movs	r3, #0
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:
 8001436:	58d4      	ldr	r4, [r2, r3]
 8001438:	50c4      	str	r4, [r0, r3]
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:
 800143c:	18c4      	adds	r4, r0, r3
 800143e:	428c      	cmp	r4, r1
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
 8001442:	4a0a      	ldr	r2, [pc, #40]	@ (800146c <LoopFillZerobss+0x1e>)
 8001444:	4c0a      	ldr	r4, [pc, #40]	@ (8001470 <LoopFillZerobss+0x22>)
 8001446:	2300      	movs	r3, #0
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:
 800144e:	42a2      	cmp	r2, r4
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>
 8001452:	f000 fa39 	bl	80018c8 <__libc_init_array>
 8001456:	f7ff fadb 	bl	8000a10 <main>
 800145a:	4770      	bx	lr
 800145c:	20018000 	.word	0x20018000
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004
 8001468:	08001930 	.word	0x08001930
 800146c:	20000004 	.word	0x20000004
 8001470:	20000024 	.word	0x20000024

08001474 <ADC_IRQHandler>:
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>
	...

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	20000020 	.word	0x20000020

080014a0 <i2c1_config>:
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "i2c1.h"
#include <stdint.h>

void i2c1_config() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

	// PB8 is SCL
	// PB9 is SDA
	// enable I2C clock before configuring pins
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C1 clock
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <i2c1_config+0x8c>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a20      	ldr	r2, [pc, #128]	@ (800152c <i2c1_config+0x8c>)
 80014aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 80014b0:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <i2c1_config+0x8c>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <i2c1_config+0x8c>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	6313      	str	r3, [r2, #48]	@ 0x30

	// before configuring SCL and SDA pins for AF, make sure bus is not busy by clocking out extra
	// data to slave devices
	i2c1_release();
 80014bc:	f000 f9b0 	bl	8001820 <i2c1_release>


	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <i2c1_config+0x90>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001530 <i2c1_config+0x90>)
 80014c6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80014ca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <i2c1_config+0x90>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <i2c1_config+0x90>)
 80014d2:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 80014d6:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <i2c1_config+0x90>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <i2c1_config+0x90>)
 80014de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80014e2:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// set max output speed for both
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR8;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <i2c1_config+0x90>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <i2c1_config+0x90>)
 80014ea:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80014ee:	6093      	str	r3, [r2, #8]

	// AF04 for PB8 and PB9 to select I2C1_SCL and I2C1_SDA
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <i2c1_config+0x90>)
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <i2c1_config+0x90>)
 80014f6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80014fa:	6253      	str	r3, [r2, #36]	@ 0x24
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 80014fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001534 <i2c1_config+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	i2c1_sw_rst();		// reset I2C to clear busy bit
 8001502:	f000 f819 	bl	8001538 <i2c1_sw_rst>
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <i2c1_config+0x94>)
 8001508:	222a      	movs	r2, #42	@ 0x2a
 800150a:	605a      	str	r2, [r3, #4]
	// tLOW = 2 * tHIGH
	// 300kHz = 1 / (tLOW + tHIGH) = 1 / (3 * tHIGH)
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode and set freq to 300kHz
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <i2c1_config+0x94>)
 800150e:	f248 022f 	movw	r2, #32815	@ 0x802f
 8001512:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <i2c1_config+0x94>)
 8001516:	220d      	movs	r2, #13
 8001518:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <i2c1_config+0x94>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <i2c1_config+0x94>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400
 8001534:	40005400 	.word	0x40005400

08001538 <i2c1_sw_rst>:


void i2c1_sw_rst() {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

	// reset I2C1
	I2C1->CR1 |= I2C_CR1_SWRST;
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <i2c1_sw_rst+0x28>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <i2c1_sw_rst+0x28>)
 8001542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001546:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <i2c1_sw_rst+0x28>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <i2c1_sw_rst+0x28>)
 800154e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40005400 	.word	0x40005400

08001564 <i2c1_writebyte>:


void i2c1_writebyte(uint8_t slave_addr, uint8_t reg_addr, uint8_t byte) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	460b      	mov	r3, r1
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	4613      	mov	r3, r2
 8001574:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8001576:	bf00      	nop
 8001578:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <i2c1_writebyte+0x80>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f9      	bne.n	8001578 <i2c1_writebyte+0x14>

	i2c1_start();
 8001584:	f000 f904 	bl	8001790 <i2c1_start>
	I2C1->DR = slave_addr;
 8001588:	4a16      	ldr	r2, [pc, #88]	@ (80015e4 <i2c1_writebyte+0x80>)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800158e:	bf00      	nop
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <i2c1_writebyte+0x80>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f9      	beq.n	8001590 <i2c1_writebyte+0x2c>
	(void)I2C1->SR2;						// dummy read to clear status bit
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <i2c1_writebyte+0x80>)
 800159e:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80015a0:	bf00      	nop
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <i2c1_writebyte+0x80>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f9      	beq.n	80015a2 <i2c1_writebyte+0x3e>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 80015ae:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <i2c1_writebyte+0x80>)
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80015b4:	bf00      	nop
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <i2c1_writebyte+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f9      	beq.n	80015b6 <i2c1_writebyte+0x52>
	I2C1->DR = byte;
 80015c2:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <i2c1_writebyte+0x80>)
 80015c4:	797b      	ldrb	r3, [r7, #5]
 80015c6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 80015c8:	bf00      	nop
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <i2c1_writebyte+0x80>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f9      	beq.n	80015ca <i2c1_writebyte+0x66>
	i2c1_request_stop();
 80015d6:	f000 f8f3 	bl	80017c0 <i2c1_request_stop>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40005400 	.word	0x40005400

080015e8 <i2c1_readbyte>:


uint8_t i2c1_readbyte(uint8_t slave_addr, uint8_t reg_addr) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 80015f8:	bf00      	nop
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <i2c1_readbyte+0xa4>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <i2c1_readbyte+0x12>

	i2c1_start();
 8001606:	f000 f8c3 	bl	8001790 <i2c1_start>
	I2C1->DR = slave_addr;
 800160a:	4a20      	ldr	r2, [pc, #128]	@ (800168c <i2c1_readbyte+0xa4>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001610:	bf00      	nop
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <i2c1_readbyte+0xa4>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f9      	beq.n	8001612 <i2c1_readbyte+0x2a>
	(void)I2C1->SR2;						// dummy read to clear status bit
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <i2c1_readbyte+0xa4>)
 8001620:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001622:	bf00      	nop
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <i2c1_readbyte+0xa4>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f9      	beq.n	8001624 <i2c1_readbyte+0x3c>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8001630:	4a16      	ldr	r2, [pc, #88]	@ (800168c <i2c1_readbyte+0xa4>)
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001636:	bf00      	nop
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <i2c1_readbyte+0xa4>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f9      	beq.n	8001638 <i2c1_readbyte+0x50>

	// For single byte reads, pg 482 of reference manual "Closing the communication"
	i2c1_start();
 8001644:	f000 f8a4 	bl	8001790 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <i2c1_readbyte+0xa4>)
 8001652:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001654:	bf00      	nop
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <i2c1_readbyte+0xa4>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f9      	beq.n	8001656 <i2c1_readbyte+0x6e>
	i2c1_nack();
 8001662:	f000 f8cd 	bl	8001800 <i2c1_nack>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <i2c1_readbyte+0xa4>)
 8001668:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 800166a:	f000 f8a9 	bl	80017c0 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 800166e:	bf00      	nop
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <i2c1_readbyte+0xa4>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f9      	beq.n	8001670 <i2c1_readbyte+0x88>
	return I2C1->DR;
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <i2c1_readbyte+0xa4>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	b2db      	uxtb	r3, r3
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40005400 	.word	0x40005400

08001690 <i2c1_readburst>:


void i2c1_readburst(uint8_t slave_addr, uint8_t reg_addr, uint8_t len, uint8_t * bytes) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	460b      	mov	r3, r1
 800169e:	71bb      	strb	r3, [r7, #6]
 80016a0:	4613      	mov	r3, r2
 80016a2:	717b      	strb	r3, [r7, #5]

	if (len == 0)
 80016a4:	797b      	ldrb	r3, [r7, #5]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d06b      	beq.n	8001782 <i2c1_readburst+0xf2>
		return;

	while (I2C1->SR2 & I2C_SR2_BUSY);
 80016aa:	bf00      	nop
 80016ac:	4b37      	ldr	r3, [pc, #220]	@ (800178c <i2c1_readburst+0xfc>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f9      	bne.n	80016ac <i2c1_readburst+0x1c>

	i2c1_start();
 80016b8:	f000 f86a 	bl	8001790 <i2c1_start>
	I2C1->DR = slave_addr;
 80016bc:	4a33      	ldr	r2, [pc, #204]	@ (800178c <i2c1_readburst+0xfc>)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80016c2:	bf00      	nop
 80016c4:	4b31      	ldr	r3, [pc, #196]	@ (800178c <i2c1_readburst+0xfc>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f9      	beq.n	80016c4 <i2c1_readburst+0x34>
	(void)I2C1->SR2;						// dummy read to clear status bit
 80016d0:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <i2c1_readburst+0xfc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80016d4:	bf00      	nop
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <i2c1_readburst+0xfc>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f9      	beq.n	80016d6 <i2c1_readburst+0x46>
	I2C1->DR = reg_addr;					// set first pointer on BNO055
 80016e2:	4a2a      	ldr	r2, [pc, #168]	@ (800178c <i2c1_readburst+0xfc>)
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80016e8:	bf00      	nop
 80016ea:	4b28      	ldr	r3, [pc, #160]	@ (800178c <i2c1_readburst+0xfc>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f9      	beq.n	80016ea <i2c1_readburst+0x5a>

	i2c1_start();
 80016f6:	f000 f84b 	bl	8001790 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <i2c1_readburst+0xfc>)
 8001704:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001706:	bf00      	nop
 8001708:	4b20      	ldr	r3, [pc, #128]	@ (800178c <i2c1_readburst+0xfc>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f9      	beq.n	8001708 <i2c1_readburst+0x78>

	// acknowledge next byte if burst >1 byte
	if (len != 1)
 8001714:	797b      	ldrb	r3, [r7, #5]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <i2c1_readburst+0x8e>
		(void)I2C1->SR2;
 800171a:	4b1c      	ldr	r3, [pc, #112]	@ (800178c <i2c1_readburst+0xfc>)
 800171c:	699b      	ldr	r3, [r3, #24]

	for (uint8_t i = 0; i < len - 1; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e013      	b.n	800174c <i2c1_readburst+0xbc>

		i2c1_ack();
 8001724:	f000 f85c 	bl	80017e0 <i2c1_ack>
		while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001728:	bf00      	nop
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <i2c1_readburst+0xfc>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f9      	beq.n	800172a <i2c1_readburst+0x9a>
		*bytes = I2C1->DR;					// store byte
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <i2c1_readburst+0xfc>)
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	701a      	strb	r2, [r3, #0]
		bytes++;							// move pointer
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < len - 1; i++) {
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3301      	adds	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	797b      	ldrb	r3, [r7, #5]
 8001750:	3b01      	subs	r3, #1
 8001752:	429a      	cmp	r2, r3
 8001754:	dbe6      	blt.n	8001724 <i2c1_readburst+0x94>
	}

	i2c1_nack();								// clear ACK bit just after reading second last data byte
 8001756:	f000 f853 	bl	8001800 <i2c1_nack>
	if (len == 1)
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <i2c1_readburst+0xd4>
		(void)I2C1->SR2;
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <i2c1_readburst+0xfc>)
 8001762:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 8001764:	f000 f82c 	bl	80017c0 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001768:	bf00      	nop
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <i2c1_readburst+0xfc>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f9      	beq.n	800176a <i2c1_readburst+0xda>
	*bytes = I2C1->DR;
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <i2c1_readburst+0xfc>)
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e000      	b.n	8001784 <i2c1_readburst+0xf4>
		return;
 8001782:	bf00      	nop
}
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40005400 	.word	0x40005400

08001790 <i2c1_start>:


void i2c1_start() {
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <i2c1_start+0x2c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <i2c1_start+0x2c>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179e:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));		// wait for start bit generation
 80017a0:	bf00      	nop
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <i2c1_start+0x2c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f9      	beq.n	80017a2 <i2c1_start+0x12>
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400

080017c0 <i2c1_request_stop>:

void i2c1_request_stop() {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <i2c1_request_stop+0x1c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <i2c1_request_stop+0x1c>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40005400 	.word	0x40005400

080017e0 <i2c1_ack>:

void i2c1_ack() {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_ACK;
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <i2c1_ack+0x1c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <i2c1_ack+0x1c>)
 80017ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40005400 	.word	0x40005400

08001800 <i2c1_nack>:

void i2c1_nack() {
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~I2C_CR1_ACK;
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <i2c1_nack+0x1c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <i2c1_nack+0x1c>)
 800180a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40005400 	.word	0x40005400

08001820 <i2c1_release>:


void i2c1_release() {
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0

	// set SCL and SDA lines as outputs
	GPIOB->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <i2c1_release+0xa4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a26      	ldr	r2, [pc, #152]	@ (80018c4 <i2c1_release+0xa4>)
 800182c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001830:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1);
 8001832:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <i2c1_release+0xa4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <i2c1_release+0xa4>)
 8001838:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800183c:	6013      	str	r3, [r2, #0]

	// output open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <i2c1_release+0xa4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <i2c1_release+0xa4>)
 8001844:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001848:	6053      	str	r3, [r2, #4]

	// set SDA line high, so that after slave releases the SDA and listens for ACK/NACK, it will get NACK
	GPIOB->ODR |= GPIO_ODR_ODR_9;
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <i2c1_release+0xa4>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <i2c1_release+0xa4>)
 8001850:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001854:	6153      	str	r3, [r2, #20]

	// generate 10 clock pulses on SCL line
	for (int i = 0; i < 10; i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e024      	b.n	80018a6 <i2c1_release+0x86>

		GPIOB->ODR |= GPIO_ODR_ODR_8;
 800185c:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <i2c1_release+0xa4>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	4a18      	ldr	r2, [pc, #96]	@ (80018c4 <i2c1_release+0xa4>)
 8001862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001866:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	e003      	b.n	8001876 <i2c1_release+0x56>
			__NOP();
 800186e:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	3301      	adds	r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800187c:	dbf7      	blt.n	800186e <i2c1_release+0x4e>

		GPIOB->ODR &= ~GPIO_ODR_ODR_8;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <i2c1_release+0xa4>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <i2c1_release+0xa4>)
 8001884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001888:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	e003      	b.n	8001898 <i2c1_release+0x78>
			__NOP();
 8001890:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800189e:	dbf7      	blt.n	8001890 <i2c1_release+0x70>
	for (int i = 0; i < 10; i++) {
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	ddd7      	ble.n	800185c <i2c1_release+0x3c>
	}

	// set SCL high, line should be pulled high when I2C is idle
	GPIOB->ODR |= GPIO_ODR_ODR_8;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <i2c1_release+0xa4>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <i2c1_release+0xa4>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6153      	str	r3, [r2, #20]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40020400 	.word	0x40020400

080018c8 <__libc_init_array>:
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	4d0d      	ldr	r5, [pc, #52]	@ (8001900 <__libc_init_array+0x38>)
 80018cc:	4c0d      	ldr	r4, [pc, #52]	@ (8001904 <__libc_init_array+0x3c>)
 80018ce:	1b64      	subs	r4, r4, r5
 80018d0:	10a4      	asrs	r4, r4, #2
 80018d2:	2600      	movs	r6, #0
 80018d4:	42a6      	cmp	r6, r4
 80018d6:	d109      	bne.n	80018ec <__libc_init_array+0x24>
 80018d8:	4d0b      	ldr	r5, [pc, #44]	@ (8001908 <__libc_init_array+0x40>)
 80018da:	4c0c      	ldr	r4, [pc, #48]	@ (800190c <__libc_init_array+0x44>)
 80018dc:	f000 f818 	bl	8001910 <_init>
 80018e0:	1b64      	subs	r4, r4, r5
 80018e2:	10a4      	asrs	r4, r4, #2
 80018e4:	2600      	movs	r6, #0
 80018e6:	42a6      	cmp	r6, r4
 80018e8:	d105      	bne.n	80018f6 <__libc_init_array+0x2e>
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f0:	4798      	blx	r3
 80018f2:	3601      	adds	r6, #1
 80018f4:	e7ee      	b.n	80018d4 <__libc_init_array+0xc>
 80018f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018fa:	4798      	blx	r3
 80018fc:	3601      	adds	r6, #1
 80018fe:	e7f2      	b.n	80018e6 <__libc_init_array+0x1e>
 8001900:	08001928 	.word	0x08001928
 8001904:	08001928 	.word	0x08001928
 8001908:	08001928 	.word	0x08001928
 800190c:	0800192c 	.word	0x0800192c

08001910 <_init>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr

0800191c <_fini>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr
