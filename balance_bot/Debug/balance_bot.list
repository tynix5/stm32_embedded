
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001594  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001728  08001728  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001728  08001728  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  08001728  08001728  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001728  08001728  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001728  08001728  00002728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800172c  0800172c  0000272c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001730  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001734  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001734  00003024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c81  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b5  00000000  00000000  00004cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  00005370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ec  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145bf  00000000  00000000  000057fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ba3  00000000  00000000  00019dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d41  00000000  00000000  0001c95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e69f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a10  00000000  00000000  0009e6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0009f0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001710 	.word	0x08001710

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001710 	.word	0x08001710

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	@ 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2f>:
 8000970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000974:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000978:	bf24      	itt	cs
 800097a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000982:	d90d      	bls.n	80009a0 <__aeabi_d2f+0x30>
 8000984:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000988:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800098c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000990:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000994:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000998:	bf08      	it	eq
 800099a:	f020 0001 	biceq.w	r0, r0, #1
 800099e:	4770      	bx	lr
 80009a0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a4:	d121      	bne.n	80009ea <__aeabi_d2f+0x7a>
 80009a6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009aa:	bfbc      	itt	lt
 80009ac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b0:	4770      	bxlt	lr
 80009b2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ba:	f1c2 0218 	rsb	r2, r2, #24
 80009be:	f1c2 0c20 	rsb	ip, r2, #32
 80009c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c6:	fa20 f002 	lsr.w	r0, r0, r2
 80009ca:	bf18      	it	ne
 80009cc:	f040 0001 	orrne.w	r0, r0, #1
 80009d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009dc:	ea40 000c 	orr.w	r0, r0, ip
 80009e0:	fa23 f302 	lsr.w	r3, r3, r2
 80009e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e8:	e7cc      	b.n	8000984 <__aeabi_d2f+0x14>
 80009ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ee:	d107      	bne.n	8000a00 <__aeabi_d2f+0x90>
 80009f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f4:	bf1e      	ittt	ne
 80009f6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fe:	4770      	bxne	lr
 8000a00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <main>:
void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw);
void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading);


int main(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b09b      	sub	sp, #108	@ 0x6c
 8000a14:	af02      	add	r7, sp, #8

	clock_config();
 8000a16:	f000 f911 	bl	8000c3c <clock_config>
	i2c1_config();
 8000a1a:	f000 f99d 	bl	8000d58 <i2c1_config>
	motors_config();
 8000a1e:	f000 fc21 	bl	8001264 <motors_config>

	refresh_tim_config();
 8000a22:	f000 fcc9 	bl	80013b8 <refresh_tim_config>

	// ensure IMU connected
	while (!imu_config());
 8000a26:	bf00      	nop
 8000a28:	f000 fcee 	bl	8001408 <imu_config>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0fa      	beq.n	8000a28 <main+0x18>


	// PID constants
	const float kp = 1.6;
 8000a32:	4b7c      	ldr	r3, [pc, #496]	@ (8000c24 <main+0x214>)
 8000a34:	653b      	str	r3, [r7, #80]	@ 0x50
	const float kd = 0.5;
 8000a36:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const float dt = 1 / 100.0;			// 100Hz fusion refresh rate
 8000a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8000c28 <main+0x218>)
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48

	// Critical thresholds
	const float max_err = 30;
 8000a40:	4b7a      	ldr	r3, [pc, #488]	@ (8000c2c <main+0x21c>)
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
	const float min_err = 0.3;
 8000a44:	4b7a      	ldr	r3, [pc, #488]	@ (8000c30 <main+0x220>)
 8000a46:	643b      	str	r3, [r7, #64]	@ 0x40
	const float max_pid_out = 10;
 8000a48:	4b7a      	ldr	r3, [pc, #488]	@ (8000c34 <main+0x224>)
 8000a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// motor imperfections
	const uint16_t left_max_pwm = 2047;
 8000a4c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a50:	877b      	strh	r3, [r7, #58]	@ 0x3a
	const uint16_t left_min_pwm = 750;
 8000a52:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000a56:	873b      	strh	r3, [r7, #56]	@ 0x38
	const uint16_t right_max_pwm = 2047;
 8000a58:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	const uint16_t right_min_pwm = 900;
 8000a5e:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000a62:	86bb      	strh	r3, [r7, #52]	@ 0x34

	// precompute slopes for map function
	const float left_slope = (float) (left_max_pwm - left_min_pwm) / max_pid_out;
 8000a64:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8000a66:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a72:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	const float right_slope = (float) (right_max_pwm - right_min_pwm) / max_pid_out;
 8000a7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8000a80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a8c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a94:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	const float pitch_setpoint = 0;
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float last_err = 0;
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  while (1)
  {
	  TIM5->SR &= ~TIM_SR_UIF;			// clear update interrupt flag
 8000aa4:	4b64      	ldr	r3, [pc, #400]	@ (8000c38 <main+0x228>)
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	4a63      	ldr	r2, [pc, #396]	@ (8000c38 <main+0x228>)
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	6113      	str	r3, [r2, #16]
	  while (!(TIM5->SR & (TIM_SR_UIF)));// wait for next fusion data
 8000ab0:	bf00      	nop
 8000ab2:	4b61      	ldr	r3, [pc, #388]	@ (8000c38 <main+0x228>)
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f9      	beq.n	8000ab2 <main+0xa2>

	  // read orientation
	  int16_t roll_raw, heading_raw, pitch_raw;
	  float roll, heading, pitch;
	  imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 8000abe:	f107 0214 	add.w	r2, r7, #20
 8000ac2:	f107 0112 	add.w	r1, r7, #18
 8000ac6:	f107 0316 	add.w	r3, r7, #22
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fd04 	bl	80014d8 <imu_read_euler>
	  convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 8000ad0:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000ad4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000ad8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000adc:	f107 040c 	add.w	r4, r7, #12
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	4623      	mov	r3, r4
 8000aec:	f000 fd22 	bl	8001534 <convert_euler>

	  // pitch determines angle in our case
	  float pitch_err = pitch - pitch_setpoint;
 8000af0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000af4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	  float pid_out = kp * pitch_err + kd * (pitch_err - last_err) / dt;
 8000b00:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000b04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b0c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000b10:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000b14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b18:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000b1c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000b20:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8000b24:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2c:	edc7 7a08 	vstr	s15, [r7, #32]

	  // use absolute value of controller to select pwm duty value
	  // direction of motors is determined by sign of pid_out
	  float pid_abs = fabs(pid_out);
 8000b30:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b34:	eef0 7ae7 	vabs.f32	s15, s15
 8000b38:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

	  // limit the top of the controller
	  if (pid_abs > max_pid_out)
 8000b3c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000b40:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4c:	dd01      	ble.n	8000b52 <main+0x142>
		  pid_abs = max_pid_out;
 8000b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b50:	65bb      	str	r3, [r7, #88]	@ 0x58


	  // map function: output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
	  // input: [0, 10]
	  uint32_t left_pwm = left_slope * pid_abs + left_min_pwm;
 8000b52:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000b56:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b5e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b70:	ee17 3a90 	vmov	r3, s15
 8000b74:	61fb      	str	r3, [r7, #28]
	  uint32_t right_pwm = right_slope * pid_abs + right_min_pwm;
 8000b76:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b7a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b82:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000b84:	ee07 3a90 	vmov	s15, r3
 8000b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b94:	ee17 3a90 	vmov	r3, s15
 8000b98:	61bb      	str	r3, [r7, #24]

	  uint8_t motor_dir;

	  if (pid_out > 0)				motor_dir = MOTOR_BACKWD;
 8000b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba6:	dd03      	ble.n	8000bb0 <main+0x1a0>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8000bae:	e002      	b.n	8000bb6 <main+0x1a6>
	  else							motor_dir = MOTOR_FWD;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	  enable_leftmotor();
 8000bb6:	f000 fbdf 	bl	8001378 <enable_leftmotor>
	  enable_rightmotor();
 8000bba:	f000 fbed 	bl	8001398 <enable_rightmotor>

	  // if robot passes critical angle, turn off
	  if (fabs(pitch_err) > max_err || fabs(pitch_err) < min_err) {
 8000bbe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000bc2:	eef0 7ae7 	vabs.f32	s15, s15
 8000bc6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd2:	d40a      	bmi.n	8000bea <main+0x1da>
 8000bd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8000bdc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be8:	dd0c      	ble.n	8000c04 <main+0x1f4>

		  set_pwm_leftmotor(motor_dir, 0);
 8000bea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fb71 	bl	80012d8 <set_pwm_leftmotor>
		  set_pwm_rightmotor(motor_dir, 0);
 8000bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fb93 	bl	8001328 <set_pwm_rightmotor>
 8000c02:	e74f      	b.n	8000aa4 <main+0x94>
		  continue;
	  }

	  set_pwm_leftmotor(motor_dir, left_pwm);
 8000c04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c08:	69f9      	ldr	r1, [r7, #28]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fb64 	bl	80012d8 <set_pwm_leftmotor>
	  set_pwm_rightmotor(motor_dir, right_pwm);
 8000c10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c14:	69b9      	ldr	r1, [r7, #24]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fb86 	bl	8001328 <set_pwm_rightmotor>

	  last_err = pitch_err;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  {
 8000c20:	e740      	b.n	8000aa4 <main+0x94>
 8000c22:	bf00      	nop
 8000c24:	3fcccccd 	.word	0x3fcccccd
 8000c28:	3c23d70a 	.word	0x3c23d70a
 8000c2c:	41f00000 	.word	0x41f00000
 8000c30:	3e99999a 	.word	0x3e99999a
 8000c34:	41200000 	.word	0x41200000
 8000c38:	40000c00 	.word	0x40000c00

08000c3c <clock_config>:

  }
}

void clock_config() {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000c42:	4b42      	ldr	r3, [pc, #264]	@ (8000d4c <clock_config+0x110>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a41      	ldr	r2, [pc, #260]	@ (8000d4c <clock_config+0x110>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000c4e:	bf00      	nop
 8000c50:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <clock_config+0x110>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f9      	beq.n	8000c50 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <clock_config+0x110>)
 8000c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c62:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000c64:	4b3a      	ldr	r3, [pc, #232]	@ (8000d50 <clock_config+0x114>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a39      	ldr	r2, [pc, #228]	@ (8000d50 <clock_config+0x114>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c6e:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000c70:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <clock_config+0x114>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a36      	ldr	r2, [pc, #216]	@ (8000d50 <clock_config+0x114>)
 8000c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c7a:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000c7c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000c80:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000c8a:	4a32      	ldr	r2, [pc, #200]	@ (8000d54 <clock_config+0x118>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000c9a:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000caa:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000cac:	4a27      	ldr	r2, [pc, #156]	@ (8000d4c <clock_config+0x110>)
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <clock_config+0x110>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000cbe:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cc6:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000cce:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000cda:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000ce2:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000cea:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000cf4:	4a15      	ldr	r2, [pc, #84]	@ (8000d4c <clock_config+0x110>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <clock_config+0x110>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <clock_config+0x110>)
 8000d00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d04:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000d06:	bf00      	nop
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <clock_config+0x110>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f9      	beq.n	8000d08 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <clock_config+0x110>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000d2a:	4a08      	ldr	r2, [pc, #32]	@ (8000d4c <clock_config+0x110>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000d30:	bf00      	nop
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <clock_config+0x110>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f9      	beq.n	8000d32 <clock_config+0xf6>
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <i2c1_config>:


void i2c1_config() {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

	// PB8 is SCL
	// PB9 is SDA
	// enable I2C clock before configuring pins
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C1 clock
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <i2c1_config+0x8c>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	4a20      	ldr	r2, [pc, #128]	@ (8000de4 <i2c1_config+0x8c>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d66:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <i2c1_config+0x8c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <i2c1_config+0x8c>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6313      	str	r3, [r2, #48]	@ 0x30

	// before configuring SCL and SDA pins for AF, make sure bus is not busy by clocking out extra
	// data to slave devices
	i2c1_release();
 8000d74:	f000 f9b0 	bl	80010d8 <i2c1_release>


	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <i2c1_config+0x90>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <i2c1_config+0x90>)
 8000d7e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000d82:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <i2c1_config+0x90>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a17      	ldr	r2, [pc, #92]	@ (8000de8 <i2c1_config+0x90>)
 8000d8a:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 8000d8e:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <i2c1_config+0x90>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <i2c1_config+0x90>)
 8000d96:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000d9a:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// set max output speed for both
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR8;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <i2c1_config+0x90>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <i2c1_config+0x90>)
 8000da2:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000da6:	6093      	str	r3, [r2, #8]

	// AF04 for PB8 and PB9 to select I2C1_SCL and I2C1_SDA
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <i2c1_config+0x90>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dac:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <i2c1_config+0x90>)
 8000dae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000db2:	6253      	str	r3, [r2, #36]	@ 0x24
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <i2c1_config+0x94>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
	i2c1_sw_rst();		// reset I2C to clear busy bit
 8000dba:	f000 f819 	bl	8000df0 <i2c1_sw_rst>
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <i2c1_config+0x94>)
 8000dc0:	222a      	movs	r2, #42	@ 0x2a
 8000dc2:	605a      	str	r2, [r3, #4]
	// tLOW = 2 * tHIGH
	// 300kHz = 1 / (tLOW + tHIGH) = 1 / (3 * tHIGH)
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode and set freq to 300kHz
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <i2c1_config+0x94>)
 8000dc6:	f248 022f 	movw	r2, #32815	@ 0x802f
 8000dca:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <i2c1_config+0x94>)
 8000dce:	220d      	movs	r2, #13
 8000dd0:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <i2c1_config+0x94>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <i2c1_config+0x94>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40005400 	.word	0x40005400

08000df0 <i2c1_sw_rst>:


void i2c1_sw_rst() {
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

	// reset I2C1
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <i2c1_sw_rst+0x28>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <i2c1_sw_rst+0x28>)
 8000dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dfe:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <i2c1_sw_rst+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <i2c1_sw_rst+0x28>)
 8000e06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40005400 	.word	0x40005400

08000e1c <i2c1_writebyte>:


void i2c1_writebyte(uint8_t slave_addr, uint8_t reg_addr, uint8_t byte) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	460b      	mov	r3, r1
 8000e28:	71bb      	strb	r3, [r7, #6]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8000e2e:	bf00      	nop
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f9      	bne.n	8000e30 <i2c1_writebyte+0x14>

	i2c1_start();
 8000e3c:	f000 f904 	bl	8001048 <i2c1_start>
	I2C1->DR = slave_addr;
 8000e40:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000e46:	bf00      	nop
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f9      	beq.n	8000e48 <i2c1_writebyte+0x2c>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e56:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000e58:	bf00      	nop
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f9      	beq.n	8000e5a <i2c1_writebyte+0x3e>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8000e66:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000e6c:	bf00      	nop
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f9      	beq.n	8000e6e <i2c1_writebyte+0x52>
	I2C1->DR = byte;
 8000e7a:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e7c:	797b      	ldrb	r3, [r7, #5]
 8000e7e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000e80:	bf00      	nop
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <i2c1_writebyte+0x80>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f9      	beq.n	8000e82 <i2c1_writebyte+0x66>
	i2c1_request_stop();
 8000e8e:	f000 f8f3 	bl	8001078 <i2c1_request_stop>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005400 	.word	0x40005400

08000ea0 <i2c1_readbyte>:


uint8_t i2c1_readbyte(uint8_t slave_addr, uint8_t reg_addr) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8000eb0:	bf00      	nop
 8000eb2:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d1f9      	bne.n	8000eb2 <i2c1_readbyte+0x12>

	i2c1_start();
 8000ebe:	f000 f8c3 	bl	8001048 <i2c1_start>
	I2C1->DR = slave_addr;
 8000ec2:	4a20      	ldr	r2, [pc, #128]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000ec8:	bf00      	nop
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f9      	beq.n	8000eca <i2c1_readbyte+0x2a>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000eda:	bf00      	nop
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f9      	beq.n	8000edc <i2c1_readbyte+0x3c>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8000ee8:	4a16      	ldr	r2, [pc, #88]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000eee:	bf00      	nop
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f9      	beq.n	8000ef0 <i2c1_readbyte+0x50>

	// For single byte reads, pg 482 of reference manual "Closing the communication"
	i2c1_start();
 8000efc:	f000 f8a4 	bl	8001048 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000f0a:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000f0c:	bf00      	nop
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <i2c1_readbyte+0x6e>
	i2c1_nack();
 8000f1a:	f000 f8cd 	bl	80010b8 <i2c1_nack>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000f20:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 8000f22:	f000 f8a9 	bl	8001078 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8000f26:	bf00      	nop
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f9      	beq.n	8000f28 <i2c1_readbyte+0x88>
	return I2C1->DR;
 8000f34:	4b03      	ldr	r3, [pc, #12]	@ (8000f44 <i2c1_readbyte+0xa4>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40005400 	.word	0x40005400

08000f48 <i2c1_readburst>:


void i2c1_readburst(uint8_t slave_addr, uint8_t reg_addr, uint8_t len, uint8_t * bytes) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	460b      	mov	r3, r1
 8000f56:	71bb      	strb	r3, [r7, #6]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	717b      	strb	r3, [r7, #5]

	if (len == 0)
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d06b      	beq.n	800103a <i2c1_readburst+0xf2>
		return;

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8000f62:	bf00      	nop
 8000f64:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <i2c1_readburst+0xfc>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f9      	bne.n	8000f64 <i2c1_readburst+0x1c>

	i2c1_start();
 8000f70:	f000 f86a 	bl	8001048 <i2c1_start>
	I2C1->DR = slave_addr;
 8000f74:	4a33      	ldr	r2, [pc, #204]	@ (8001044 <i2c1_readburst+0xfc>)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000f7a:	bf00      	nop
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <i2c1_readburst+0xfc>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f9      	beq.n	8000f7c <i2c1_readburst+0x34>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8000f88:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <i2c1_readburst+0xfc>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000f8c:	bf00      	nop
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <i2c1_readburst+0xfc>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <i2c1_readburst+0x46>
	I2C1->DR = reg_addr;					// set first pointer on BNO055
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001044 <i2c1_readburst+0xfc>)
 8000f9c:	79bb      	ldrb	r3, [r7, #6]
 8000f9e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000fa0:	bf00      	nop
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <i2c1_readburst+0xfc>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <i2c1_readburst+0x5a>

	i2c1_start();
 8000fae:	f000 f84b 	bl	8001048 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <i2c1_readburst+0xfc>)
 8000fbc:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000fbe:	bf00      	nop
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <i2c1_readburst+0xfc>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f9      	beq.n	8000fc0 <i2c1_readburst+0x78>

	// acknowledge next byte if burst >1 byte
	if (len != 1)
 8000fcc:	797b      	ldrb	r3, [r7, #5]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d001      	beq.n	8000fd6 <i2c1_readburst+0x8e>
		(void)I2C1->SR2;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <i2c1_readburst+0xfc>)
 8000fd4:	699b      	ldr	r3, [r3, #24]

	for (uint8_t i = 0; i < len - 1; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e013      	b.n	8001004 <i2c1_readburst+0xbc>

		i2c1_ack();
 8000fdc:	f000 f85c 	bl	8001098 <i2c1_ack>
		while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8000fe0:	bf00      	nop
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <i2c1_readburst+0xfc>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f9      	beq.n	8000fe2 <i2c1_readburst+0x9a>
		*bytes = I2C1->DR;					// store byte
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <i2c1_readburst+0xfc>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	701a      	strb	r2, [r3, #0]
		bytes++;							// move pointer
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < len - 1; i++) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	3b01      	subs	r3, #1
 800100a:	429a      	cmp	r2, r3
 800100c:	dbe6      	blt.n	8000fdc <i2c1_readburst+0x94>
	}

	i2c1_nack();								// clear ACK bit just after reading second last data byte
 800100e:	f000 f853 	bl	80010b8 <i2c1_nack>
	if (len == 1)
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <i2c1_readburst+0xd4>
		(void)I2C1->SR2;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <i2c1_readburst+0xfc>)
 800101a:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 800101c:	f000 f82c 	bl	8001078 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001020:	bf00      	nop
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <i2c1_readburst+0xfc>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <i2c1_readburst+0xda>
	*bytes = I2C1->DR;
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <i2c1_readburst+0xfc>)
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e000      	b.n	800103c <i2c1_readburst+0xf4>
		return;
 800103a:	bf00      	nop
}
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005400 	.word	0x40005400

08001048 <i2c1_start>:


void i2c1_start() {
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <i2c1_start+0x2c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <i2c1_start+0x2c>)
 8001052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001056:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));		// wait for start bit generation
 8001058:	bf00      	nop
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <i2c1_start+0x2c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f9      	beq.n	800105a <i2c1_start+0x12>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40005400 	.word	0x40005400

08001078 <i2c1_request_stop>:

void i2c1_request_stop() {
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <i2c1_request_stop+0x1c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <i2c1_request_stop+0x1c>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400

08001098 <i2c1_ack>:

void i2c1_ack() {
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_ACK;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <i2c1_ack+0x1c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <i2c1_ack+0x1c>)
 80010a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40005400 	.word	0x40005400

080010b8 <i2c1_nack>:

void i2c1_nack() {
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~I2C_CR1_ACK;
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <i2c1_nack+0x1c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <i2c1_nack+0x1c>)
 80010c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40005400 	.word	0x40005400

080010d8 <i2c1_release>:


void i2c1_release() {
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0

	// set SCL and SDA lines as outputs
	GPIOB->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 80010de:	4b27      	ldr	r3, [pc, #156]	@ (800117c <i2c1_release+0xa4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a26      	ldr	r2, [pc, #152]	@ (800117c <i2c1_release+0xa4>)
 80010e4:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80010e8:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1);
 80010ea:	4b24      	ldr	r3, [pc, #144]	@ (800117c <i2c1_release+0xa4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a23      	ldr	r2, [pc, #140]	@ (800117c <i2c1_release+0xa4>)
 80010f0:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 80010f4:	6013      	str	r3, [r2, #0]

	// output open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 80010f6:	4b21      	ldr	r3, [pc, #132]	@ (800117c <i2c1_release+0xa4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a20      	ldr	r2, [pc, #128]	@ (800117c <i2c1_release+0xa4>)
 80010fc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001100:	6053      	str	r3, [r2, #4]

	// set SDA line high, so that after slave releases the SDA and listens for ACK/NACK, it will get NACK
	GPIOB->ODR |= GPIO_ODR_ODR_9;
 8001102:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <i2c1_release+0xa4>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a1d      	ldr	r2, [pc, #116]	@ (800117c <i2c1_release+0xa4>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110c:	6153      	str	r3, [r2, #20]

	// generate 10 clock pulses on SCL line
	for (int i = 0; i < 10; i++) {
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e024      	b.n	800115e <i2c1_release+0x86>

		GPIOB->ODR |= GPIO_ODR_ODR_8;
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <i2c1_release+0xa4>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a18      	ldr	r2, [pc, #96]	@ (800117c <i2c1_release+0xa4>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	e003      	b.n	800112e <i2c1_release+0x56>
			__NOP();
 8001126:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001134:	dbf7      	blt.n	8001126 <i2c1_release+0x4e>

		GPIOB->ODR &= ~GPIO_ODR_ODR_8;
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <i2c1_release+0xa4>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <i2c1_release+0xa4>)
 800113c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001140:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	e003      	b.n	8001150 <i2c1_release+0x78>
			__NOP();
 8001148:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001156:	dbf7      	blt.n	8001148 <i2c1_release+0x70>
	for (int i = 0; i < 10; i++) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3301      	adds	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b09      	cmp	r3, #9
 8001162:	ddd7      	ble.n	8001114 <i2c1_release+0x3c>
	}

	// set SCL high, line should be pulled high when I2C is idle
	GPIOB->ODR |= GPIO_ODR_ODR_8;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <i2c1_release+0xa4>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <i2c1_release+0xa4>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6153      	str	r3, [r2, #20]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40020400 	.word	0x40020400

08001180 <pwm_config>:
	while (str[i] != '\0')
		uart1_writebyte(str[i++]);
}


void pwm_config() {
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	// PA0 is TIM2_CH1 --> A0
	// PA1 is TIM2_CH2 --> A1
	// TIM2 is a 32 bit counter
	// must set AF for pins

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// enable TIM2 clock
 8001184:	4b35      	ldr	r3, [pc, #212]	@ (800125c <pwm_config+0xdc>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a34      	ldr	r2, [pc, #208]	@ (800125c <pwm_config+0xdc>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		// enable GPIOA clock
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <pwm_config+0xdc>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	4a31      	ldr	r2, [pc, #196]	@ (800125c <pwm_config+0xdc>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <pwm_config+0xe0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001260 <pwm_config+0xe0>)
 80011a2:	f043 030a 	orr.w	r3, r3, #10
 80011a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <pwm_config+0xe0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001260 <pwm_config+0xe0>)
 80011ae:	f023 0305 	bic.w	r3, r3, #5
 80011b2:	6013      	str	r3, [r2, #0]

	// alternate function mode 1
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <pwm_config+0xe0>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <pwm_config+0xe0>)
 80011ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0 | GPIO_AFRL_AFRL1_0;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <pwm_config+0xe0>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <pwm_config+0xe0>)
 80011c6:	f043 0311 	orr.w	r3, r3, #17
 80011ca:	6213      	str	r3, [r2, #32]

	TIM2->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 80011cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 0;		// /1 prescaler
 80011d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;		// configure TIM2_CH1 (PA0) to PWM mode
 80011dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e0:	2260      	movs	r2, #96	@ 0x60
 80011e2:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;		// configure TIM2_CH2 (PA1) to PWM mode
 80011e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ee:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80011f2:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE;		// output compare 1 and 2 preload enable
 80011f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]

	TIM2->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;		// active high, output channels enabled
 8001208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800120c:	2211      	movs	r2, #17
 800120e:	621a      	str	r2, [r3, #32]


	TIM2->ARR = 1680;		// output frequency 50kHz
 8001210:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001214:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0;			// pwm duty cycle of 0
 800121a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121e:	2200      	movs	r2, #0
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8001222:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001226:	2200      	movs	r2, #0
 8001228:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 800122a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	601a      	str	r2, [r3, #0]

	TIM2->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 8001232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001236:	2201      	movs	r2, #1
 8001238:	615a      	str	r2, [r3, #20]

	TIM2->CNT = 0;				// reset counter
 800123a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;	// enable counter
 8001242:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <motors_config>:


void motors_config() {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

	pwm_config();
 8001268:	f7ff ff8a 	bl	8001180 <pwm_config>
	// left motor enable is D2
	// right motor enable is D3
	// D2 is PA10
	// D3 is PB3

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <motors_config+0x68>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <motors_config+0x68>)
 8001272:	f043 0303 	orr.w	r3, r3, #3
 8001276:	6313      	str	r3, [r2, #48]	@ 0x30
					RCC_AHB1ENR_GPIOBEN;

	// configure D2 and D3 as outputs
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <motors_config+0x6c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <motors_config+0x6c>)
 800127e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001282:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER10_1;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <motors_config+0x6c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a11      	ldr	r2, [pc, #68]	@ (80012d0 <motors_config+0x6c>)
 800128a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800128e:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= GPIO_MODER_MODER3_0;
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <motors_config+0x70>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <motors_config+0x70>)
 8001296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800129a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER3_1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <motors_config+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <motors_config+0x70>)
 80012a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012a6:	6013      	str	r3, [r2, #0]
	// right motor direction is D5
	// D4 is PB5
	// D5 is PB4

	// configure D4 and D5 as outputs
	GPIOB->MODER |= GPIO_MODER_MODER4_0 |
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <motors_config+0x70>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <motors_config+0x70>)
 80012ae:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80012b2:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODER5_0;
	GPIOB->MODER &= ~(GPIO_MODER_MODER4_1 |
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <motors_config+0x70>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a06      	ldr	r2, [pc, #24]	@ (80012d4 <motors_config+0x70>)
 80012ba:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80012be:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODER5_1);

	enable_leftmotor();
 80012c0:	f000 f85a 	bl	8001378 <enable_leftmotor>
	enable_rightmotor();
 80012c4:	f000 f868 	bl	8001398 <enable_rightmotor>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400

080012d8 <set_pwm_leftmotor>:


void set_pwm_leftmotor(uint8_t direction, uint32_t pwm) {
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_adjusted;

	if (direction == MOTOR_FWD) {
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10a      	bne.n	8001300 <set_pwm_leftmotor+0x28>

		GPIOB->ODR |= GPIO_ODR_ODR_5;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <set_pwm_leftmotor+0x4c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <set_pwm_leftmotor+0x4c>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	6153      	str	r3, [r2, #20]
		pwm_adjusted = 2048 - pwm;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e007      	b.n	8001310 <set_pwm_leftmotor+0x38>

	} else {

		GPIOB->ODR &= ~GPIO_ODR_ODR_5;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <set_pwm_leftmotor+0x4c>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <set_pwm_leftmotor+0x4c>)
 8001306:	f023 0320 	bic.w	r3, r3, #32
 800130a:	6153      	str	r3, [r2, #20]
		pwm_adjusted = pwm;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR1 = pwm_adjusted;
 8001310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40020400 	.word	0x40020400

08001328 <set_pwm_rightmotor>:


void set_pwm_rightmotor(uint8_t direction, uint32_t pwm) {
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_adjusted;


	if (direction == MOTOR_FWD) {
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10a      	bne.n	8001350 <set_pwm_rightmotor+0x28>

		GPIOB->ODR |= GPIO_ODR_ODR_4;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <set_pwm_rightmotor+0x4c>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <set_pwm_rightmotor+0x4c>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6153      	str	r3, [r2, #20]
		pwm_adjusted = 2048 - pwm;			// invert duty cycle
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e007      	b.n	8001360 <set_pwm_rightmotor+0x38>

	} else {

		GPIOB->ODR &= ~GPIO_ODR_ODR_4;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <set_pwm_rightmotor+0x4c>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <set_pwm_rightmotor+0x4c>)
 8001356:	f023 0310 	bic.w	r3, r3, #16
 800135a:	6153      	str	r3, [r2, #20]
		pwm_adjusted = pwm;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR2 = pwm_adjusted;
 8001360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40020400 	.word	0x40020400

08001378 <enable_leftmotor>:


void enable_leftmotor() {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

	// turn on D2
	GPIOA->ODR |= GPIO_ODR_OD10;
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <enable_leftmotor+0x1c>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <enable_leftmotor+0x1c>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001386:	6153      	str	r3, [r2, #20]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40020000 	.word	0x40020000

08001398 <enable_rightmotor>:
	// turn off D2
	GPIOA->ODR &= ~GPIO_ODR_OD10;
}


void enable_rightmotor() {
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

	// turn on D2
	GPIOB->ODR |= GPIO_ODR_OD3;
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <enable_rightmotor+0x1c>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <enable_rightmotor+0x1c>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6153      	str	r3, [r2, #20]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40020400 	.word	0x40020400

080013b8 <refresh_tim_config>:
	// turn off D3
	GPIOB->ODR &= ~GPIO_ODR_OD3;
}


void refresh_tim_config() {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		// enable TIM5 clock
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <refresh_tim_config+0x44>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <refresh_tim_config+0x44>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 0;				// /1 prescaler
 80013c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <refresh_tim_config+0x48>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 840000;			// 84MHz clock on APB1 for TIM5, generates a timer overflow at 100Hz
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <refresh_tim_config+0x48>)
 80013d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <refresh_tim_config+0x4c>)
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->CNT = 0;				// reset counter
 80013d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <refresh_tim_config+0x48>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;	// update registers
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <refresh_tim_config+0x48>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4a08      	ldr	r2, [pc, #32]	@ (8001400 <refresh_tim_config+0x48>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;	// enable counter
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <refresh_tim_config+0x48>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <refresh_tim_config+0x48>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6013      	str	r3, [r2, #0]
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40023800 	.word	0x40023800
 8001400:	40000c00 	.word	0x40000c00
 8001404:	000cd140 	.word	0x000cd140

08001408 <imu_config>:


uint8_t imu_config() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0


	while (!imu_test());		// read chip id
 800140e:	bf00      	nop
 8001410:	f000 f854 	bl	80014bc <imu_test>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0fa      	beq.n	8001410 <imu_config+0x8>

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_reg = 0x3d;
 800141a:	233d      	movs	r3, #61	@ 0x3d
 800141c:	73fb      	strb	r3, [r7, #15]
	const uint8_t opr_mode_config = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	73bb      	strb	r3, [r7, #14]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_config);
 8001422:	7bba      	ldrb	r2, [r7, #14]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4619      	mov	r1, r3
 8001428:	2050      	movs	r0, #80	@ 0x50
 800142a:	f7ff fcf7 	bl	8000e1c <i2c1_writebyte>

	// delay >19 ms
	for (volatile int i = 0; i < 2000000; i++);
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e002      	b.n	800143a <imu_config+0x32>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1e      	ldr	r2, [pc, #120]	@ (80014b8 <imu_config+0xb0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	ddf8      	ble.n	8001434 <imu_config+0x2c>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 8001442:	233b      	movs	r3, #59	@ 0x3b
 8001444:	737b      	strb	r3, [r7, #13]
	i2c1_writebyte(IMU_ADDR, unit_sel_reg, 0x80);
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	2280      	movs	r2, #128	@ 0x80
 800144a:	4619      	mov	r1, r3
 800144c:	2050      	movs	r0, #80	@ 0x50
 800144e:	f7ff fce5 	bl	8000e1c <i2c1_writebyte>

	// for current setup, placement P3 is used (from BNO055 datasheet)
	// thus, AXIS_REMAP = 0x21 and AXIS_SIGN = 0x02
	const uint8_t axis_map_config_reg = 0x41;
 8001452:	2341      	movs	r3, #65	@ 0x41
 8001454:	733b      	strb	r3, [r7, #12]
	const uint8_t axis_map_sign_reg = 0x42;
 8001456:	2342      	movs	r3, #66	@ 0x42
 8001458:	72fb      	strb	r3, [r7, #11]
	i2c1_writebyte(IMU_ADDR, axis_map_config_reg, 0x21);
 800145a:	7b3b      	ldrb	r3, [r7, #12]
 800145c:	2221      	movs	r2, #33	@ 0x21
 800145e:	4619      	mov	r1, r3
 8001460:	2050      	movs	r0, #80	@ 0x50
 8001462:	f7ff fcdb 	bl	8000e1c <i2c1_writebyte>
	i2c1_writebyte(IMU_ADDR, axis_map_sign_reg, 0x02);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	2202      	movs	r2, #2
 800146a:	4619      	mov	r1, r3
 800146c:	2050      	movs	r0, #80	@ 0x50
 800146e:	f7ff fcd5 	bl	8000e1c <i2c1_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_fusion = 0x08;
 8001472:	2308      	movs	r3, #8
 8001474:	72bb      	strb	r3, [r7, #10]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_fusion);
 8001476:	7aba      	ldrb	r2, [r7, #10]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	4619      	mov	r1, r3
 800147c:	2050      	movs	r0, #80	@ 0x50
 800147e:	f7ff fccd 	bl	8000e1c <i2c1_writebyte>

	// delay >7 ms
	for (volatile int i = 0; i < 2000000; i++);
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	e002      	b.n	800148e <imu_config+0x86>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <imu_config+0xb0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	ddf8      	ble.n	8001488 <imu_config+0x80>

	// check POST register ST_RESULT
	// returns 1 if all sensors are working
	return ((i2c1_readbyte(IMU_ADDR, IMU_ST_RESULT_REG) & 0x0f) == 0x0f) ? 1 : 0;
 8001496:	2136      	movs	r1, #54	@ 0x36
 8001498:	2050      	movs	r0, #80	@ 0x50
 800149a:	f7ff fd01 	bl	8000ea0 <i2c1_readbyte>
 800149e:	4603      	mov	r3, r0
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	001e847f 	.word	0x001e847f

080014bc <imu_test>:


uint8_t imu_test() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

	// returns 1 if correct chip id is read
	return (i2c1_readbyte(IMU_ADDR, IMU_WHO_AM_I_REG) == 0xa0) ? 1 : 0;
 80014c0:	2100      	movs	r1, #0
 80014c2:	2050      	movs	r0, #80	@ 0x50
 80014c4:	f7ff fcec 	bl	8000ea0 <i2c1_readbyte>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80014cc:	bf0c      	ite	eq
 80014ce:	2301      	moveq	r3, #1
 80014d0:	2300      	movne	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <imu_read_euler>:


void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]

	uint8_t raw_euler[6];			// 6 bytes total for euler angles
	const uint8_t start_addr = 0x1a;		// starting byte is heading LSB
 80014e4:	231a      	movs	r3, #26
 80014e6:	75fb      	strb	r3, [r7, #23]
	i2c1_readburst(IMU_ADDR, start_addr, 6, raw_euler);		// read 6 consecutive bytes
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	7df9      	ldrb	r1, [r7, #23]
 80014ee:	2206      	movs	r2, #6
 80014f0:	2050      	movs	r0, #80	@ 0x50
 80014f2:	f7ff fd29 	bl	8000f48 <i2c1_readburst>
	*heading_raw = raw_euler[0] | (raw_euler[1] << 8);
 80014f6:	7c3b      	ldrb	r3, [r7, #16]
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7c7b      	ldrb	r3, [r7, #17]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	801a      	strh	r2, [r3, #0]
	*roll_raw = raw_euler[2] | (raw_euler[3] << 8);
 8001508:	7cbb      	ldrb	r3, [r7, #18]
 800150a:	b21a      	sxth	r2, r3
 800150c:	7cfb      	ldrb	r3, [r7, #19]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	801a      	strh	r2, [r3, #0]
	*pitch_raw = raw_euler[4] | (raw_euler[5] << 8);
 800151a:	7d3b      	ldrb	r3, [r7, #20]
 800151c:	b21a      	sxth	r2, r3
 800151e:	7d7b      	ldrb	r3, [r7, #21]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	801a      	strh	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <convert_euler>:


void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4603      	mov	r3, r0
 800153e:	81fb      	strh	r3, [r7, #14]
 8001540:	460b      	mov	r3, r1
 8001542:	81bb      	strh	r3, [r7, #12]
 8001544:	4613      	mov	r3, r2
 8001546:	817b      	strh	r3, [r7, #10]

	*roll = roll_raw / 16.0;		// 1 degree = 16 LSB
 8001548:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff93 	bl	8000478 <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <convert_euler+0x90>)
 8001558:	f7ff f922 	bl	80007a0 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fa04 	bl	8000970 <__aeabi_d2f>
 8001568:	4602      	mov	r2, r0
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
	*pitch = pitch_raw / 16.0;
 800156e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff80 	bl	8000478 <__aeabi_i2d>
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <convert_euler+0x90>)
 800157e:	f7ff f90f 	bl	80007a0 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff f9f1 	bl	8000970 <__aeabi_d2f>
 800158e:	4602      	mov	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]
	*heading = heading_raw / 16.0;
 8001594:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ff6d 	bl	8000478 <__aeabi_i2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <convert_euler+0x90>)
 80015a4:	f7ff f8fc 	bl	80007a0 <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff f9de 	bl	8000970 <__aeabi_d2f>
 80015b4:	4602      	mov	r2, r0
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40300000 	.word	0x40300000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161e:	f000 f83f 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001650:	f7ff ffea 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
   ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800167a:	f000 f825 	bl	80016c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff f9c7 	bl	8000a10 <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	20018000 	.word	0x20018000
   ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001690:	08001730 	.word	0x08001730
  ldr r2, =_sbss
 8001694:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001698:	20000024 	.word	0x20000024

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000020 	.word	0x20000020

080016c8 <__libc_init_array>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	4d0d      	ldr	r5, [pc, #52]	@ (8001700 <__libc_init_array+0x38>)
 80016cc:	4c0d      	ldr	r4, [pc, #52]	@ (8001704 <__libc_init_array+0x3c>)
 80016ce:	1b64      	subs	r4, r4, r5
 80016d0:	10a4      	asrs	r4, r4, #2
 80016d2:	2600      	movs	r6, #0
 80016d4:	42a6      	cmp	r6, r4
 80016d6:	d109      	bne.n	80016ec <__libc_init_array+0x24>
 80016d8:	4d0b      	ldr	r5, [pc, #44]	@ (8001708 <__libc_init_array+0x40>)
 80016da:	4c0c      	ldr	r4, [pc, #48]	@ (800170c <__libc_init_array+0x44>)
 80016dc:	f000 f818 	bl	8001710 <_init>
 80016e0:	1b64      	subs	r4, r4, r5
 80016e2:	10a4      	asrs	r4, r4, #2
 80016e4:	2600      	movs	r6, #0
 80016e6:	42a6      	cmp	r6, r4
 80016e8:	d105      	bne.n	80016f6 <__libc_init_array+0x2e>
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f0:	4798      	blx	r3
 80016f2:	3601      	adds	r6, #1
 80016f4:	e7ee      	b.n	80016d4 <__libc_init_array+0xc>
 80016f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fa:	4798      	blx	r3
 80016fc:	3601      	adds	r6, #1
 80016fe:	e7f2      	b.n	80016e6 <__libc_init_array+0x1e>
 8001700:	08001728 	.word	0x08001728
 8001704:	08001728 	.word	0x08001728
 8001708:	08001728 	.word	0x08001728
 800170c:	0800172c 	.word	0x0800172c

08001710 <_init>:
 8001710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001712:	bf00      	nop
 8001714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001716:	bc08      	pop	{r3}
 8001718:	469e      	mov	lr, r3
 800171a:	4770      	bx	lr

0800171c <_fini>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr
