
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002604  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027a0  080027a0  000037a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d0  080027d0  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080027d0  080027d0  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d0  080027d0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000037d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080027d8  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000068  08002840  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08002840  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c94  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b5  00000000  00000000  00005d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000063e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ec  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145bf  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bf5  00000000  00000000  0001ae33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d8b  00000000  00000000  0001da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f7b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f1c  00000000  00000000  0009f7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a0714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002784 	.word	0x08002784

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08002784 	.word	0x08002784

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <main>:
void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw);
void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading);


int main(void)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b098      	sub	sp, #96	@ 0x60
 8000b54:	af02      	add	r7, sp, #8

	clock_config();
 8000b56:	f000 f91d 	bl	8000d94 <clock_config>
	i2c1_config();
 8000b5a:	f000 f9a9 	bl	8000eb0 <i2c1_config>
//	uart1_config(9600);
	motors_config();
 8000b5e:	f000 fc2d 	bl	80013bc <motors_config>

	tim5_config();
 8000b62:	f000 fcfd 	bl	8001560 <tim5_config>


	while (!imu_config());
 8000b66:	bf00      	nop
 8000b68:	f000 fd22 	bl	80015b0 <imu_config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0fa      	beq.n	8000b68 <main+0x18>


	const float kp = 0.98;
 8000b72:	4b82      	ldr	r3, [pc, #520]	@ (8000d7c <main+0x22c>)
 8000b74:	64bb      	str	r3, [r7, #72]	@ 0x48
	const float kd = 1.54;
 8000b76:	4b82      	ldr	r3, [pc, #520]	@ (8000d80 <main+0x230>)
 8000b78:	647b      	str	r3, [r7, #68]	@ 0x44

	const float max_error = 30;
 8000b7a:	4b82      	ldr	r3, [pc, #520]	@ (8000d84 <main+0x234>)
 8000b7c:	643b      	str	r3, [r7, #64]	@ 0x40
	const float max_controller_out = 9.5;
 8000b7e:	4b82      	ldr	r3, [pc, #520]	@ (8000d88 <main+0x238>)
 8000b80:	63fb      	str	r3, [r7, #60]	@ 0x3c


	const float pitch_setpoint = 0;
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	@ 0x38

	float last_err = 0;
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	657b      	str	r3, [r7, #84]	@ 0x54

  while (1)
  {
	  TIM5->SR &= ~TIM_SR_UIF;			// clear update interrupt flag
 8000b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d8c <main+0x23c>)
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	4a7e      	ldr	r2, [pc, #504]	@ (8000d8c <main+0x23c>)
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	6113      	str	r3, [r2, #16]

	  int16_t roll_raw, heading_raw, pitch_raw;
	  float roll, heading, pitch;
	  imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 8000b9a:	f107 0210 	add.w	r2, r7, #16
 8000b9e:	f107 010e 	add.w	r1, r7, #14
 8000ba2:	f107 0312 	add.w	r3, r7, #18
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fd6a 	bl	8001680 <imu_read_euler>
	  convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 8000bac:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8000bb0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000bb4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000bb8:	f107 0408 	add.w	r4, r7, #8
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	4623      	mov	r3, r4
 8000bc6:	f000 fd89 	bl	80016dc <convert_euler>

	  // pitch is one we care about
	  float pitch_err = pitch - pitch_setpoint;
 8000bca:	ed97 7a00 	vldr	s14, [r7]
 8000bce:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	  // if bot tips over, turn off motors and prevent integral windup
	  if (fabs(pitch_err) > max_error) {
 8000bda:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000bde:	eef0 7ae7 	vabs.f32	s15, s15
 8000be2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8000be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bee:	d504      	bpl.n	8000bfa <main+0xaa>

		  disable_leftmotor();
 8000bf0:	f000 fc86 	bl	8001500 <disable_leftmotor>
		  disable_rightmotor();
 8000bf4:	f000 fca4 	bl	8001540 <disable_rightmotor>
 8000bf8:	e7c9      	b.n	8000b8e <main+0x3e>
		  continue;
	  }
	  else {

		  enable_leftmotor();
 8000bfa:	f000 fc71 	bl	80014e0 <enable_leftmotor>
		  enable_rightmotor();
 8000bfe:	f000 fc8f 	bl	8001520 <enable_rightmotor>
	  }


	  float controller_out = kp * pitch_err + kd * (pitch_err - last_err);
 8000c02:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000c06:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c0e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8000c12:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000c16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c1a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c26:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	  // use absolute value of controller to select pwm duty value
	  // direction of motors is determined by sign of controller_out
	  float controller_abs = fabs(controller_out);
 8000c2a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c2e:	eef0 7ae7 	vabs.f32	s15, s15
 8000c32:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	  // limit the top of the controller
	  if (controller_abs > max_controller_out)
 8000c36:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000c3a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	dd01      	ble.n	8000c4c <main+0xfc>
		  controller_abs = max_controller_out;
 8000c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c4a:	653b      	str	r3, [r7, #80]	@ 0x50


	  // weight large errors more than smaller errors
	  const float power = 1.16;
 8000c4c:	4b50      	ldr	r3, [pc, #320]	@ (8000d90 <main+0x240>)
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  float sq_controller = pow(controller_abs, power);
 8000c50:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000c52:	f7ff fc25 	bl	80004a0 <__aeabi_f2d>
 8000c56:	4604      	mov	r4, r0
 8000c58:	460d      	mov	r5, r1
 8000c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c5c:	f7ff fc20 	bl	80004a0 <__aeabi_f2d>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	ec43 2b11 	vmov	d1, r2, r3
 8000c68:	ec45 4b10 	vmov	d0, r4, r5
 8000c6c:	f000 fe2a 	bl	80018c4 <pow>
 8000c70:	ec53 2b10 	vmov	r2, r3, d0
 8000c74:	4610      	mov	r0, r2
 8000c76:	4619      	mov	r1, r3
 8000c78:	f7ff ff1a 	bl	8000ab0 <__aeabi_d2f>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  const float max_in = pow(max_controller_out, power);
 8000c80:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000c82:	f7ff fc0d 	bl	80004a0 <__aeabi_f2d>
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c8c:	f7ff fc08 	bl	80004a0 <__aeabi_f2d>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	ec43 2b11 	vmov	d1, r2, r3
 8000c98:	ec45 4b10 	vmov	d0, r4, r5
 8000c9c:	f000 fe12 	bl	80018c4 <pow>
 8000ca0:	ec53 2b10 	vmov	r2, r3, d0
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f7ff ff02 	bl	8000ab0 <__aeabi_d2f>
 8000cac:	4603      	mov	r3, r0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
	  // map function: output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
	  // input: [0, 10]
	  // output: [900, 2000]
	  // motors probably won't ever need to run at full speed
	  // motors begin to spin at about 900
	  uint16_t leftmotor_max_pwm = 2000;
 8000cb0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cb4:	847b      	strh	r3, [r7, #34]	@ 0x22
	  uint16_t leftmotor_min_pwm = 750;
 8000cb6:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000cba:	843b      	strh	r3, [r7, #32]
	  uint16_t rightmotor_max_pwm = 2000;
 8000cbc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cc0:	83fb      	strh	r3, [r7, #30]
	  uint16_t rightmotor_min_pwm = 900;
 8000cc2:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000cc6:	83bb      	strh	r3, [r7, #28]
	  uint32_t left_pwm_val = (uint32_t) (leftmotor_min_pwm + ( ((float)(leftmotor_max_pwm - leftmotor_min_pwm)) / (max_in - 0)) * (sq_controller - 0));
 8000cc8:	8c3b      	ldrh	r3, [r7, #32]
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000cd4:	8c3b      	ldrh	r3, [r7, #32]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000ce0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ce4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000ce8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 3a90 	vmov	r3, s15
 8000cfc:	61bb      	str	r3, [r7, #24]
	  uint32_t right_pwm_val = (uint32_t) (rightmotor_min_pwm + ( ((float)(rightmotor_max_pwm - rightmotor_min_pwm)) / (max_in - 0)) * (sq_controller - 0));
 8000cfe:	8bbb      	ldrh	r3, [r7, #28]
 8000d00:	ee07 3a90 	vmov	s15, r3
 8000d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d08:	8bfa      	ldrh	r2, [r7, #30]
 8000d0a:	8bbb      	ldrh	r3, [r7, #28]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000d16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d1a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000d1e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2e:	ee17 3a90 	vmov	r3, s15
 8000d32:	617b      	str	r3, [r7, #20]

	  uint8_t motor_dir;

	  if (controller_out > 0)		motor_dir = MOTOR_BACKWD;
 8000d34:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d40:	dd03      	ble.n	8000d4a <main+0x1fa>
 8000d42:	2301      	movs	r3, #1
 8000d44:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d48:	e002      	b.n	8000d50 <main+0x200>
	  else							motor_dir = MOTOR_FWD;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f


	  set_pwm_leftmotor(motor_dir, left_pwm_val);
 8000d50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d54:	69b9      	ldr	r1, [r7, #24]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fb6a 	bl	8001430 <set_pwm_leftmotor>
	  set_pwm_rightmotor(motor_dir, right_pwm_val);
 8000d5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d60:	6979      	ldr	r1, [r7, #20]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fb8c 	bl	8001480 <set_pwm_rightmotor>

	  last_err = pitch_err;
 8000d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d6a:	657b      	str	r3, [r7, #84]	@ 0x54

//	  volatile int i = 0;
//	  for (; i < 100000; i++);		// wait for next fusion data
	  while (!(TIM5->SR & (TIM_SR_UIF)));		// wait for next fusion data
 8000d6c:	bf00      	nop
 8000d6e:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <main+0x23c>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <main+0x21e>
  {
 8000d7a:	e708      	b.n	8000b8e <main+0x3e>
 8000d7c:	3f7ae148 	.word	0x3f7ae148
 8000d80:	3fc51eb8 	.word	0x3fc51eb8
 8000d84:	41f00000 	.word	0x41f00000
 8000d88:	41180000 	.word	0x41180000
 8000d8c:	40000c00 	.word	0x40000c00
 8000d90:	3f947ae1 	.word	0x3f947ae1

08000d94 <clock_config>:

  }
}

void clock_config() {
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000d9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ea4 <clock_config+0x110>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a41      	ldr	r2, [pc, #260]	@ (8000ea4 <clock_config+0x110>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000da6:	bf00      	nop
 8000da8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <clock_config+0x110>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f9      	beq.n	8000da8 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000db4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <clock_config+0x110>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000dba:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea8 <clock_config+0x114>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a39      	ldr	r2, [pc, #228]	@ (8000ea8 <clock_config+0x114>)
 8000dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc6:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000dc8:	4b37      	ldr	r3, [pc, #220]	@ (8000ea8 <clock_config+0x114>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a36      	ldr	r2, [pc, #216]	@ (8000ea8 <clock_config+0x114>)
 8000dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dd2:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000dd4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000dd8:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000de2:	4a32      	ldr	r2, [pc, #200]	@ (8000eac <clock_config+0x118>)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000df2:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dfa:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e02:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000e04:	4a27      	ldr	r2, [pc, #156]	@ (8000ea4 <clock_config+0x110>)
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <clock_config+0x110>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000e16:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e1e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000e26:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e32:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000e3a:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e42:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000e4c:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <clock_config+0x110>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <clock_config+0x110>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <clock_config+0x110>)
 8000e58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e5c:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000e5e:	bf00      	nop
 8000e60:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <clock_config+0x110>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f9      	beq.n	8000e60 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <clock_config+0x110>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000e82:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <clock_config+0x110>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000e88:	bf00      	nop
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <clock_config+0x110>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d0f9      	beq.n	8000e8a <clock_config+0xf6>
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <i2c1_config>:


void i2c1_config() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

	// PB8 is SCL
	// PB9 is SDA
	// enable I2C clock before configuring pins
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C1 clock
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <i2c1_config+0x8c>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	4a20      	ldr	r2, [pc, #128]	@ (8000f3c <i2c1_config+0x8c>)
 8000eba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <i2c1_config+0x8c>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <i2c1_config+0x8c>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30

	// before configuring SCL and SDA pins for AF, make sure bus is not busy by clocking out extra
	// data to slave devices
	i2c1_release();
 8000ecc:	f000 f9b0 	bl	8001230 <i2c1_release>


	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <i2c1_config+0x90>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <i2c1_config+0x90>)
 8000ed6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000eda:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <i2c1_config+0x90>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <i2c1_config+0x90>)
 8000ee2:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 8000ee6:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <i2c1_config+0x90>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <i2c1_config+0x90>)
 8000eee:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000ef2:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// set max output speed for both
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR8;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <i2c1_config+0x90>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <i2c1_config+0x90>)
 8000efa:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000efe:	6093      	str	r3, [r2, #8]

	// AF04 for PB8 and PB9 to select I2C1_SCL and I2C1_SDA
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <i2c1_config+0x90>)
 8000f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f04:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <i2c1_config+0x90>)
 8000f06:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000f0a:	6253      	str	r3, [r2, #36]	@ 0x24
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <i2c1_config+0x94>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	i2c1_sw_rst();		// reset I2C to clear busy bit
 8000f12:	f000 f819 	bl	8000f48 <i2c1_sw_rst>
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <i2c1_config+0x94>)
 8000f18:	222a      	movs	r2, #42	@ 0x2a
 8000f1a:	605a      	str	r2, [r3, #4]
	// tLOW = 2 * tHIGH
	// 300kHz = 1 / (tLOW + tHIGH) = 1 / (3 * tHIGH)
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode and set freq to 300kHz
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <i2c1_config+0x94>)
 8000f1e:	f248 022f 	movw	r2, #32815	@ 0x802f
 8000f22:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <i2c1_config+0x94>)
 8000f26:	220d      	movs	r2, #13
 8000f28:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <i2c1_config+0x94>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <i2c1_config+0x94>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6013      	str	r3, [r2, #0]
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40005400 	.word	0x40005400

08000f48 <i2c1_sw_rst>:


void i2c1_sw_rst() {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

	// reset I2C1
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <i2c1_sw_rst+0x28>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <i2c1_sw_rst+0x28>)
 8000f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f56:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <i2c1_sw_rst+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <i2c1_sw_rst+0x28>)
 8000f5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40005400 	.word	0x40005400

08000f74 <i2c1_writebyte>:


void i2c1_writebyte(uint8_t slave_addr, uint8_t reg_addr, uint8_t byte) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	4613      	mov	r3, r2
 8000f84:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8000f86:	bf00      	nop
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f9      	bne.n	8000f88 <i2c1_writebyte+0x14>

	i2c1_start();
 8000f94:	f000 f904 	bl	80011a0 <i2c1_start>
	I2C1->DR = slave_addr;
 8000f98:	4a16      	ldr	r2, [pc, #88]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000f9e:	bf00      	nop
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f9      	beq.n	8000fa0 <i2c1_writebyte+0x2c>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fae:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000fb0:	bf00      	nop
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f9      	beq.n	8000fb2 <i2c1_writebyte+0x3e>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000fc4:	bf00      	nop
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f9      	beq.n	8000fc6 <i2c1_writebyte+0x52>
	I2C1->DR = byte;
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fd4:	797b      	ldrb	r3, [r7, #5]
 8000fd6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000fd8:	bf00      	nop
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <i2c1_writebyte+0x80>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f9      	beq.n	8000fda <i2c1_writebyte+0x66>
	i2c1_request_stop();
 8000fe6:	f000 f8f3 	bl	80011d0 <i2c1_request_stop>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40005400 	.word	0x40005400

08000ff8 <i2c1_readbyte>:


uint8_t i2c1_readbyte(uint8_t slave_addr, uint8_t reg_addr) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8001008:	bf00      	nop
 800100a:	4b24      	ldr	r3, [pc, #144]	@ (800109c <i2c1_readbyte+0xa4>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f9      	bne.n	800100a <i2c1_readbyte+0x12>

	i2c1_start();
 8001016:	f000 f8c3 	bl	80011a0 <i2c1_start>
	I2C1->DR = slave_addr;
 800101a:	4a20      	ldr	r2, [pc, #128]	@ (800109c <i2c1_readbyte+0xa4>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001020:	bf00      	nop
 8001022:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <i2c1_readbyte+0xa4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <i2c1_readbyte+0x2a>
	(void)I2C1->SR2;						// dummy read to clear status bit
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <i2c1_readbyte+0xa4>)
 8001030:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001032:	bf00      	nop
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <i2c1_readbyte+0xa4>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f9      	beq.n	8001034 <i2c1_readbyte+0x3c>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8001040:	4a16      	ldr	r2, [pc, #88]	@ (800109c <i2c1_readbyte+0xa4>)
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001046:	bf00      	nop
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <i2c1_readbyte+0xa4>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f9      	beq.n	8001048 <i2c1_readbyte+0x50>

	// For single byte reads, pg 482 of reference manual "Closing the communication"
	i2c1_start();
 8001054:	f000 f8a4 	bl	80011a0 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <i2c1_readbyte+0xa4>)
 8001062:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001064:	bf00      	nop
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <i2c1_readbyte+0xa4>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <i2c1_readbyte+0x6e>
	i2c1_nack();
 8001072:	f000 f8cd 	bl	8001210 <i2c1_nack>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <i2c1_readbyte+0xa4>)
 8001078:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 800107a:	f000 f8a9 	bl	80011d0 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 800107e:	bf00      	nop
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <i2c1_readbyte+0xa4>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <i2c1_readbyte+0x88>
	return I2C1->DR;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <i2c1_readbyte+0xa4>)
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	b2db      	uxtb	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40005400 	.word	0x40005400

080010a0 <i2c1_readburst>:


void i2c1_readburst(uint8_t slave_addr, uint8_t reg_addr, uint8_t len, uint8_t * bytes) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	460b      	mov	r3, r1
 80010ae:	71bb      	strb	r3, [r7, #6]
 80010b0:	4613      	mov	r3, r2
 80010b2:	717b      	strb	r3, [r7, #5]

	if (len == 0)
 80010b4:	797b      	ldrb	r3, [r7, #5]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d06b      	beq.n	8001192 <i2c1_readburst+0xf2>
		return;

	while (I2C1->SR2 & I2C_SR2_BUSY);
 80010ba:	bf00      	nop
 80010bc:	4b37      	ldr	r3, [pc, #220]	@ (800119c <i2c1_readburst+0xfc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f9      	bne.n	80010bc <i2c1_readburst+0x1c>

	i2c1_start();
 80010c8:	f000 f86a 	bl	80011a0 <i2c1_start>
	I2C1->DR = slave_addr;
 80010cc:	4a33      	ldr	r2, [pc, #204]	@ (800119c <i2c1_readburst+0xfc>)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80010d2:	bf00      	nop
 80010d4:	4b31      	ldr	r3, [pc, #196]	@ (800119c <i2c1_readburst+0xfc>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f9      	beq.n	80010d4 <i2c1_readburst+0x34>
	(void)I2C1->SR2;						// dummy read to clear status bit
 80010e0:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <i2c1_readburst+0xfc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80010e4:	bf00      	nop
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <i2c1_readburst+0xfc>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f9      	beq.n	80010e6 <i2c1_readburst+0x46>
	I2C1->DR = reg_addr;					// set first pointer on BNO055
 80010f2:	4a2a      	ldr	r2, [pc, #168]	@ (800119c <i2c1_readburst+0xfc>)
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80010f8:	bf00      	nop
 80010fa:	4b28      	ldr	r3, [pc, #160]	@ (800119c <i2c1_readburst+0xfc>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f9      	beq.n	80010fa <i2c1_readburst+0x5a>

	i2c1_start();
 8001106:	f000 f84b 	bl	80011a0 <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b22      	ldr	r3, [pc, #136]	@ (800119c <i2c1_readburst+0xfc>)
 8001114:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8001116:	bf00      	nop
 8001118:	4b20      	ldr	r3, [pc, #128]	@ (800119c <i2c1_readburst+0xfc>)
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f9      	beq.n	8001118 <i2c1_readburst+0x78>

	// acknowledge next byte if burst >1 byte
	if (len != 1)
 8001124:	797b      	ldrb	r3, [r7, #5]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <i2c1_readburst+0x8e>
		(void)I2C1->SR2;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <i2c1_readburst+0xfc>)
 800112c:	699b      	ldr	r3, [r3, #24]

	for (uint8_t i = 0; i < len - 1; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e013      	b.n	800115c <i2c1_readburst+0xbc>

		i2c1_ack();
 8001134:	f000 f85c 	bl	80011f0 <i2c1_ack>
		while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001138:	bf00      	nop
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <i2c1_readburst+0xfc>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f9      	beq.n	800113a <i2c1_readburst+0x9a>
		*bytes = I2C1->DR;					// store byte
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <i2c1_readburst+0xfc>)
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	701a      	strb	r2, [r3, #0]
		bytes++;							// move pointer
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < len - 1; i++) {
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	3301      	adds	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	3b01      	subs	r3, #1
 8001162:	429a      	cmp	r2, r3
 8001164:	dbe6      	blt.n	8001134 <i2c1_readburst+0x94>
	}

	i2c1_nack();								// clear ACK bit just after reading second last data byte
 8001166:	f000 f853 	bl	8001210 <i2c1_nack>
	if (len == 1)
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <i2c1_readburst+0xd4>
		(void)I2C1->SR2;
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <i2c1_readburst+0xfc>)
 8001172:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 8001174:	f000 f82c 	bl	80011d0 <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001178:	bf00      	nop
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <i2c1_readburst+0xfc>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f9      	beq.n	800117a <i2c1_readburst+0xda>
	*bytes = I2C1->DR;
 8001186:	4b05      	ldr	r3, [pc, #20]	@ (800119c <i2c1_readburst+0xfc>)
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e000      	b.n	8001194 <i2c1_readburst+0xf4>
		return;
 8001192:	bf00      	nop
}
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40005400 	.word	0x40005400

080011a0 <i2c1_start>:


void i2c1_start() {
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <i2c1_start+0x2c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <i2c1_start+0x2c>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));		// wait for start bit generation
 80011b0:	bf00      	nop
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <i2c1_start+0x2c>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f9      	beq.n	80011b2 <i2c1_start+0x12>
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40005400 	.word	0x40005400

080011d0 <i2c1_request_stop>:

void i2c1_request_stop() {
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <i2c1_request_stop+0x1c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <i2c1_request_stop+0x1c>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40005400 	.word	0x40005400

080011f0 <i2c1_ack>:

void i2c1_ack() {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_ACK;
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <i2c1_ack+0x1c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <i2c1_ack+0x1c>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40005400 	.word	0x40005400

08001210 <i2c1_nack>:

void i2c1_nack() {
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~I2C_CR1_ACK;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <i2c1_nack+0x1c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <i2c1_nack+0x1c>)
 800121a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40005400 	.word	0x40005400

08001230 <i2c1_release>:


void i2c1_release() {
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0

	// set SCL and SDA lines as outputs
	GPIOB->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 8001236:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <i2c1_release+0xa4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a26      	ldr	r2, [pc, #152]	@ (80012d4 <i2c1_release+0xa4>)
 800123c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001240:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1);
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <i2c1_release+0xa4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a23      	ldr	r2, [pc, #140]	@ (80012d4 <i2c1_release+0xa4>)
 8001248:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800124c:	6013      	str	r3, [r2, #0]

	// output open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <i2c1_release+0xa4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a20      	ldr	r2, [pc, #128]	@ (80012d4 <i2c1_release+0xa4>)
 8001254:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001258:	6053      	str	r3, [r2, #4]

	// set SDA line high, so that after slave releases the SDA and listens for ACK/NACK, it will get NACK
	GPIOB->ODR |= GPIO_ODR_ODR_9;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <i2c1_release+0xa4>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <i2c1_release+0xa4>)
 8001260:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001264:	6153      	str	r3, [r2, #20]

	// generate 10 clock pulses on SCL line
	for (int i = 0; i < 10; i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e024      	b.n	80012b6 <i2c1_release+0x86>

		GPIOB->ODR |= GPIO_ODR_ODR_8;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <i2c1_release+0xa4>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4a18      	ldr	r2, [pc, #96]	@ (80012d4 <i2c1_release+0xa4>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001276:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	e003      	b.n	8001286 <i2c1_release+0x56>
			__NOP();
 800127e:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3301      	adds	r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800128c:	dbf7      	blt.n	800127e <i2c1_release+0x4e>

		GPIOB->ODR &= ~GPIO_ODR_ODR_8;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <i2c1_release+0xa4>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <i2c1_release+0xa4>)
 8001294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001298:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e003      	b.n	80012a8 <i2c1_release+0x78>
			__NOP();
 80012a0:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3301      	adds	r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012ae:	dbf7      	blt.n	80012a0 <i2c1_release+0x70>
	for (int i = 0; i < 10; i++) {
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	ddd7      	ble.n	800126c <i2c1_release+0x3c>
	}

	// set SCL high, line should be pulled high when I2C is idle
	GPIOB->ODR |= GPIO_ODR_ODR_8;
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <i2c1_release+0xa4>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <i2c1_release+0xa4>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c6:	6153      	str	r3, [r2, #20]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40020400 	.word	0x40020400

080012d8 <tim2_config>:
	while (str[i] != '\0')
		uart1_writebyte(str[i++]);
}


void tim2_config() {
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	// PA0 is TIM2_CH1 --> A0
	// PA1 is TIM2_CH2 --> A1
	// TIM2 is a 32 bit counter
	// must set AF for pins

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// enable TIM2 clock
 80012dc:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <tim2_config+0xdc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a34      	ldr	r2, [pc, #208]	@ (80013b4 <tim2_config+0xdc>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		// enable GPIOA clock
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <tim2_config+0xdc>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <tim2_config+0xdc>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 80012f4:	4b30      	ldr	r3, [pc, #192]	@ (80013b8 <tim2_config+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a2f      	ldr	r2, [pc, #188]	@ (80013b8 <tim2_config+0xe0>)
 80012fa:	f043 030a 	orr.w	r3, r3, #10
 80012fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <tim2_config+0xe0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a2c      	ldr	r2, [pc, #176]	@ (80013b8 <tim2_config+0xe0>)
 8001306:	f023 0305 	bic.w	r3, r3, #5
 800130a:	6013      	str	r3, [r2, #0]

	// alternate function mode 1
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 800130c:	4b2a      	ldr	r3, [pc, #168]	@ (80013b8 <tim2_config+0xe0>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a29      	ldr	r2, [pc, #164]	@ (80013b8 <tim2_config+0xe0>)
 8001312:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001316:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0 | GPIO_AFRL_AFRL1_0;
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <tim2_config+0xe0>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a26      	ldr	r2, [pc, #152]	@ (80013b8 <tim2_config+0xe0>)
 800131e:	f043 0311 	orr.w	r3, r3, #17
 8001322:	6213      	str	r3, [r2, #32]

	TIM2->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 8001324:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 0;		// /1 prescaler
 800132c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;		// configure TIM2_CH1 (PA0) to PWM mode
 8001334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001338:	2260      	movs	r2, #96	@ 0x60
 800133a:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;		// configure TIM2_CH2 (PA1) to PWM mode
 800133c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001346:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800134a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE;		// output compare 1 and 2 preload enable
 800134c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001356:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]

	TIM2->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;		// active high, output channels enabled
 8001360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001364:	2211      	movs	r2, #17
 8001366:	621a      	str	r2, [r3, #32]


	TIM2->ARR = 2048;		// output frequency approx 20.5kHz
 8001368:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800136c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0;			// pwm duty cycle of 0
 8001372:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 800137a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800137e:	2200      	movs	r2, #0
 8001380:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 8001382:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	601a      	str	r2, [r3, #0]

	TIM2->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 800138a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800138e:	2201      	movs	r2, #1
 8001390:	615a      	str	r2, [r3, #20]

	TIM2->CNT = 0;				// reset counter
 8001392:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;	// enable counter
 800139a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <motors_config>:


void motors_config() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

	tim2_config();
 80013c0:	f7ff ff8a 	bl	80012d8 <tim2_config>
	// left motor enable is D2
	// right motor enable is D3
	// D2 is PA10
	// D3 is PB3

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <motors_config+0x68>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	4a16      	ldr	r2, [pc, #88]	@ (8001424 <motors_config+0x68>)
 80013ca:	f043 0303 	orr.w	r3, r3, #3
 80013ce:	6313      	str	r3, [r2, #48]	@ 0x30
					RCC_AHB1ENR_GPIOBEN;

	// configure D2 and D3 as outputs
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <motors_config+0x6c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <motors_config+0x6c>)
 80013d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER10_1;
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <motors_config+0x6c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <motors_config+0x6c>)
 80013e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80013e6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= GPIO_MODER_MODER3_0;
 80013e8:	4b10      	ldr	r3, [pc, #64]	@ (800142c <motors_config+0x70>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <motors_config+0x70>)
 80013ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER3_1;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <motors_config+0x70>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <motors_config+0x70>)
 80013fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013fe:	6013      	str	r3, [r2, #0]
	// right motor direction is D5
	// D4 is PB5
	// D5 is PB4

	// configure D4 and D5 as outputs
	GPIOB->MODER |= GPIO_MODER_MODER4_0 |
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <motors_config+0x70>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <motors_config+0x70>)
 8001406:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800140a:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODER5_0;
	GPIOB->MODER &= ~(GPIO_MODER_MODER4_1 |
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <motors_config+0x70>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a06      	ldr	r2, [pc, #24]	@ (800142c <motors_config+0x70>)
 8001412:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8001416:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODER5_1);

	enable_leftmotor();
 8001418:	f000 f862 	bl	80014e0 <enable_leftmotor>
	enable_rightmotor();
 800141c:	f000 f880 	bl	8001520 <enable_rightmotor>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400

08001430 <set_pwm_leftmotor>:


void set_pwm_leftmotor(uint8_t direction, uint32_t pwm) {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_adjusted;

	if (direction == MOTOR_FWD) {
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10a      	bne.n	8001458 <set_pwm_leftmotor+0x28>

		GPIOB->ODR |= GPIO_ODR_ODR_5;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <set_pwm_leftmotor+0x4c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a0d      	ldr	r2, [pc, #52]	@ (800147c <set_pwm_leftmotor+0x4c>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6153      	str	r3, [r2, #20]
		pwm_adjusted = 2048 - pwm;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e007      	b.n	8001468 <set_pwm_leftmotor+0x38>

	} else {

		GPIOB->ODR &= ~GPIO_ODR_ODR_5;
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <set_pwm_leftmotor+0x4c>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a07      	ldr	r2, [pc, #28]	@ (800147c <set_pwm_leftmotor+0x4c>)
 800145e:	f023 0320 	bic.w	r3, r3, #32
 8001462:	6153      	str	r3, [r2, #20]
		pwm_adjusted = pwm;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR1 = pwm_adjusted;
 8001468:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40020400 	.word	0x40020400

08001480 <set_pwm_rightmotor>:


void set_pwm_rightmotor(uint8_t direction, uint32_t pwm) {
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]


	// right motor start spinning at a higher duty cycle than left motor
	const uint32_t pwm_right_offset_fwd = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
	const uint32_t pwm_right_offset_bkwd = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]

	uint32_t pwm_adjusted;


	if (direction == MOTOR_FWD) {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <set_pwm_rightmotor+0x34>

		GPIOB->ODR |= GPIO_ODR_ODR_4;
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <set_pwm_rightmotor+0x5c>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <set_pwm_rightmotor+0x5c>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6153      	str	r3, [r2, #20]
		pwm_adjusted = 2048 - pwm - pwm_right_offset_fwd;			// invert duty cycle
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4413      	add	r3, r2
 80014ac:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e009      	b.n	80014c8 <set_pwm_rightmotor+0x48>

	} else {

		GPIOB->ODR &= ~GPIO_ODR_ODR_4;
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <set_pwm_rightmotor+0x5c>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <set_pwm_rightmotor+0x5c>)
 80014ba:	f023 0310 	bic.w	r3, r3, #16
 80014be:	6153      	str	r3, [r2, #20]
		pwm_adjusted = pwm + pwm_right_offset_bkwd;
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
	}

	TIM2->CCR2 = pwm_adjusted;
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40020400 	.word	0x40020400

080014e0 <enable_leftmotor>:


void enable_leftmotor() {
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

	// turn on D2
	GPIOA->ODR |= GPIO_ODR_OD10;
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <enable_leftmotor+0x1c>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <enable_leftmotor+0x1c>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ee:	6153      	str	r3, [r2, #20]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000

08001500 <disable_leftmotor>:


void disable_leftmotor() {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

	// turn off D2
	GPIOA->ODR &= ~GPIO_ODR_OD10;
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <disable_leftmotor+0x1c>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	4a04      	ldr	r2, [pc, #16]	@ (800151c <disable_leftmotor+0x1c>)
 800150a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800150e:	6153      	str	r3, [r2, #20]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40020000 	.word	0x40020000

08001520 <enable_rightmotor>:


void enable_rightmotor() {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

	// turn on D2
	GPIOB->ODR |= GPIO_ODR_OD3;
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <enable_rightmotor+0x1c>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <enable_rightmotor+0x1c>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6153      	str	r3, [r2, #20]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40020400 	.word	0x40020400

08001540 <disable_rightmotor>:


void disable_rightmotor() {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

	// turn off D3
	GPIOB->ODR &= ~GPIO_ODR_OD3;
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <disable_rightmotor+0x1c>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <disable_rightmotor+0x1c>)
 800154a:	f023 0308 	bic.w	r3, r3, #8
 800154e:	6153      	str	r3, [r2, #20]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40020400 	.word	0x40020400

08001560 <tim5_config>:


void tim5_config() {
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		// enable TIM5 clock
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <tim5_config+0x44>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <tim5_config+0x44>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 0;				// /1 prescaler
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <tim5_config+0x48>)
 8001572:	2200      	movs	r2, #0
 8001574:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 420000;			// 42MHz clock on APB1, generates a timer overflow at 100Hz
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <tim5_config+0x48>)
 8001578:	4a0c      	ldr	r2, [pc, #48]	@ (80015ac <tim5_config+0x4c>)
 800157a:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->CNT = 0;				// reset counter
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <tim5_config+0x48>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;	// update registers
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <tim5_config+0x48>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <tim5_config+0x48>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;	// enable counter
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <tim5_config+0x48>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <tim5_config+0x48>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6013      	str	r3, [r2, #0]
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40000c00 	.word	0x40000c00
 80015ac:	000668a0 	.word	0x000668a0

080015b0 <imu_config>:


uint8_t imu_config() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0


	while (!imu_test());		// read chip id
 80015b6:	bf00      	nop
 80015b8:	f000 f854 	bl	8001664 <imu_test>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0fa      	beq.n	80015b8 <imu_config+0x8>

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_reg = 0x3d;
 80015c2:	233d      	movs	r3, #61	@ 0x3d
 80015c4:	73fb      	strb	r3, [r7, #15]
	const uint8_t opr_mode_config = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73bb      	strb	r3, [r7, #14]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_config);
 80015ca:	7bba      	ldrb	r2, [r7, #14]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	4619      	mov	r1, r3
 80015d0:	2050      	movs	r0, #80	@ 0x50
 80015d2:	f7ff fccf 	bl	8000f74 <i2c1_writebyte>

	// delay >19 ms
	for (volatile int i = 0; i < 2000000; i++);
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	e002      	b.n	80015e2 <imu_config+0x32>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3301      	adds	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <imu_config+0xb0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	ddf8      	ble.n	80015dc <imu_config+0x2c>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 80015ea:	233b      	movs	r3, #59	@ 0x3b
 80015ec:	737b      	strb	r3, [r7, #13]
	i2c1_writebyte(IMU_ADDR, unit_sel_reg, 0x80);
 80015ee:	7b7b      	ldrb	r3, [r7, #13]
 80015f0:	2280      	movs	r2, #128	@ 0x80
 80015f2:	4619      	mov	r1, r3
 80015f4:	2050      	movs	r0, #80	@ 0x50
 80015f6:	f7ff fcbd 	bl	8000f74 <i2c1_writebyte>

	// for current setup, placement P3 is used (from BNO055 datasheet)
	// thus, AXIS_REMAP = 0x21 and AXIS_SIGN = 0x02
	const uint8_t axis_map_config_reg = 0x41;
 80015fa:	2341      	movs	r3, #65	@ 0x41
 80015fc:	733b      	strb	r3, [r7, #12]
	const uint8_t axis_map_sign_reg = 0x42;
 80015fe:	2342      	movs	r3, #66	@ 0x42
 8001600:	72fb      	strb	r3, [r7, #11]
	i2c1_writebyte(IMU_ADDR, axis_map_config_reg, 0x21);
 8001602:	7b3b      	ldrb	r3, [r7, #12]
 8001604:	2221      	movs	r2, #33	@ 0x21
 8001606:	4619      	mov	r1, r3
 8001608:	2050      	movs	r0, #80	@ 0x50
 800160a:	f7ff fcb3 	bl	8000f74 <i2c1_writebyte>
	i2c1_writebyte(IMU_ADDR, axis_map_sign_reg, 0x02);
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	2202      	movs	r2, #2
 8001612:	4619      	mov	r1, r3
 8001614:	2050      	movs	r0, #80	@ 0x50
 8001616:	f7ff fcad 	bl	8000f74 <i2c1_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_fusion = 0x08;
 800161a:	2308      	movs	r3, #8
 800161c:	72bb      	strb	r3, [r7, #10]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_fusion);
 800161e:	7aba      	ldrb	r2, [r7, #10]
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	4619      	mov	r1, r3
 8001624:	2050      	movs	r0, #80	@ 0x50
 8001626:	f7ff fca5 	bl	8000f74 <i2c1_writebyte>

	// delay >7 ms
	for (volatile int i = 0; i < 2000000; i++);
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	e002      	b.n	8001636 <imu_config+0x86>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <imu_config+0xb0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	ddf8      	ble.n	8001630 <imu_config+0x80>

	// check POST register ST_RESULT
	// returns 1 if all sensors are working
	return ((i2c1_readbyte(IMU_ADDR, IMU_ST_RESULT_REG) & 0x0f) == 0x0f) ? 1 : 0;
 800163e:	2136      	movs	r1, #54	@ 0x36
 8001640:	2050      	movs	r0, #80	@ 0x50
 8001642:	f7ff fcd9 	bl	8000ff8 <i2c1_readbyte>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	2b0f      	cmp	r3, #15
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	001e847f 	.word	0x001e847f

08001664 <imu_test>:


uint8_t imu_test() {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

	// returns 1 if correct chip id is read
	return (i2c1_readbyte(IMU_ADDR, IMU_WHO_AM_I_REG) == 0xa0) ? 1 : 0;
 8001668:	2100      	movs	r1, #0
 800166a:	2050      	movs	r0, #80	@ 0x50
 800166c:	f7ff fcc4 	bl	8000ff8 <i2c1_readbyte>
 8001670:	4603      	mov	r3, r0
 8001672:	2ba0      	cmp	r3, #160	@ 0xa0
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	bd80      	pop	{r7, pc}

08001680 <imu_read_euler>:


void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]

	uint8_t raw_euler[6];			// 6 bytes total for euler angles
	const uint8_t start_addr = 0x1a;		// starting byte is heading LSB
 800168c:	231a      	movs	r3, #26
 800168e:	75fb      	strb	r3, [r7, #23]
	i2c1_readburst(IMU_ADDR, start_addr, 6, raw_euler);		// read 6 consecutive bytes
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	7df9      	ldrb	r1, [r7, #23]
 8001696:	2206      	movs	r2, #6
 8001698:	2050      	movs	r0, #80	@ 0x50
 800169a:	f7ff fd01 	bl	80010a0 <i2c1_readburst>
	*heading_raw = raw_euler[0] | (raw_euler[1] << 8);
 800169e:	7c3b      	ldrb	r3, [r7, #16]
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	7c7b      	ldrb	r3, [r7, #17]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	801a      	strh	r2, [r3, #0]
	*roll_raw = raw_euler[2] | (raw_euler[3] << 8);
 80016b0:	7cbb      	ldrb	r3, [r7, #18]
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7cfb      	ldrb	r3, [r7, #19]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21a      	sxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	801a      	strh	r2, [r3, #0]
	*pitch_raw = raw_euler[4] | (raw_euler[5] << 8);
 80016c2:	7d3b      	ldrb	r3, [r7, #20]
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7d7b      	ldrb	r3, [r7, #21]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	801a      	strh	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <convert_euler>:


void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	4603      	mov	r3, r0
 80016e6:	81fb      	strh	r3, [r7, #14]
 80016e8:	460b      	mov	r3, r1
 80016ea:	81bb      	strh	r3, [r7, #12]
 80016ec:	4613      	mov	r3, r2
 80016ee:	817b      	strh	r3, [r7, #10]

	*roll = roll_raw / 16.0;		// 1 degree = 16 LSB
 80016f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fec1 	bl	800047c <__aeabi_i2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <convert_euler+0x90>)
 8001700:	f7ff f850 	bl	80007a4 <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff f9d0 	bl	8000ab0 <__aeabi_d2f>
 8001710:	4602      	mov	r2, r0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
	*pitch = pitch_raw / 16.0;
 8001716:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe feae 	bl	800047c <__aeabi_i2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <convert_euler+0x90>)
 8001726:	f7ff f83d 	bl	80007a4 <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff f9bd 	bl	8000ab0 <__aeabi_d2f>
 8001736:	4602      	mov	r2, r0
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]
	*heading = heading_raw / 16.0;
 800173c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe9b 	bl	800047c <__aeabi_i2d>
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <convert_euler+0x90>)
 800174c:	f7ff f82a 	bl	80007a4 <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff f9aa 	bl	8000ab0 <__aeabi_d2f>
 800175c:	4602      	mov	r2, r0
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	601a      	str	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40300000 	.word	0x40300000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <MemManage_Handler+0x4>

08001788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <UsageFault_Handler+0x4>

08001798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 f83f 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800182c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017f8:	f7ff ffea 	bl	80017d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
   ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	@ (8001834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	@ (800183c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	@ (8001840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001822:	f000 f82b 	bl	800187c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff f993 	bl	8000b50 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800182c:	20018000 	.word	0x20018000
   ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001838:	080027d8 	.word	0x080027d8
  ldr r2, =_sbss
 800183c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001840:	200001c0 	.word	0x200001c0

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000000 	.word	0x20000000
 800186c:	20000084 	.word	0x20000084

08001870 <__errno>:
 8001870:	4b01      	ldr	r3, [pc, #4]	@ (8001878 <__errno+0x8>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000004 	.word	0x20000004

0800187c <__libc_init_array>:
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	4d0d      	ldr	r5, [pc, #52]	@ (80018b4 <__libc_init_array+0x38>)
 8001880:	4c0d      	ldr	r4, [pc, #52]	@ (80018b8 <__libc_init_array+0x3c>)
 8001882:	1b64      	subs	r4, r4, r5
 8001884:	10a4      	asrs	r4, r4, #2
 8001886:	2600      	movs	r6, #0
 8001888:	42a6      	cmp	r6, r4
 800188a:	d109      	bne.n	80018a0 <__libc_init_array+0x24>
 800188c:	4d0b      	ldr	r5, [pc, #44]	@ (80018bc <__libc_init_array+0x40>)
 800188e:	4c0c      	ldr	r4, [pc, #48]	@ (80018c0 <__libc_init_array+0x44>)
 8001890:	f000 ff78 	bl	8002784 <_init>
 8001894:	1b64      	subs	r4, r4, r5
 8001896:	10a4      	asrs	r4, r4, #2
 8001898:	2600      	movs	r6, #0
 800189a:	42a6      	cmp	r6, r4
 800189c:	d105      	bne.n	80018aa <__libc_init_array+0x2e>
 800189e:	bd70      	pop	{r4, r5, r6, pc}
 80018a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a4:	4798      	blx	r3
 80018a6:	3601      	adds	r6, #1
 80018a8:	e7ee      	b.n	8001888 <__libc_init_array+0xc>
 80018aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ae:	4798      	blx	r3
 80018b0:	3601      	adds	r6, #1
 80018b2:	e7f2      	b.n	800189a <__libc_init_array+0x1e>
 80018b4:	080027d0 	.word	0x080027d0
 80018b8:	080027d0 	.word	0x080027d0
 80018bc:	080027d0 	.word	0x080027d0
 80018c0:	080027d4 	.word	0x080027d4

080018c4 <pow>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	ed2d 8b02 	vpush	{d8}
 80018ca:	eeb0 8a40 	vmov.f32	s16, s0
 80018ce:	eef0 8a60 	vmov.f32	s17, s1
 80018d2:	ec55 4b11 	vmov	r4, r5, d1
 80018d6:	f000 f873 	bl	80019c0 <__ieee754_pow>
 80018da:	4622      	mov	r2, r4
 80018dc:	462b      	mov	r3, r5
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	ec57 6b10 	vmov	r6, r7, d0
 80018e6:	f7ff f8cd 	bl	8000a84 <__aeabi_dcmpun>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d13b      	bne.n	8001966 <pow+0xa2>
 80018ee:	ec51 0b18 	vmov	r0, r1, d8
 80018f2:	2200      	movs	r2, #0
 80018f4:	2300      	movs	r3, #0
 80018f6:	f7ff f893 	bl	8000a20 <__aeabi_dcmpeq>
 80018fa:	b1b8      	cbz	r0, 800192c <pow+0x68>
 80018fc:	2200      	movs	r2, #0
 80018fe:	2300      	movs	r3, #0
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7ff f88c 	bl	8000a20 <__aeabi_dcmpeq>
 8001908:	2800      	cmp	r0, #0
 800190a:	d146      	bne.n	800199a <pow+0xd6>
 800190c:	ec45 4b10 	vmov	d0, r4, r5
 8001910:	f000 f848 	bl	80019a4 <finite>
 8001914:	b338      	cbz	r0, 8001966 <pow+0xa2>
 8001916:	2200      	movs	r2, #0
 8001918:	2300      	movs	r3, #0
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7ff f889 	bl	8000a34 <__aeabi_dcmplt>
 8001922:	b300      	cbz	r0, 8001966 <pow+0xa2>
 8001924:	f7ff ffa4 	bl	8001870 <__errno>
 8001928:	2322      	movs	r3, #34	@ 0x22
 800192a:	e01b      	b.n	8001964 <pow+0xa0>
 800192c:	ec47 6b10 	vmov	d0, r6, r7
 8001930:	f000 f838 	bl	80019a4 <finite>
 8001934:	b9e0      	cbnz	r0, 8001970 <pow+0xac>
 8001936:	eeb0 0a48 	vmov.f32	s0, s16
 800193a:	eef0 0a68 	vmov.f32	s1, s17
 800193e:	f000 f831 	bl	80019a4 <finite>
 8001942:	b1a8      	cbz	r0, 8001970 <pow+0xac>
 8001944:	ec45 4b10 	vmov	d0, r4, r5
 8001948:	f000 f82c 	bl	80019a4 <finite>
 800194c:	b180      	cbz	r0, 8001970 <pow+0xac>
 800194e:	4632      	mov	r2, r6
 8001950:	463b      	mov	r3, r7
 8001952:	4630      	mov	r0, r6
 8001954:	4639      	mov	r1, r7
 8001956:	f7ff f895 	bl	8000a84 <__aeabi_dcmpun>
 800195a:	2800      	cmp	r0, #0
 800195c:	d0e2      	beq.n	8001924 <pow+0x60>
 800195e:	f7ff ff87 	bl	8001870 <__errno>
 8001962:	2321      	movs	r3, #33	@ 0x21
 8001964:	6003      	str	r3, [r0, #0]
 8001966:	ecbd 8b02 	vpop	{d8}
 800196a:	ec47 6b10 	vmov	d0, r6, r7
 800196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001970:	2200      	movs	r2, #0
 8001972:	2300      	movs	r3, #0
 8001974:	4630      	mov	r0, r6
 8001976:	4639      	mov	r1, r7
 8001978:	f7ff f852 	bl	8000a20 <__aeabi_dcmpeq>
 800197c:	2800      	cmp	r0, #0
 800197e:	d0f2      	beq.n	8001966 <pow+0xa2>
 8001980:	eeb0 0a48 	vmov.f32	s0, s16
 8001984:	eef0 0a68 	vmov.f32	s1, s17
 8001988:	f000 f80c 	bl	80019a4 <finite>
 800198c:	2800      	cmp	r0, #0
 800198e:	d0ea      	beq.n	8001966 <pow+0xa2>
 8001990:	ec45 4b10 	vmov	d0, r4, r5
 8001994:	f000 f806 	bl	80019a4 <finite>
 8001998:	e7c3      	b.n	8001922 <pow+0x5e>
 800199a:	4f01      	ldr	r7, [pc, #4]	@ (80019a0 <pow+0xdc>)
 800199c:	2600      	movs	r6, #0
 800199e:	e7e2      	b.n	8001966 <pow+0xa2>
 80019a0:	3ff00000 	.word	0x3ff00000

080019a4 <finite>:
 80019a4:	b082      	sub	sp, #8
 80019a6:	ed8d 0b00 	vstr	d0, [sp]
 80019aa:	9801      	ldr	r0, [sp, #4]
 80019ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80019b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80019b4:	0fc0      	lsrs	r0, r0, #31
 80019b6:	b002      	add	sp, #8
 80019b8:	4770      	bx	lr
 80019ba:	0000      	movs	r0, r0
 80019bc:	0000      	movs	r0, r0
	...

080019c0 <__ieee754_pow>:
 80019c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c4:	b091      	sub	sp, #68	@ 0x44
 80019c6:	ed8d 1b00 	vstr	d1, [sp]
 80019ca:	e9dd 1900 	ldrd	r1, r9, [sp]
 80019ce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80019d2:	ea5a 0001 	orrs.w	r0, sl, r1
 80019d6:	ec57 6b10 	vmov	r6, r7, d0
 80019da:	d113      	bne.n	8001a04 <__ieee754_pow+0x44>
 80019dc:	19b3      	adds	r3, r6, r6
 80019de:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80019e2:	4152      	adcs	r2, r2
 80019e4:	4298      	cmp	r0, r3
 80019e6:	4b98      	ldr	r3, [pc, #608]	@ (8001c48 <__ieee754_pow+0x288>)
 80019e8:	4193      	sbcs	r3, r2
 80019ea:	f080 84ea 	bcs.w	80023c2 <__ieee754_pow+0xa02>
 80019ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80019f2:	4630      	mov	r0, r6
 80019f4:	4639      	mov	r1, r7
 80019f6:	f7fe fbf5 	bl	80001e4 <__adddf3>
 80019fa:	ec41 0b10 	vmov	d0, r0, r1
 80019fe:	b011      	add	sp, #68	@ 0x44
 8001a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a04:	4a91      	ldr	r2, [pc, #580]	@ (8001c4c <__ieee754_pow+0x28c>)
 8001a06:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8001a0a:	4590      	cmp	r8, r2
 8001a0c:	463d      	mov	r5, r7
 8001a0e:	4633      	mov	r3, r6
 8001a10:	d806      	bhi.n	8001a20 <__ieee754_pow+0x60>
 8001a12:	d101      	bne.n	8001a18 <__ieee754_pow+0x58>
 8001a14:	2e00      	cmp	r6, #0
 8001a16:	d1ea      	bne.n	80019ee <__ieee754_pow+0x2e>
 8001a18:	4592      	cmp	sl, r2
 8001a1a:	d801      	bhi.n	8001a20 <__ieee754_pow+0x60>
 8001a1c:	d10e      	bne.n	8001a3c <__ieee754_pow+0x7c>
 8001a1e:	b169      	cbz	r1, 8001a3c <__ieee754_pow+0x7c>
 8001a20:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8001a24:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8001a28:	431d      	orrs	r5, r3
 8001a2a:	d1e0      	bne.n	80019ee <__ieee754_pow+0x2e>
 8001a2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001a30:	18db      	adds	r3, r3, r3
 8001a32:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8001a36:	4152      	adcs	r2, r2
 8001a38:	429d      	cmp	r5, r3
 8001a3a:	e7d4      	b.n	80019e6 <__ieee754_pow+0x26>
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	46c3      	mov	fp, r8
 8001a40:	da3a      	bge.n	8001ab8 <__ieee754_pow+0xf8>
 8001a42:	4a83      	ldr	r2, [pc, #524]	@ (8001c50 <__ieee754_pow+0x290>)
 8001a44:	4592      	cmp	sl, r2
 8001a46:	d84d      	bhi.n	8001ae4 <__ieee754_pow+0x124>
 8001a48:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8001a4c:	4592      	cmp	sl, r2
 8001a4e:	f240 84c7 	bls.w	80023e0 <__ieee754_pow+0xa20>
 8001a52:	ea4f 522a 	mov.w	r2, sl, asr #20
 8001a56:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8001a5a:	2a14      	cmp	r2, #20
 8001a5c:	dd0f      	ble.n	8001a7e <__ieee754_pow+0xbe>
 8001a5e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8001a62:	fa21 f402 	lsr.w	r4, r1, r2
 8001a66:	fa04 f202 	lsl.w	r2, r4, r2
 8001a6a:	428a      	cmp	r2, r1
 8001a6c:	f040 84b8 	bne.w	80023e0 <__ieee754_pow+0xa20>
 8001a70:	f004 0401 	and.w	r4, r4, #1
 8001a74:	f1c4 0402 	rsb	r4, r4, #2
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	d158      	bne.n	8001b2e <__ieee754_pow+0x16e>
 8001a7c:	e00e      	b.n	8001a9c <__ieee754_pow+0xdc>
 8001a7e:	2900      	cmp	r1, #0
 8001a80:	d154      	bne.n	8001b2c <__ieee754_pow+0x16c>
 8001a82:	f1c2 0214 	rsb	r2, r2, #20
 8001a86:	fa4a f402 	asr.w	r4, sl, r2
 8001a8a:	fa04 f202 	lsl.w	r2, r4, r2
 8001a8e:	4552      	cmp	r2, sl
 8001a90:	f040 84a3 	bne.w	80023da <__ieee754_pow+0xa1a>
 8001a94:	f004 0401 	and.w	r4, r4, #1
 8001a98:	f1c4 0402 	rsb	r4, r4, #2
 8001a9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001c54 <__ieee754_pow+0x294>)
 8001a9e:	4592      	cmp	sl, r2
 8001aa0:	d12e      	bne.n	8001b00 <__ieee754_pow+0x140>
 8001aa2:	f1b9 0f00 	cmp.w	r9, #0
 8001aa6:	f280 8494 	bge.w	80023d2 <__ieee754_pow+0xa12>
 8001aaa:	496a      	ldr	r1, [pc, #424]	@ (8001c54 <__ieee754_pow+0x294>)
 8001aac:	4632      	mov	r2, r6
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7fe fe77 	bl	80007a4 <__aeabi_ddiv>
 8001ab6:	e7a0      	b.n	80019fa <__ieee754_pow+0x3a>
 8001ab8:	2400      	movs	r4, #0
 8001aba:	bbc1      	cbnz	r1, 8001b2e <__ieee754_pow+0x16e>
 8001abc:	4a63      	ldr	r2, [pc, #396]	@ (8001c4c <__ieee754_pow+0x28c>)
 8001abe:	4592      	cmp	sl, r2
 8001ac0:	d1ec      	bne.n	8001a9c <__ieee754_pow+0xdc>
 8001ac2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8001ac6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8001aca:	431a      	orrs	r2, r3
 8001acc:	f000 8479 	beq.w	80023c2 <__ieee754_pow+0xa02>
 8001ad0:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <__ieee754_pow+0x298>)
 8001ad2:	4598      	cmp	r8, r3
 8001ad4:	d908      	bls.n	8001ae8 <__ieee754_pow+0x128>
 8001ad6:	f1b9 0f00 	cmp.w	r9, #0
 8001ada:	f2c0 8476 	blt.w	80023ca <__ieee754_pow+0xa0a>
 8001ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001ae2:	e78a      	b.n	80019fa <__ieee754_pow+0x3a>
 8001ae4:	2402      	movs	r4, #2
 8001ae6:	e7e8      	b.n	8001aba <__ieee754_pow+0xfa>
 8001ae8:	f1b9 0f00 	cmp.w	r9, #0
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	da81      	bge.n	80019fa <__ieee754_pow+0x3a>
 8001af6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8001afa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8001afe:	e77c      	b.n	80019fa <__ieee754_pow+0x3a>
 8001b00:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8001b04:	d106      	bne.n	8001b14 <__ieee754_pow+0x154>
 8001b06:	4632      	mov	r2, r6
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	4639      	mov	r1, r7
 8001b0e:	f7fe fd1f 	bl	8000550 <__aeabi_dmul>
 8001b12:	e772      	b.n	80019fa <__ieee754_pow+0x3a>
 8001b14:	4a51      	ldr	r2, [pc, #324]	@ (8001c5c <__ieee754_pow+0x29c>)
 8001b16:	4591      	cmp	r9, r2
 8001b18:	d109      	bne.n	8001b2e <__ieee754_pow+0x16e>
 8001b1a:	2d00      	cmp	r5, #0
 8001b1c:	db07      	blt.n	8001b2e <__ieee754_pow+0x16e>
 8001b1e:	ec47 6b10 	vmov	d0, r6, r7
 8001b22:	b011      	add	sp, #68	@ 0x44
 8001b24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b28:	f000 bd52 	b.w	80025d0 <__ieee754_sqrt>
 8001b2c:	2400      	movs	r4, #0
 8001b2e:	ec47 6b10 	vmov	d0, r6, r7
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	f000 fc88 	bl	8002448 <fabs>
 8001b38:	9b02      	ldr	r3, [sp, #8]
 8001b3a:	ec51 0b10 	vmov	r0, r1, d0
 8001b3e:	bb53      	cbnz	r3, 8001b96 <__ieee754_pow+0x1d6>
 8001b40:	4b44      	ldr	r3, [pc, #272]	@ (8001c54 <__ieee754_pow+0x294>)
 8001b42:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d002      	beq.n	8001b50 <__ieee754_pow+0x190>
 8001b4a:	f1b8 0f00 	cmp.w	r8, #0
 8001b4e:	d122      	bne.n	8001b96 <__ieee754_pow+0x1d6>
 8001b50:	f1b9 0f00 	cmp.w	r9, #0
 8001b54:	da05      	bge.n	8001b62 <__ieee754_pow+0x1a2>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	493d      	ldr	r1, [pc, #244]	@ (8001c54 <__ieee754_pow+0x294>)
 8001b5e:	f7fe fe21 	bl	80007a4 <__aeabi_ddiv>
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	f6bf af49 	bge.w	80019fa <__ieee754_pow+0x3a>
 8001b68:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8001b6c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8001b70:	ea58 0804 	orrs.w	r8, r8, r4
 8001b74:	d108      	bne.n	8001b88 <__ieee754_pow+0x1c8>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe fb2f 	bl	80001e0 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e794      	b.n	8001ab2 <__ieee754_pow+0xf2>
 8001b88:	2c01      	cmp	r4, #1
 8001b8a:	f47f af36 	bne.w	80019fa <__ieee754_pow+0x3a>
 8001b8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8001b92:	4619      	mov	r1, r3
 8001b94:	e731      	b.n	80019fa <__ieee754_pow+0x3a>
 8001b96:	0feb      	lsrs	r3, r5, #31
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	ea53 0204 	orrs.w	r2, r3, r4
 8001b9e:	d102      	bne.n	8001ba6 <__ieee754_pow+0x1e6>
 8001ba0:	4632      	mov	r2, r6
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	e7e9      	b.n	8001b7a <__ieee754_pow+0x1ba>
 8001ba6:	3c01      	subs	r4, #1
 8001ba8:	431c      	orrs	r4, r3
 8001baa:	d016      	beq.n	8001bda <__ieee754_pow+0x21a>
 8001bac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8001c38 <__ieee754_pow+0x278>
 8001bb0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8001bb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001bb8:	f240 8112 	bls.w	8001de0 <__ieee754_pow+0x420>
 8001bbc:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <__ieee754_pow+0x2a0>)
 8001bbe:	459a      	cmp	sl, r3
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <__ieee754_pow+0x298>)
 8001bc2:	d916      	bls.n	8001bf2 <__ieee754_pow+0x232>
 8001bc4:	4598      	cmp	r8, r3
 8001bc6:	d80b      	bhi.n	8001be0 <__ieee754_pow+0x220>
 8001bc8:	f1b9 0f00 	cmp.w	r9, #0
 8001bcc:	da0b      	bge.n	8001be6 <__ieee754_pow+0x226>
 8001bce:	2000      	movs	r0, #0
 8001bd0:	b011      	add	sp, #68	@ 0x44
 8001bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd6:	f000 bcf3 	b.w	80025c0 <__math_oflow>
 8001bda:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8001c40 <__ieee754_pow+0x280>
 8001bde:	e7e7      	b.n	8001bb0 <__ieee754_pow+0x1f0>
 8001be0:	f1b9 0f00 	cmp.w	r9, #0
 8001be4:	dcf3      	bgt.n	8001bce <__ieee754_pow+0x20e>
 8001be6:	2000      	movs	r0, #0
 8001be8:	b011      	add	sp, #68	@ 0x44
 8001bea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bee:	f000 bcdf 	b.w	80025b0 <__math_uflow>
 8001bf2:	4598      	cmp	r8, r3
 8001bf4:	d20c      	bcs.n	8001c10 <__ieee754_pow+0x250>
 8001bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f7fe ff19 	bl	8000a34 <__aeabi_dcmplt>
 8001c02:	3800      	subs	r0, #0
 8001c04:	bf18      	it	ne
 8001c06:	2001      	movne	r0, #1
 8001c08:	f1b9 0f00 	cmp.w	r9, #0
 8001c0c:	daec      	bge.n	8001be8 <__ieee754_pow+0x228>
 8001c0e:	e7df      	b.n	8001bd0 <__ieee754_pow+0x210>
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <__ieee754_pow+0x294>)
 8001c12:	4598      	cmp	r8, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	d924      	bls.n	8001c64 <__ieee754_pow+0x2a4>
 8001c1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f7fe ff08 	bl	8000a34 <__aeabi_dcmplt>
 8001c24:	3800      	subs	r0, #0
 8001c26:	bf18      	it	ne
 8001c28:	2001      	movne	r0, #1
 8001c2a:	f1b9 0f00 	cmp.w	r9, #0
 8001c2e:	dccf      	bgt.n	8001bd0 <__ieee754_pow+0x210>
 8001c30:	e7da      	b.n	8001be8 <__ieee754_pow+0x228>
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	3ff00000 	.word	0x3ff00000
 8001c40:	00000000 	.word	0x00000000
 8001c44:	bff00000 	.word	0xbff00000
 8001c48:	fff00000 	.word	0xfff00000
 8001c4c:	7ff00000 	.word	0x7ff00000
 8001c50:	433fffff 	.word	0x433fffff
 8001c54:	3ff00000 	.word	0x3ff00000
 8001c58:	3fefffff 	.word	0x3fefffff
 8001c5c:	3fe00000 	.word	0x3fe00000
 8001c60:	43f00000 	.word	0x43f00000
 8001c64:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd0 <__ieee754_pow+0x410>)
 8001c66:	f7fe fabb 	bl	80001e0 <__aeabi_dsub>
 8001c6a:	a351      	add	r3, pc, #324	@ (adr r3, 8001db0 <__ieee754_pow+0x3f0>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	f7fe fc6c 	bl	8000550 <__aeabi_dmul>
 8001c78:	a34f      	add	r3, pc, #316	@ (adr r3, 8001db8 <__ieee754_pow+0x3f8>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	4606      	mov	r6, r0
 8001c80:	460f      	mov	r7, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fc63 	bl	8000550 <__aeabi_dmul>
 8001c8a:	4b52      	ldr	r3, [pc, #328]	@ (8001dd4 <__ieee754_pow+0x414>)
 8001c8c:	4682      	mov	sl, r0
 8001c8e:	468b      	mov	fp, r1
 8001c90:	2200      	movs	r2, #0
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fc5b 	bl	8000550 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	a148      	add	r1, pc, #288	@ (adr r1, 8001dc0 <__ieee754_pow+0x400>)
 8001ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ca4:	f7fe fa9c 	bl	80001e0 <__aeabi_dsub>
 8001ca8:	4622      	mov	r2, r4
 8001caa:	462b      	mov	r3, r5
 8001cac:	f7fe fc50 	bl	8000550 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	4948      	ldr	r1, [pc, #288]	@ (8001dd8 <__ieee754_pow+0x418>)
 8001cb8:	f7fe fa92 	bl	80001e0 <__aeabi_dsub>
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	4680      	mov	r8, r0
 8001cc0:	4689      	mov	r9, r1
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fc42 	bl	8000550 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe fc3c 	bl	8000550 <__aeabi_dmul>
 8001cd8:	a33b      	add	r3, pc, #236	@ (adr r3, 8001dc8 <__ieee754_pow+0x408>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe fc37 	bl	8000550 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4650      	mov	r0, sl
 8001ce8:	4659      	mov	r1, fp
 8001cea:	f7fe fa79 	bl	80001e0 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4680      	mov	r8, r0
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	4639      	mov	r1, r7
 8001cfa:	f7fe fa73 	bl	80001e4 <__adddf3>
 8001cfe:	2400      	movs	r4, #0
 8001d00:	4632      	mov	r2, r6
 8001d02:	463b      	mov	r3, r7
 8001d04:	4620      	mov	r0, r4
 8001d06:	460d      	mov	r5, r1
 8001d08:	f7fe fa6a 	bl	80001e0 <__aeabi_dsub>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4640      	mov	r0, r8
 8001d12:	4649      	mov	r1, r9
 8001d14:	f7fe fa64 	bl	80001e0 <__aeabi_dsub>
 8001d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9304      	str	r3, [sp, #16]
 8001d24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8001d28:	4606      	mov	r6, r0
 8001d2a:	460f      	mov	r7, r1
 8001d2c:	4652      	mov	r2, sl
 8001d2e:	465b      	mov	r3, fp
 8001d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001d34:	f7fe fa54 	bl	80001e0 <__aeabi_dsub>
 8001d38:	4622      	mov	r2, r4
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	f7fe fc08 	bl	8000550 <__aeabi_dmul>
 8001d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d44:	4680      	mov	r8, r0
 8001d46:	4689      	mov	r9, r1
 8001d48:	4630      	mov	r0, r6
 8001d4a:	4639      	mov	r1, r7
 8001d4c:	f7fe fc00 	bl	8000550 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4640      	mov	r0, r8
 8001d56:	4649      	mov	r1, r9
 8001d58:	f7fe fa44 	bl	80001e4 <__adddf3>
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	465b      	mov	r3, fp
 8001d60:	4606      	mov	r6, r0
 8001d62:	460f      	mov	r7, r1
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f7fe fbf2 	bl	8000550 <__aeabi_dmul>
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4680      	mov	r8, r0
 8001d72:	4689      	mov	r9, r1
 8001d74:	4630      	mov	r0, r6
 8001d76:	4639      	mov	r1, r7
 8001d78:	f7fe fa34 	bl	80001e4 <__adddf3>
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <__ieee754_pow+0x41c>)
 8001d7e:	4299      	cmp	r1, r3
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	468a      	mov	sl, r1
 8001d86:	468b      	mov	fp, r1
 8001d88:	f340 82ef 	ble.w	800236a <__ieee754_pow+0x9aa>
 8001d8c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8001d90:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8001d94:	4303      	orrs	r3, r0
 8001d96:	f000 81e8 	beq.w	800216a <__ieee754_pow+0x7aa>
 8001d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2300      	movs	r3, #0
 8001da2:	f7fe fe47 	bl	8000a34 <__aeabi_dcmplt>
 8001da6:	3800      	subs	r0, #0
 8001da8:	bf18      	it	ne
 8001daa:	2001      	movne	r0, #1
 8001dac:	e710      	b.n	8001bd0 <__ieee754_pow+0x210>
 8001dae:	bf00      	nop
 8001db0:	60000000 	.word	0x60000000
 8001db4:	3ff71547 	.word	0x3ff71547
 8001db8:	f85ddf44 	.word	0xf85ddf44
 8001dbc:	3e54ae0b 	.word	0x3e54ae0b
 8001dc0:	55555555 	.word	0x55555555
 8001dc4:	3fd55555 	.word	0x3fd55555
 8001dc8:	652b82fe 	.word	0x652b82fe
 8001dcc:	3ff71547 	.word	0x3ff71547
 8001dd0:	3ff00000 	.word	0x3ff00000
 8001dd4:	3fd00000 	.word	0x3fd00000
 8001dd8:	3fe00000 	.word	0x3fe00000
 8001ddc:	408fffff 	.word	0x408fffff
 8001de0:	4bd5      	ldr	r3, [pc, #852]	@ (8002138 <__ieee754_pow+0x778>)
 8001de2:	402b      	ands	r3, r5
 8001de4:	2200      	movs	r2, #0
 8001de6:	b92b      	cbnz	r3, 8001df4 <__ieee754_pow+0x434>
 8001de8:	4bd4      	ldr	r3, [pc, #848]	@ (800213c <__ieee754_pow+0x77c>)
 8001dea:	f7fe fbb1 	bl	8000550 <__aeabi_dmul>
 8001dee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8001df2:	468b      	mov	fp, r1
 8001df4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8001df8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8001dfc:	4413      	add	r3, r2
 8001dfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e00:	4bcf      	ldr	r3, [pc, #828]	@ (8002140 <__ieee754_pow+0x780>)
 8001e02:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8001e06:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8001e0a:	459b      	cmp	fp, r3
 8001e0c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8001e10:	dd08      	ble.n	8001e24 <__ieee754_pow+0x464>
 8001e12:	4bcc      	ldr	r3, [pc, #816]	@ (8002144 <__ieee754_pow+0x784>)
 8001e14:	459b      	cmp	fp, r3
 8001e16:	f340 81a5 	ble.w	8002164 <__ieee754_pow+0x7a4>
 8001e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e20:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001e24:	f04f 0a00 	mov.w	sl, #0
 8001e28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001e2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001e2e:	4bc6      	ldr	r3, [pc, #792]	@ (8002148 <__ieee754_pow+0x788>)
 8001e30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001e34:	ed93 7b00 	vldr	d7, [r3]
 8001e38:	4629      	mov	r1, r5
 8001e3a:	ec53 2b17 	vmov	r2, r3, d7
 8001e3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001e46:	f7fe f9cb 	bl	80001e0 <__aeabi_dsub>
 8001e4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001e4e:	4606      	mov	r6, r0
 8001e50:	460f      	mov	r7, r1
 8001e52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001e56:	f7fe f9c5 	bl	80001e4 <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	2000      	movs	r0, #0
 8001e60:	49ba      	ldr	r1, [pc, #744]	@ (800214c <__ieee754_pow+0x78c>)
 8001e62:	f7fe fc9f 	bl	80007a4 <__aeabi_ddiv>
 8001e66:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4630      	mov	r0, r6
 8001e70:	4639      	mov	r1, r7
 8001e72:	f7fe fb6d 	bl	8000550 <__aeabi_dmul>
 8001e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001e7a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8001e7e:	106d      	asrs	r5, r5, #1
 8001e80:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8001e84:	f04f 0b00 	mov.w	fp, #0
 8001e88:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8001e8c:	4661      	mov	r1, ip
 8001e8e:	2200      	movs	r2, #0
 8001e90:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8001e94:	4658      	mov	r0, fp
 8001e96:	46e1      	mov	r9, ip
 8001e98:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	461d      	mov	r5, r3
 8001ea0:	f7fe fb56 	bl	8000550 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	4639      	mov	r1, r7
 8001eac:	f7fe f998 	bl	80001e0 <__aeabi_dsub>
 8001eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001eb4:	4606      	mov	r6, r0
 8001eb6:	460f      	mov	r7, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe f990 	bl	80001e0 <__aeabi_dsub>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001ec8:	f7fe f98a 	bl	80001e0 <__aeabi_dsub>
 8001ecc:	465a      	mov	r2, fp
 8001ece:	464b      	mov	r3, r9
 8001ed0:	f7fe fb3e 	bl	8000550 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4630      	mov	r0, r6
 8001eda:	4639      	mov	r1, r7
 8001edc:	f7fe f980 	bl	80001e0 <__aeabi_dsub>
 8001ee0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8001ee4:	f7fe fb34 	bl	8000550 <__aeabi_dmul>
 8001ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001eec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fb2c 	bl	8000550 <__aeabi_dmul>
 8001ef8:	a37d      	add	r3, pc, #500	@ (adr r3, 80020f0 <__ieee754_pow+0x730>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	4604      	mov	r4, r0
 8001f00:	460d      	mov	r5, r1
 8001f02:	f7fe fb25 	bl	8000550 <__aeabi_dmul>
 8001f06:	a37c      	add	r3, pc, #496	@ (adr r3, 80020f8 <__ieee754_pow+0x738>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe f96a 	bl	80001e4 <__adddf3>
 8001f10:	4622      	mov	r2, r4
 8001f12:	462b      	mov	r3, r5
 8001f14:	f7fe fb1c 	bl	8000550 <__aeabi_dmul>
 8001f18:	a379      	add	r3, pc, #484	@ (adr r3, 8002100 <__ieee754_pow+0x740>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe f961 	bl	80001e4 <__adddf3>
 8001f22:	4622      	mov	r2, r4
 8001f24:	462b      	mov	r3, r5
 8001f26:	f7fe fb13 	bl	8000550 <__aeabi_dmul>
 8001f2a:	a377      	add	r3, pc, #476	@ (adr r3, 8002108 <__ieee754_pow+0x748>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe f958 	bl	80001e4 <__adddf3>
 8001f34:	4622      	mov	r2, r4
 8001f36:	462b      	mov	r3, r5
 8001f38:	f7fe fb0a 	bl	8000550 <__aeabi_dmul>
 8001f3c:	a374      	add	r3, pc, #464	@ (adr r3, 8002110 <__ieee754_pow+0x750>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe f94f 	bl	80001e4 <__adddf3>
 8001f46:	4622      	mov	r2, r4
 8001f48:	462b      	mov	r3, r5
 8001f4a:	f7fe fb01 	bl	8000550 <__aeabi_dmul>
 8001f4e:	a372      	add	r3, pc, #456	@ (adr r3, 8002118 <__ieee754_pow+0x758>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe f946 	bl	80001e4 <__adddf3>
 8001f58:	4622      	mov	r2, r4
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	460f      	mov	r7, r1
 8001f5e:	462b      	mov	r3, r5
 8001f60:	4620      	mov	r0, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	f7fe faf4 	bl	8000550 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	4639      	mov	r1, r7
 8001f70:	f7fe faee 	bl	8000550 <__aeabi_dmul>
 8001f74:	465a      	mov	r2, fp
 8001f76:	4604      	mov	r4, r0
 8001f78:	460d      	mov	r5, r1
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001f80:	f7fe f930 	bl	80001e4 <__adddf3>
 8001f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001f88:	f7fe fae2 	bl	8000550 <__aeabi_dmul>
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	462b      	mov	r3, r5
 8001f90:	f7fe f928 	bl	80001e4 <__adddf3>
 8001f94:	465a      	mov	r2, fp
 8001f96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	4658      	mov	r0, fp
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	f7fe fad6 	bl	8000550 <__aeabi_dmul>
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002150 <__ieee754_pow+0x790>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	4606      	mov	r6, r0
 8001faa:	460f      	mov	r7, r1
 8001fac:	f7fe f91a 	bl	80001e4 <__adddf3>
 8001fb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001fb4:	f7fe f916 	bl	80001e4 <__adddf3>
 8001fb8:	46d8      	mov	r8, fp
 8001fba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8001fbe:	460d      	mov	r5, r1
 8001fc0:	465a      	mov	r2, fp
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4640      	mov	r0, r8
 8001fc6:	4649      	mov	r1, r9
 8001fc8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8001fcc:	f7fe fac0 	bl	8000550 <__aeabi_dmul>
 8001fd0:	465c      	mov	r4, fp
 8001fd2:	4680      	mov	r8, r0
 8001fd4:	4689      	mov	r9, r1
 8001fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <__ieee754_pow+0x790>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe f8ff 	bl	80001e0 <__aeabi_dsub>
 8001fe2:	4632      	mov	r2, r6
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	f7fe f8fb 	bl	80001e0 <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001ff2:	f7fe f8f5 	bl	80001e0 <__aeabi_dsub>
 8001ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001ffa:	f7fe faa9 	bl	8000550 <__aeabi_dmul>
 8001ffe:	4622      	mov	r2, r4
 8002000:	4606      	mov	r6, r0
 8002002:	460f      	mov	r7, r1
 8002004:	462b      	mov	r3, r5
 8002006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800200a:	f7fe faa1 	bl	8000550 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4630      	mov	r0, r6
 8002014:	4639      	mov	r1, r7
 8002016:	f7fe f8e5 	bl	80001e4 <__adddf3>
 800201a:	4606      	mov	r6, r0
 800201c:	460f      	mov	r7, r1
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4640      	mov	r0, r8
 8002024:	4649      	mov	r1, r9
 8002026:	f7fe f8dd 	bl	80001e4 <__adddf3>
 800202a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800202e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002120 <__ieee754_pow+0x760>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	4658      	mov	r0, fp
 8002036:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800203a:	460d      	mov	r5, r1
 800203c:	f7fe fa88 	bl	8000550 <__aeabi_dmul>
 8002040:	465c      	mov	r4, fp
 8002042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002046:	4642      	mov	r2, r8
 8002048:	464b      	mov	r3, r9
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe f8c7 	bl	80001e0 <__aeabi_dsub>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4630      	mov	r0, r6
 8002058:	4639      	mov	r1, r7
 800205a:	f7fe f8c1 	bl	80001e0 <__aeabi_dsub>
 800205e:	a332      	add	r3, pc, #200	@ (adr r3, 8002128 <__ieee754_pow+0x768>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe fa74 	bl	8000550 <__aeabi_dmul>
 8002068:	a331      	add	r3, pc, #196	@ (adr r3, 8002130 <__ieee754_pow+0x770>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	4606      	mov	r6, r0
 8002070:	460f      	mov	r7, r1
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe fa6b 	bl	8000550 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4630      	mov	r0, r6
 8002080:	4639      	mov	r1, r7
 8002082:	f7fe f8af 	bl	80001e4 <__adddf3>
 8002086:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002088:	4b32      	ldr	r3, [pc, #200]	@ (8002154 <__ieee754_pow+0x794>)
 800208a:	4413      	add	r3, r2
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f7fe f8a8 	bl	80001e4 <__adddf3>
 8002094:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002098:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800209a:	f7fe f9ef 	bl	800047c <__aeabi_i2d>
 800209e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80020a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <__ieee754_pow+0x798>)
 80020a2:	4413      	add	r3, r2
 80020a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020a8:	4606      	mov	r6, r0
 80020aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80020ae:	460f      	mov	r7, r1
 80020b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80020b4:	f7fe f896 	bl	80001e4 <__adddf3>
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	f7fe f892 	bl	80001e4 <__adddf3>
 80020c0:	4632      	mov	r2, r6
 80020c2:	463b      	mov	r3, r7
 80020c4:	f7fe f88e 	bl	80001e4 <__adddf3>
 80020c8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80020cc:	4632      	mov	r2, r6
 80020ce:	463b      	mov	r3, r7
 80020d0:	4658      	mov	r0, fp
 80020d2:	460d      	mov	r5, r1
 80020d4:	f7fe f884 	bl	80001e0 <__aeabi_dsub>
 80020d8:	4642      	mov	r2, r8
 80020da:	464b      	mov	r3, r9
 80020dc:	f7fe f880 	bl	80001e0 <__aeabi_dsub>
 80020e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020e4:	f7fe f87c 	bl	80001e0 <__aeabi_dsub>
 80020e8:	465c      	mov	r4, fp
 80020ea:	4602      	mov	r2, r0
 80020ec:	e036      	b.n	800215c <__ieee754_pow+0x79c>
 80020ee:	bf00      	nop
 80020f0:	4a454eef 	.word	0x4a454eef
 80020f4:	3fca7e28 	.word	0x3fca7e28
 80020f8:	93c9db65 	.word	0x93c9db65
 80020fc:	3fcd864a 	.word	0x3fcd864a
 8002100:	a91d4101 	.word	0xa91d4101
 8002104:	3fd17460 	.word	0x3fd17460
 8002108:	518f264d 	.word	0x518f264d
 800210c:	3fd55555 	.word	0x3fd55555
 8002110:	db6fabff 	.word	0xdb6fabff
 8002114:	3fdb6db6 	.word	0x3fdb6db6
 8002118:	33333303 	.word	0x33333303
 800211c:	3fe33333 	.word	0x3fe33333
 8002120:	e0000000 	.word	0xe0000000
 8002124:	3feec709 	.word	0x3feec709
 8002128:	dc3a03fd 	.word	0xdc3a03fd
 800212c:	3feec709 	.word	0x3feec709
 8002130:	145b01f5 	.word	0x145b01f5
 8002134:	be3e2fe0 	.word	0xbe3e2fe0
 8002138:	7ff00000 	.word	0x7ff00000
 800213c:	43400000 	.word	0x43400000
 8002140:	0003988e 	.word	0x0003988e
 8002144:	000bb679 	.word	0x000bb679
 8002148:	080027c0 	.word	0x080027c0
 800214c:	3ff00000 	.word	0x3ff00000
 8002150:	40080000 	.word	0x40080000
 8002154:	080027a0 	.word	0x080027a0
 8002158:	080027b0 	.word	0x080027b0
 800215c:	460b      	mov	r3, r1
 800215e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002162:	e5d7      	b.n	8001d14 <__ieee754_pow+0x354>
 8002164:	f04f 0a01 	mov.w	sl, #1
 8002168:	e65e      	b.n	8001e28 <__ieee754_pow+0x468>
 800216a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800243c <__ieee754_pow+0xa7c>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	4630      	mov	r0, r6
 8002172:	4639      	mov	r1, r7
 8002174:	f7fe f836 	bl	80001e4 <__adddf3>
 8002178:	4642      	mov	r2, r8
 800217a:	e9cd 0100 	strd	r0, r1, [sp]
 800217e:	464b      	mov	r3, r9
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe f82c 	bl	80001e0 <__aeabi_dsub>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002190:	f7fe fc6e 	bl	8000a70 <__aeabi_dcmpgt>
 8002194:	2800      	cmp	r0, #0
 8002196:	f47f ae00 	bne.w	8001d9a <__ieee754_pow+0x3da>
 800219a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800219e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021a2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80021a6:	fa43 fa0a 	asr.w	sl, r3, sl
 80021aa:	44da      	add	sl, fp
 80021ac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80021b0:	489d      	ldr	r0, [pc, #628]	@ (8002428 <__ieee754_pow+0xa68>)
 80021b2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80021b6:	4108      	asrs	r0, r1
 80021b8:	ea00 030a 	and.w	r3, r0, sl
 80021bc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80021c0:	f1c1 0114 	rsb	r1, r1, #20
 80021c4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80021c8:	fa4a fa01 	asr.w	sl, sl, r1
 80021cc:	f1bb 0f00 	cmp.w	fp, #0
 80021d0:	4640      	mov	r0, r8
 80021d2:	4649      	mov	r1, r9
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	bfb8      	it	lt
 80021da:	f1ca 0a00 	rsblt	sl, sl, #0
 80021de:	f7fd ffff 	bl	80001e0 <__aeabi_dsub>
 80021e2:	4680      	mov	r8, r0
 80021e4:	4689      	mov	r9, r1
 80021e6:	4632      	mov	r2, r6
 80021e8:	463b      	mov	r3, r7
 80021ea:	4640      	mov	r0, r8
 80021ec:	4649      	mov	r1, r9
 80021ee:	f7fd fff9 	bl	80001e4 <__adddf3>
 80021f2:	2400      	movs	r4, #0
 80021f4:	a37c      	add	r3, pc, #496	@ (adr r3, 80023e8 <__ieee754_pow+0xa28>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	4620      	mov	r0, r4
 80021fc:	460d      	mov	r5, r1
 80021fe:	f7fe f9a7 	bl	8000550 <__aeabi_dmul>
 8002202:	4642      	mov	r2, r8
 8002204:	e9cd 0100 	strd	r0, r1, [sp]
 8002208:	464b      	mov	r3, r9
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f7fd ffe7 	bl	80001e0 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4630      	mov	r0, r6
 8002218:	4639      	mov	r1, r7
 800221a:	f7fd ffe1 	bl	80001e0 <__aeabi_dsub>
 800221e:	a374      	add	r3, pc, #464	@ (adr r3, 80023f0 <__ieee754_pow+0xa30>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe f994 	bl	8000550 <__aeabi_dmul>
 8002228:	a373      	add	r3, pc, #460	@ (adr r3, 80023f8 <__ieee754_pow+0xa38>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	4680      	mov	r8, r0
 8002230:	4689      	mov	r9, r1
 8002232:	4620      	mov	r0, r4
 8002234:	4629      	mov	r1, r5
 8002236:	f7fe f98b 	bl	8000550 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fd ffcf 	bl	80001e4 <__adddf3>
 8002246:	4604      	mov	r4, r0
 8002248:	460d      	mov	r5, r1
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002252:	f7fd ffc7 	bl	80001e4 <__adddf3>
 8002256:	e9dd 2300 	ldrd	r2, r3, [sp]
 800225a:	4680      	mov	r8, r0
 800225c:	4689      	mov	r9, r1
 800225e:	f7fd ffbf 	bl	80001e0 <__aeabi_dsub>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4620      	mov	r0, r4
 8002268:	4629      	mov	r1, r5
 800226a:	f7fd ffb9 	bl	80001e0 <__aeabi_dsub>
 800226e:	4642      	mov	r2, r8
 8002270:	4606      	mov	r6, r0
 8002272:	460f      	mov	r7, r1
 8002274:	464b      	mov	r3, r9
 8002276:	4640      	mov	r0, r8
 8002278:	4649      	mov	r1, r9
 800227a:	f7fe f969 	bl	8000550 <__aeabi_dmul>
 800227e:	a360      	add	r3, pc, #384	@ (adr r3, 8002400 <__ieee754_pow+0xa40>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	4604      	mov	r4, r0
 8002286:	460d      	mov	r5, r1
 8002288:	f7fe f962 	bl	8000550 <__aeabi_dmul>
 800228c:	a35e      	add	r3, pc, #376	@ (adr r3, 8002408 <__ieee754_pow+0xa48>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f7fd ffa5 	bl	80001e0 <__aeabi_dsub>
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	f7fe f959 	bl	8000550 <__aeabi_dmul>
 800229e:	a35c      	add	r3, pc, #368	@ (adr r3, 8002410 <__ieee754_pow+0xa50>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fd ff9e 	bl	80001e4 <__adddf3>
 80022a8:	4622      	mov	r2, r4
 80022aa:	462b      	mov	r3, r5
 80022ac:	f7fe f950 	bl	8000550 <__aeabi_dmul>
 80022b0:	a359      	add	r3, pc, #356	@ (adr r3, 8002418 <__ieee754_pow+0xa58>)
 80022b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b6:	f7fd ff93 	bl	80001e0 <__aeabi_dsub>
 80022ba:	4622      	mov	r2, r4
 80022bc:	462b      	mov	r3, r5
 80022be:	f7fe f947 	bl	8000550 <__aeabi_dmul>
 80022c2:	a357      	add	r3, pc, #348	@ (adr r3, 8002420 <__ieee754_pow+0xa60>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fd ff8c 	bl	80001e4 <__adddf3>
 80022cc:	4622      	mov	r2, r4
 80022ce:	462b      	mov	r3, r5
 80022d0:	f7fe f93e 	bl	8000550 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4640      	mov	r0, r8
 80022da:	4649      	mov	r1, r9
 80022dc:	f7fd ff80 	bl	80001e0 <__aeabi_dsub>
 80022e0:	4604      	mov	r4, r0
 80022e2:	460d      	mov	r5, r1
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4640      	mov	r0, r8
 80022ea:	4649      	mov	r1, r9
 80022ec:	f7fe f930 	bl	8000550 <__aeabi_dmul>
 80022f0:	2200      	movs	r2, #0
 80022f2:	e9cd 0100 	strd	r0, r1, [sp]
 80022f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ff6f 	bl	80001e0 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800230a:	f7fe fa4b 	bl	80007a4 <__aeabi_ddiv>
 800230e:	4632      	mov	r2, r6
 8002310:	4604      	mov	r4, r0
 8002312:	460d      	mov	r5, r1
 8002314:	463b      	mov	r3, r7
 8002316:	4640      	mov	r0, r8
 8002318:	4649      	mov	r1, r9
 800231a:	f7fe f919 	bl	8000550 <__aeabi_dmul>
 800231e:	4632      	mov	r2, r6
 8002320:	463b      	mov	r3, r7
 8002322:	f7fd ff5f 	bl	80001e4 <__adddf3>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4620      	mov	r0, r4
 800232c:	4629      	mov	r1, r5
 800232e:	f7fd ff57 	bl	80001e0 <__aeabi_dsub>
 8002332:	4642      	mov	r2, r8
 8002334:	464b      	mov	r3, r9
 8002336:	f7fd ff53 	bl	80001e0 <__aeabi_dsub>
 800233a:	460b      	mov	r3, r1
 800233c:	4602      	mov	r2, r0
 800233e:	493b      	ldr	r1, [pc, #236]	@ (800242c <__ieee754_pow+0xa6c>)
 8002340:	2000      	movs	r0, #0
 8002342:	f7fd ff4d 	bl	80001e0 <__aeabi_dsub>
 8002346:	ec41 0b10 	vmov	d0, r0, r1
 800234a:	ee10 3a90 	vmov	r3, s1
 800234e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8002352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002356:	da30      	bge.n	80023ba <__ieee754_pow+0x9fa>
 8002358:	4650      	mov	r0, sl
 800235a:	f000 f87d 	bl	8002458 <scalbn>
 800235e:	ec51 0b10 	vmov	r0, r1, d0
 8002362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002366:	f7ff bbd2 	b.w	8001b0e <__ieee754_pow+0x14e>
 800236a:	4c31      	ldr	r4, [pc, #196]	@ (8002430 <__ieee754_pow+0xa70>)
 800236c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002370:	42a3      	cmp	r3, r4
 8002372:	d91a      	bls.n	80023aa <__ieee754_pow+0x9ea>
 8002374:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <__ieee754_pow+0xa74>)
 8002376:	440b      	add	r3, r1
 8002378:	4303      	orrs	r3, r0
 800237a:	d009      	beq.n	8002390 <__ieee754_pow+0x9d0>
 800237c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002380:	2200      	movs	r2, #0
 8002382:	2300      	movs	r3, #0
 8002384:	f7fe fb56 	bl	8000a34 <__aeabi_dcmplt>
 8002388:	3800      	subs	r0, #0
 800238a:	bf18      	it	ne
 800238c:	2001      	movne	r0, #1
 800238e:	e42b      	b.n	8001be8 <__ieee754_pow+0x228>
 8002390:	4642      	mov	r2, r8
 8002392:	464b      	mov	r3, r9
 8002394:	f7fd ff24 	bl	80001e0 <__aeabi_dsub>
 8002398:	4632      	mov	r2, r6
 800239a:	463b      	mov	r3, r7
 800239c:	f7fe fb5e 	bl	8000a5c <__aeabi_dcmpge>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d1eb      	bne.n	800237c <__ieee754_pow+0x9bc>
 80023a4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8002444 <__ieee754_pow+0xa84>
 80023a8:	e6f7      	b.n	800219a <__ieee754_pow+0x7da>
 80023aa:	469a      	mov	sl, r3
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <__ieee754_pow+0xa78>)
 80023ae:	459a      	cmp	sl, r3
 80023b0:	f63f aef3 	bhi.w	800219a <__ieee754_pow+0x7da>
 80023b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80023b8:	e715      	b.n	80021e6 <__ieee754_pow+0x826>
 80023ba:	ec51 0b10 	vmov	r0, r1, d0
 80023be:	4619      	mov	r1, r3
 80023c0:	e7cf      	b.n	8002362 <__ieee754_pow+0x9a2>
 80023c2:	491a      	ldr	r1, [pc, #104]	@ (800242c <__ieee754_pow+0xa6c>)
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff bb18 	b.w	80019fa <__ieee754_pow+0x3a>
 80023ca:	2000      	movs	r0, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	f7ff bb14 	b.w	80019fa <__ieee754_pow+0x3a>
 80023d2:	4630      	mov	r0, r6
 80023d4:	4639      	mov	r1, r7
 80023d6:	f7ff bb10 	b.w	80019fa <__ieee754_pow+0x3a>
 80023da:	460c      	mov	r4, r1
 80023dc:	f7ff bb5e 	b.w	8001a9c <__ieee754_pow+0xdc>
 80023e0:	2400      	movs	r4, #0
 80023e2:	f7ff bb49 	b.w	8001a78 <__ieee754_pow+0xb8>
 80023e6:	bf00      	nop
 80023e8:	00000000 	.word	0x00000000
 80023ec:	3fe62e43 	.word	0x3fe62e43
 80023f0:	fefa39ef 	.word	0xfefa39ef
 80023f4:	3fe62e42 	.word	0x3fe62e42
 80023f8:	0ca86c39 	.word	0x0ca86c39
 80023fc:	be205c61 	.word	0xbe205c61
 8002400:	72bea4d0 	.word	0x72bea4d0
 8002404:	3e663769 	.word	0x3e663769
 8002408:	c5d26bf1 	.word	0xc5d26bf1
 800240c:	3ebbbd41 	.word	0x3ebbbd41
 8002410:	af25de2c 	.word	0xaf25de2c
 8002414:	3f11566a 	.word	0x3f11566a
 8002418:	16bebd93 	.word	0x16bebd93
 800241c:	3f66c16c 	.word	0x3f66c16c
 8002420:	5555553e 	.word	0x5555553e
 8002424:	3fc55555 	.word	0x3fc55555
 8002428:	fff00000 	.word	0xfff00000
 800242c:	3ff00000 	.word	0x3ff00000
 8002430:	4090cbff 	.word	0x4090cbff
 8002434:	3f6f3400 	.word	0x3f6f3400
 8002438:	3fe00000 	.word	0x3fe00000
 800243c:	652b82fe 	.word	0x652b82fe
 8002440:	3c971547 	.word	0x3c971547
 8002444:	4090cc00 	.word	0x4090cc00

08002448 <fabs>:
 8002448:	ec51 0b10 	vmov	r0, r1, d0
 800244c:	4602      	mov	r2, r0
 800244e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002452:	ec43 2b10 	vmov	d0, r2, r3
 8002456:	4770      	bx	lr

08002458 <scalbn>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	ec55 4b10 	vmov	r4, r5, d0
 800245e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8002462:	4606      	mov	r6, r0
 8002464:	462b      	mov	r3, r5
 8002466:	b991      	cbnz	r1, 800248e <scalbn+0x36>
 8002468:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800246c:	4323      	orrs	r3, r4
 800246e:	d03d      	beq.n	80024ec <scalbn+0x94>
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <scalbn+0xf0>)
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	2200      	movs	r2, #0
 8002478:	f7fe f86a 	bl	8000550 <__aeabi_dmul>
 800247c:	4b33      	ldr	r3, [pc, #204]	@ (800254c <scalbn+0xf4>)
 800247e:	429e      	cmp	r6, r3
 8002480:	4604      	mov	r4, r0
 8002482:	460d      	mov	r5, r1
 8002484:	da0f      	bge.n	80024a6 <scalbn+0x4e>
 8002486:	a328      	add	r3, pc, #160	@ (adr r3, 8002528 <scalbn+0xd0>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	e01e      	b.n	80024cc <scalbn+0x74>
 800248e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002492:	4291      	cmp	r1, r2
 8002494:	d10b      	bne.n	80024ae <scalbn+0x56>
 8002496:	4622      	mov	r2, r4
 8002498:	4620      	mov	r0, r4
 800249a:	4629      	mov	r1, r5
 800249c:	f7fd fea2 	bl	80001e4 <__adddf3>
 80024a0:	4604      	mov	r4, r0
 80024a2:	460d      	mov	r5, r1
 80024a4:	e022      	b.n	80024ec <scalbn+0x94>
 80024a6:	460b      	mov	r3, r1
 80024a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80024ac:	3936      	subs	r1, #54	@ 0x36
 80024ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80024b2:	4296      	cmp	r6, r2
 80024b4:	dd0d      	ble.n	80024d2 <scalbn+0x7a>
 80024b6:	2d00      	cmp	r5, #0
 80024b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8002530 <scalbn+0xd8>)
 80024ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024be:	da02      	bge.n	80024c6 <scalbn+0x6e>
 80024c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8002538 <scalbn+0xe0>)
 80024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002530 <scalbn+0xd8>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f840 	bl	8000550 <__aeabi_dmul>
 80024d0:	e7e6      	b.n	80024a0 <scalbn+0x48>
 80024d2:	1872      	adds	r2, r6, r1
 80024d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80024d8:	428a      	cmp	r2, r1
 80024da:	dcec      	bgt.n	80024b6 <scalbn+0x5e>
 80024dc:	2a00      	cmp	r2, #0
 80024de:	dd08      	ble.n	80024f2 <scalbn+0x9a>
 80024e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80024e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80024e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80024ec:	ec45 4b10 	vmov	d0, r4, r5
 80024f0:	bd70      	pop	{r4, r5, r6, pc}
 80024f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80024f6:	da08      	bge.n	800250a <scalbn+0xb2>
 80024f8:	2d00      	cmp	r5, #0
 80024fa:	a10b      	add	r1, pc, #44	@ (adr r1, 8002528 <scalbn+0xd0>)
 80024fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002500:	dac1      	bge.n	8002486 <scalbn+0x2e>
 8002502:	a10f      	add	r1, pc, #60	@ (adr r1, 8002540 <scalbn+0xe8>)
 8002504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002508:	e7bd      	b.n	8002486 <scalbn+0x2e>
 800250a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800250e:	3236      	adds	r2, #54	@ 0x36
 8002510:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002514:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002518:	4620      	mov	r0, r4
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <scalbn+0xf8>)
 800251c:	4629      	mov	r1, r5
 800251e:	2200      	movs	r2, #0
 8002520:	e7d4      	b.n	80024cc <scalbn+0x74>
 8002522:	bf00      	nop
 8002524:	f3af 8000 	nop.w
 8002528:	c2f8f359 	.word	0xc2f8f359
 800252c:	01a56e1f 	.word	0x01a56e1f
 8002530:	8800759c 	.word	0x8800759c
 8002534:	7e37e43c 	.word	0x7e37e43c
 8002538:	8800759c 	.word	0x8800759c
 800253c:	fe37e43c 	.word	0xfe37e43c
 8002540:	c2f8f359 	.word	0xc2f8f359
 8002544:	81a56e1f 	.word	0x81a56e1f
 8002548:	43500000 	.word	0x43500000
 800254c:	ffff3cb0 	.word	0xffff3cb0
 8002550:	3c900000 	.word	0x3c900000

08002554 <with_errno>:
 8002554:	b510      	push	{r4, lr}
 8002556:	ed2d 8b02 	vpush	{d8}
 800255a:	eeb0 8a40 	vmov.f32	s16, s0
 800255e:	eef0 8a60 	vmov.f32	s17, s1
 8002562:	4604      	mov	r4, r0
 8002564:	f7ff f984 	bl	8001870 <__errno>
 8002568:	eeb0 0a48 	vmov.f32	s0, s16
 800256c:	eef0 0a68 	vmov.f32	s1, s17
 8002570:	ecbd 8b02 	vpop	{d8}
 8002574:	6004      	str	r4, [r0, #0]
 8002576:	bd10      	pop	{r4, pc}

08002578 <xflow>:
 8002578:	4603      	mov	r3, r0
 800257a:	b507      	push	{r0, r1, r2, lr}
 800257c:	ec51 0b10 	vmov	r0, r1, d0
 8002580:	b183      	cbz	r3, 80025a4 <xflow+0x2c>
 8002582:	4602      	mov	r2, r0
 8002584:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002588:	e9cd 2300 	strd	r2, r3, [sp]
 800258c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002590:	f7fd ffde 	bl	8000550 <__aeabi_dmul>
 8002594:	ec41 0b10 	vmov	d0, r0, r1
 8002598:	2022      	movs	r0, #34	@ 0x22
 800259a:	b003      	add	sp, #12
 800259c:	f85d eb04 	ldr.w	lr, [sp], #4
 80025a0:	f7ff bfd8 	b.w	8002554 <with_errno>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	e7ee      	b.n	8002588 <xflow+0x10>
 80025aa:	0000      	movs	r0, r0
 80025ac:	0000      	movs	r0, r0
	...

080025b0 <__math_uflow>:
 80025b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80025b8 <__math_uflow+0x8>
 80025b4:	f7ff bfe0 	b.w	8002578 <xflow>
 80025b8:	00000000 	.word	0x00000000
 80025bc:	10000000 	.word	0x10000000

080025c0 <__math_oflow>:
 80025c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80025c8 <__math_oflow+0x8>
 80025c4:	f7ff bfd8 	b.w	8002578 <xflow>
 80025c8:	00000000 	.word	0x00000000
 80025cc:	70000000 	.word	0x70000000

080025d0 <__ieee754_sqrt>:
 80025d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	4a68      	ldr	r2, [pc, #416]	@ (8002778 <__ieee754_sqrt+0x1a8>)
 80025d6:	ec55 4b10 	vmov	r4, r5, d0
 80025da:	43aa      	bics	r2, r5
 80025dc:	462b      	mov	r3, r5
 80025de:	4621      	mov	r1, r4
 80025e0:	d110      	bne.n	8002604 <__ieee754_sqrt+0x34>
 80025e2:	4622      	mov	r2, r4
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fd ffb2 	bl	8000550 <__aeabi_dmul>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4620      	mov	r0, r4
 80025f2:	4629      	mov	r1, r5
 80025f4:	f7fd fdf6 	bl	80001e4 <__adddf3>
 80025f8:	4604      	mov	r4, r0
 80025fa:	460d      	mov	r5, r1
 80025fc:	ec45 4b10 	vmov	d0, r4, r5
 8002600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002604:	2d00      	cmp	r5, #0
 8002606:	dc0e      	bgt.n	8002626 <__ieee754_sqrt+0x56>
 8002608:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800260c:	4322      	orrs	r2, r4
 800260e:	d0f5      	beq.n	80025fc <__ieee754_sqrt+0x2c>
 8002610:	b19d      	cbz	r5, 800263a <__ieee754_sqrt+0x6a>
 8002612:	4622      	mov	r2, r4
 8002614:	4620      	mov	r0, r4
 8002616:	4629      	mov	r1, r5
 8002618:	f7fd fde2 	bl	80001e0 <__aeabi_dsub>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	f7fe f8c0 	bl	80007a4 <__aeabi_ddiv>
 8002624:	e7e8      	b.n	80025f8 <__ieee754_sqrt+0x28>
 8002626:	152a      	asrs	r2, r5, #20
 8002628:	d115      	bne.n	8002656 <__ieee754_sqrt+0x86>
 800262a:	2000      	movs	r0, #0
 800262c:	e009      	b.n	8002642 <__ieee754_sqrt+0x72>
 800262e:	0acb      	lsrs	r3, r1, #11
 8002630:	3a15      	subs	r2, #21
 8002632:	0549      	lsls	r1, r1, #21
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0fa      	beq.n	800262e <__ieee754_sqrt+0x5e>
 8002638:	e7f7      	b.n	800262a <__ieee754_sqrt+0x5a>
 800263a:	462a      	mov	r2, r5
 800263c:	e7fa      	b.n	8002634 <__ieee754_sqrt+0x64>
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	3001      	adds	r0, #1
 8002642:	02dc      	lsls	r4, r3, #11
 8002644:	d5fb      	bpl.n	800263e <__ieee754_sqrt+0x6e>
 8002646:	1e44      	subs	r4, r0, #1
 8002648:	1b12      	subs	r2, r2, r4
 800264a:	f1c0 0420 	rsb	r4, r0, #32
 800264e:	fa21 f404 	lsr.w	r4, r1, r4
 8002652:	4323      	orrs	r3, r4
 8002654:	4081      	lsls	r1, r0
 8002656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002662:	07d2      	lsls	r2, r2, #31
 8002664:	bf5c      	itt	pl
 8002666:	005b      	lslpl	r3, r3, #1
 8002668:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800266c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002670:	bf58      	it	pl
 8002672:	0049      	lslpl	r1, r1, #1
 8002674:	2600      	movs	r6, #0
 8002676:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800267a:	106d      	asrs	r5, r5, #1
 800267c:	0049      	lsls	r1, r1, #1
 800267e:	2016      	movs	r0, #22
 8002680:	4632      	mov	r2, r6
 8002682:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8002686:	1917      	adds	r7, r2, r4
 8002688:	429f      	cmp	r7, r3
 800268a:	bfde      	ittt	le
 800268c:	193a      	addle	r2, r7, r4
 800268e:	1bdb      	suble	r3, r3, r7
 8002690:	1936      	addle	r6, r6, r4
 8002692:	0fcf      	lsrs	r7, r1, #31
 8002694:	3801      	subs	r0, #1
 8002696:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800269a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800269e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80026a2:	d1f0      	bne.n	8002686 <__ieee754_sqrt+0xb6>
 80026a4:	4604      	mov	r4, r0
 80026a6:	2720      	movs	r7, #32
 80026a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80026ac:	429a      	cmp	r2, r3
 80026ae:	eb00 0e0c 	add.w	lr, r0, ip
 80026b2:	db02      	blt.n	80026ba <__ieee754_sqrt+0xea>
 80026b4:	d113      	bne.n	80026de <__ieee754_sqrt+0x10e>
 80026b6:	458e      	cmp	lr, r1
 80026b8:	d811      	bhi.n	80026de <__ieee754_sqrt+0x10e>
 80026ba:	f1be 0f00 	cmp.w	lr, #0
 80026be:	eb0e 000c 	add.w	r0, lr, ip
 80026c2:	da42      	bge.n	800274a <__ieee754_sqrt+0x17a>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	db40      	blt.n	800274a <__ieee754_sqrt+0x17a>
 80026c8:	f102 0801 	add.w	r8, r2, #1
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	458e      	cmp	lr, r1
 80026d0:	bf88      	it	hi
 80026d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80026d6:	eba1 010e 	sub.w	r1, r1, lr
 80026da:	4464      	add	r4, ip
 80026dc:	4642      	mov	r2, r8
 80026de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80026e2:	3f01      	subs	r7, #1
 80026e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80026e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80026ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80026f0:	d1dc      	bne.n	80026ac <__ieee754_sqrt+0xdc>
 80026f2:	4319      	orrs	r1, r3
 80026f4:	d01b      	beq.n	800272e <__ieee754_sqrt+0x15e>
 80026f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800277c <__ieee754_sqrt+0x1ac>
 80026fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8002780 <__ieee754_sqrt+0x1b0>
 80026fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8002702:	e9db 2300 	ldrd	r2, r3, [fp]
 8002706:	f7fd fd6b 	bl	80001e0 <__aeabi_dsub>
 800270a:	e9da 8900 	ldrd	r8, r9, [sl]
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4640      	mov	r0, r8
 8002714:	4649      	mov	r1, r9
 8002716:	f7fe f997 	bl	8000a48 <__aeabi_dcmple>
 800271a:	b140      	cbz	r0, 800272e <__ieee754_sqrt+0x15e>
 800271c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002720:	e9da 0100 	ldrd	r0, r1, [sl]
 8002724:	e9db 2300 	ldrd	r2, r3, [fp]
 8002728:	d111      	bne.n	800274e <__ieee754_sqrt+0x17e>
 800272a:	3601      	adds	r6, #1
 800272c:	463c      	mov	r4, r7
 800272e:	1072      	asrs	r2, r6, #1
 8002730:	0863      	lsrs	r3, r4, #1
 8002732:	07f1      	lsls	r1, r6, #31
 8002734:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8002738:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800273c:	bf48      	it	mi
 800273e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8002742:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8002746:	4618      	mov	r0, r3
 8002748:	e756      	b.n	80025f8 <__ieee754_sqrt+0x28>
 800274a:	4690      	mov	r8, r2
 800274c:	e7be      	b.n	80026cc <__ieee754_sqrt+0xfc>
 800274e:	f7fd fd49 	bl	80001e4 <__adddf3>
 8002752:	e9da 8900 	ldrd	r8, r9, [sl]
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4640      	mov	r0, r8
 800275c:	4649      	mov	r1, r9
 800275e:	f7fe f969 	bl	8000a34 <__aeabi_dcmplt>
 8002762:	b120      	cbz	r0, 800276e <__ieee754_sqrt+0x19e>
 8002764:	1ca0      	adds	r0, r4, #2
 8002766:	bf08      	it	eq
 8002768:	3601      	addeq	r6, #1
 800276a:	3402      	adds	r4, #2
 800276c:	e7df      	b.n	800272e <__ieee754_sqrt+0x15e>
 800276e:	1c63      	adds	r3, r4, #1
 8002770:	f023 0401 	bic.w	r4, r3, #1
 8002774:	e7db      	b.n	800272e <__ieee754_sqrt+0x15e>
 8002776:	bf00      	nop
 8002778:	7ff00000 	.word	0x7ff00000
 800277c:	20000060 	.word	0x20000060
 8002780:	20000058 	.word	0x20000058

08002784 <_init>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr

08002790 <_fini>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr
