
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000650  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000650  08000650  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000650  08000650  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000650  08000650  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000650  08000650  00001650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000654  08000654  00001654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000658  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800065c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800065c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000142e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000576  00000000  00000000  00003462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000039d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000153  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b30  00000000  00000000  00003d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022f5  00000000  00000000  0001783b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e01d  00000000  00000000  00019b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b4  00000000  00000000  00097b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00098144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000638 	.word	0x08000638

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000638 	.word	0x08000638

080001d4 <main>:
void i2c1_config();
void i2c1_sw_rst();
uint8_t i2c1_test();

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

	clock_config();
 80001da:	f000 f831 	bl	8000240 <clock_config>
	i2c1_config();
 80001de:	f000 f8bd 	bl	800035c <i2c1_config>

	RCC->AHB1ENR |= (1 << 0);
 80001e2:	4b15      	ldr	r3, [pc, #84]	@ (8000238 <main+0x64>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a14      	ldr	r2, [pc, #80]	@ (8000238 <main+0x64>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1 << 20);
 80001ee:	4b13      	ldr	r3, [pc, #76]	@ (800023c <main+0x68>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a12      	ldr	r2, [pc, #72]	@ (800023c <main+0x68>)
 80001f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001f8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 21);
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <main+0x68>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0f      	ldr	r2, [pc, #60]	@ (800023c <main+0x68>)
 8000200:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000204:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  // blink led
	  if (i2c1_test() == 0xA0)
 8000206:	f000 f903 	bl	8000410 <i2c1_test>
 800020a:	4603      	mov	r3, r0
 800020c:	2ba0      	cmp	r3, #160	@ 0xa0
 800020e:	d104      	bne.n	800021a <main+0x46>
		  GPIOA->ODR = (1 << 10);
 8000210:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <main+0x68>)
 8000212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000216:	615a      	str	r2, [r3, #20]
 8000218:	e002      	b.n	8000220 <main+0x4c>
	  else
		  GPIOA->ODR = 0;
 800021a:	4b08      	ldr	r3, [pc, #32]	@ (800023c <main+0x68>)
 800021c:	2200      	movs	r2, #0
 800021e:	615a      	str	r2, [r3, #20]

	  for (int i = 0; i < 20000; i++);
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	e002      	b.n	800022c <main+0x58>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	3301      	adds	r3, #1
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000232:	4293      	cmp	r3, r2
 8000234:	ddf7      	ble.n	8000226 <main+0x52>
	  if (i2c1_test() == 0xA0)
 8000236:	e7e6      	b.n	8000206 <main+0x32>
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <clock_config>:
  }
}

void clock_config() {
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000246:	4b42      	ldr	r3, [pc, #264]	@ (8000350 <clock_config+0x110>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a41      	ldr	r2, [pc, #260]	@ (8000350 <clock_config+0x110>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000252:	bf00      	nop
 8000254:	4b3e      	ldr	r3, [pc, #248]	@ (8000350 <clock_config+0x110>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f003 0302 	and.w	r3, r3, #2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d0f9      	beq.n	8000254 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000260:	4b3b      	ldr	r3, [pc, #236]	@ (8000350 <clock_config+0x110>)
 8000262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000266:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000268:	4b3a      	ldr	r3, [pc, #232]	@ (8000354 <clock_config+0x114>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a39      	ldr	r2, [pc, #228]	@ (8000354 <clock_config+0x114>)
 800026e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000272:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000274:	4b37      	ldr	r3, [pc, #220]	@ (8000354 <clock_config+0x114>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a36      	ldr	r2, [pc, #216]	@ (8000354 <clock_config+0x114>)
 800027a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800027e:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000280:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000284:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 800028e:	4a32      	ldr	r2, [pc, #200]	@ (8000358 <clock_config+0x118>)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800029e:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002a6:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002ae:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 80002b0:	4a27      	ldr	r2, [pc, #156]	@ (8000350 <clock_config+0x110>)
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 80002b6:	4b26      	ldr	r3, [pc, #152]	@ (8000350 <clock_config+0x110>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80002c2:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002ca:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002d2:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80002da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002de:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80002e6:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80002ee:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 80002f8:	4a15      	ldr	r2, [pc, #84]	@ (8000350 <clock_config+0x110>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <clock_config+0x110>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <clock_config+0x110>)
 8000304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000308:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 800030a:	bf00      	nop
 800030c:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <clock_config+0x110>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000318:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <clock_config+0x110>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	f043 0302 	orr.w	r3, r3, #2
 8000324:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	f023 0301 	bic.w	r3, r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 800032e:	4a08      	ldr	r2, [pc, #32]	@ (8000350 <clock_config+0x110>)
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000334:	bf00      	nop
 8000336:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <clock_config+0x110>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	f003 0308 	and.w	r3, r3, #8
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f9      	beq.n	8000336 <clock_config+0xf6>
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40023800 	.word	0x40023800
 8000354:	40007000 	.word	0x40007000
 8000358:	40023c00 	.word	0x40023c00

0800035c <i2c1_config>:

void i2c1_config() {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

	// IC2_2
	// PB8 is SCL
	// PB9 is SDA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 8000360:	4b1d      	ldr	r3, [pc, #116]	@ (80003d8 <i2c1_config+0x7c>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a1c      	ldr	r2, [pc, #112]	@ (80003d8 <i2c1_config+0x7c>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30

	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <i2c1_config+0x80>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1a      	ldr	r2, [pc, #104]	@ (80003dc <i2c1_config+0x80>)
 8000372:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <i2c1_config+0x80>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a17      	ldr	r2, [pc, #92]	@ (80003dc <i2c1_config+0x80>)
 800037e:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 8000382:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <i2c1_config+0x80>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a14      	ldr	r2, [pc, #80]	@ (80003dc <i2c1_config+0x80>)
 800038a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800038e:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// AF04 for PB8 and PB9
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <i2c1_config+0x80>)
 8000392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <i2c1_config+0x80>)
 8000396:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800039a:	6253      	str	r3, [r2, #36]	@ 0x24

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C2 clock
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <i2c1_config+0x7c>)
 800039e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <i2c1_config+0x7c>)
 80003a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003a6:	6413      	str	r3, [r2, #64]	@ 0x40

	i2c1_sw_rst();
 80003a8:	f000 f81c 	bl	80003e4 <i2c1_sw_rst>
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <i2c1_config+0x84>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <i2c1_config+0x84>)
 80003b4:	222a      	movs	r2, #42	@ 0x2a
 80003b6:	605a      	str	r2, [r3, #4]
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
//	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode (up to 400kHz SCL) and set freq to 300kHz
	// 10kHz
	I2C1->CCR = 2100;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <i2c1_config+0x84>)
 80003ba:	f640 0234 	movw	r2, #2100	@ 0x834
 80003be:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 80003c0:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <i2c1_config+0x84>)
 80003c2:	220d      	movs	r2, #13
 80003c4:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <i2c1_config+0x84>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a05      	ldr	r2, [pc, #20]	@ (80003e0 <i2c1_config+0x84>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6013      	str	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40020400 	.word	0x40020400
 80003e0:	40005400 	.word	0x40005400

080003e4 <i2c1_sw_rst>:

void i2c1_sw_rst() {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_SWRST;
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <i2c1_sw_rst+0x28>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a07      	ldr	r2, [pc, #28]	@ (800040c <i2c1_sw_rst+0x28>)
 80003ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003f2:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <i2c1_sw_rst+0x28>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a04      	ldr	r2, [pc, #16]	@ (800040c <i2c1_sw_rst+0x28>)
 80003fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40005400 	.word	0x40005400

08000410 <i2c1_test>:

uint8_t i2c1_test() {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

	uint8_t slave_addr = 0x50;
 8000416:	2350      	movs	r3, #80	@ 0x50
 8000418:	70fb      	strb	r3, [r7, #3]
	uint8_t who_am_i_addr = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	70bb      	strb	r3, [r7, #2]


	I2C1->CR1 |= I2C_CR1_START;
 800041e:	4b31      	ldr	r3, [pc, #196]	@ (80004e4 <i2c1_test+0xd4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a30      	ldr	r2, [pc, #192]	@ (80004e4 <i2c1_test+0xd4>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000428:	6013      	str	r3, [r2, #0]
	while (!((I2C1->SR1) & I2C_SR1_SB));		// wait for start bit generation
 800042a:	bf00      	nop
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <i2c1_test+0xd4>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b00      	cmp	r3, #0
 8000436:	d0f9      	beq.n	800042c <i2c1_test+0x1c>
	I2C1->DR = slave_addr;
 8000438:	4a2a      	ldr	r2, [pc, #168]	@ (80004e4 <i2c1_test+0xd4>)
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	6113      	str	r3, [r2, #16]

	int timeout = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
	while (!((I2C1->SR1) & I2C_SR1_ADDR)) {
 8000442:	e00a      	b.n	800045a <i2c1_test+0x4a>

		timeout++;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3301      	adds	r3, #1
 8000448:	607b      	str	r3, [r7, #4]
		if (timeout == 200000000) {
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a26      	ldr	r2, [pc, #152]	@ (80004e8 <i2c1_test+0xd8>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d103      	bne.n	800045a <i2c1_test+0x4a>

			i2c1_config();
 8000452:	f7ff ff83 	bl	800035c <i2c1_config>
			return 0;// wait for address to be sent
 8000456:	2300      	movs	r3, #0
 8000458:	e040      	b.n	80004dc <i2c1_test+0xcc>
	while (!((I2C1->SR1) & I2C_SR1_ADDR)) {
 800045a:	4b22      	ldr	r3, [pc, #136]	@ (80004e4 <i2c1_test+0xd4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f003 0302 	and.w	r3, r3, #2
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0ee      	beq.n	8000444 <i2c1_test+0x34>
		}
	}

	uint8_t temp = I2C2->SR2;					// clear address bit
 8000466:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <i2c1_test+0xdc>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	707b      	strb	r3, [r7, #1]
	I2C1->DR = who_am_i_addr;
 800046c:	4a1d      	ldr	r2, [pc, #116]	@ (80004e4 <i2c1_test+0xd4>)
 800046e:	78bb      	ldrb	r3, [r7, #2]
 8000470:	6113      	str	r3, [r2, #16]
	while (!((I2C1->SR1) & I2C_SR1_BTF));		// wait for byte transfer complete
 8000472:	bf00      	nop
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <i2c1_test+0xd4>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <i2c1_test+0x64>
	I2C1->CR1 |= I2C_CR1_START;					// repeated start
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <i2c1_test+0xd4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a17      	ldr	r2, [pc, #92]	@ (80004e4 <i2c1_test+0xd4>)
 8000486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800048a:	6013      	str	r3, [r2, #0]
	while (!((I2C1->SR1) & I2C_SR1_SB));		// wait for start bit generation
 800048c:	bf00      	nop
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <i2c1_test+0xd4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f9      	beq.n	800048e <i2c1_test+0x7e>
	I2C1->DR = slave_addr | 0x01;				// read
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <i2c1_test+0xd4>)
 80004a4:	611a      	str	r2, [r3, #16]
	while (!((I2C1->SR1) & I2C_SR1_ADDR));		// wait for address to be sent
 80004a6:	bf00      	nop
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <i2c1_test+0xd4>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f003 0302 	and.w	r3, r3, #2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f9      	beq.n	80004a8 <i2c1_test+0x98>

	temp = I2C2->SR2;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <i2c1_test+0xdc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	707b      	strb	r3, [r7, #1]
	while (!((I2C1->SR1) & (1 << 6)));			// wait for data register full
 80004ba:	bf00      	nop
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <i2c1_test+0xd4>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <i2c1_test+0xac>
	temp = I2C1->DR;
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <i2c1_test+0xd4>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	707b      	strb	r3, [r7, #1]
	I2C1->CR1 |= I2C_CR1_STOP;					// send stop
 80004ce:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <i2c1_test+0xd4>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <i2c1_test+0xd4>)
 80004d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d8:	6013      	str	r3, [r2, #0]
	return temp;
 80004da:	787b      	ldrb	r3, [r7, #1]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40005400 	.word	0x40005400
 80004e8:	0bebc200 	.word	0x0bebc200
 80004ec:	40005800 	.word	0x40005800

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <NMI_Handler+0x4>

080004f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <MemManage_Handler+0x4>

08000508 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <UsageFault_Handler+0x4>

08000518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000546:	f000 f83f 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <SystemInit+0x20>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <SystemInit+0x20>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000578:	f7ff ffea 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	@ (80005b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	@ (80005c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80005a2:	f000 f825 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005a6:	f7ff fe15 	bl	80001d4 <main>
  bx  lr    
 80005aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005b8:	08000658 	.word	0x08000658
  ldr r2, =_sbss
 80005bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005c0:	20000024 	.word	0x20000024

080005c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000020 	.word	0x20000020

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000628 <__libc_init_array+0x38>)
 80005f4:	4c0d      	ldr	r4, [pc, #52]	@ (800062c <__libc_init_array+0x3c>)
 80005f6:	1b64      	subs	r4, r4, r5
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	2600      	movs	r6, #0
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	4d0b      	ldr	r5, [pc, #44]	@ (8000630 <__libc_init_array+0x40>)
 8000602:	4c0c      	ldr	r4, [pc, #48]	@ (8000634 <__libc_init_array+0x44>)
 8000604:	f000 f818 	bl	8000638 <_init>
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	2600      	movs	r6, #0
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
