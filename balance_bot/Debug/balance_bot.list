
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a58  08000a58  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a58  08000a58  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a58  08000a58  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a58  08000a58  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a58  08000a58  00001a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000a60  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000a64  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000a64  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001798  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006aa  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00003e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a1  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b30  00000000  00000000  00004259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002665  00000000  00000000  00017d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e137  00000000  00000000  0001a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000758  00000000  00000000  00098568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00098cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a40 	.word	0x08000a40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000a40 	.word	0x08000a40

080001d4 <main>:
uint8_t bno055_config();
void bno055_read_euler(int16_t * roll, int16_t * pitch, int16_t * heading);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0

	clock_config();
 80001da:	f000 f85d 	bl	8000298 <clock_config>
	i2c1_config();
 80001de:	f000 f8e9 	bl	80003b4 <i2c1_config>
	uart1_config();
 80001e2:	f000 fa6b 	bl	80006bc <uart1_config>

	RCC->AHB1ENR |= (1 << 0);
 80001e6:	4b29      	ldr	r3, [pc, #164]	@ (800028c <main+0xb8>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ea:	4a28      	ldr	r2, [pc, #160]	@ (800028c <main+0xb8>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1 << 20);
 80001f2:	4b27      	ldr	r3, [pc, #156]	@ (8000290 <main+0xbc>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a26      	ldr	r2, [pc, #152]	@ (8000290 <main+0xbc>)
 80001f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << 21);
 80001fe:	4b24      	ldr	r3, [pc, #144]	@ (8000290 <main+0xbc>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a23      	ldr	r2, [pc, #140]	@ (8000290 <main+0xbc>)
 8000204:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000208:	6013      	str	r3, [r2, #0]


	while (bno055_config());
 800020a:	bf00      	nop
 800020c:	f000 fb08 	bl	8000820 <bno055_config>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1fa      	bne.n	800020c <main+0x38>

	while ((i2c_readbyte(0x50, 0x3d) & 0x0f) != 0x08) {
 8000216:	e00c      	b.n	8000232 <main+0x5e>

		uart_send((uint8_t)'_');
 8000218:	205f      	movs	r0, #95	@ 0x5f
 800021a:	f000 fa99 	bl	8000750 <uart_send>
		for (int i = 0; i < 500000; i++);
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e002      	b.n	800022a <main+0x56>
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	4a19      	ldr	r2, [pc, #100]	@ (8000294 <main+0xc0>)
 800022e:	4293      	cmp	r3, r2
 8000230:	ddf8      	ble.n	8000224 <main+0x50>
	while ((i2c_readbyte(0x50, 0x3d) & 0x0f) != 0x08) {
 8000232:	213d      	movs	r1, #61	@ 0x3d
 8000234:	2050      	movs	r0, #80	@ 0x50
 8000236:	f000 f961 	bl	80004fc <i2c_readbyte>
 800023a:	4603      	mov	r3, r0
 800023c:	f003 030f 	and.w	r3, r3, #15
 8000240:	2b08      	cmp	r3, #8
 8000242:	d1e9      	bne.n	8000218 <main+0x44>
  while (1)
  {
//	  GPIOA->ODR |= (1 << 10);
//	  uart_send((uint8_t)'.');
	  int16_t roll, heading, pitch;
	  bno055_read_euler(&roll, &pitch, &heading);
 8000244:	1d3a      	adds	r2, r7, #4
 8000246:	1cb9      	adds	r1, r7, #2
 8000248:	1dbb      	adds	r3, r7, #6
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fb34 	bl	80008b8 <bno055_read_euler>
	  // pg 35 bno055 datasheet
	  // 1 degree = 16 LSB
	  roll = roll / 16;
 8000250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000254:	2b00      	cmp	r3, #0
 8000256:	da00      	bge.n	800025a <main+0x86>
 8000258:	330f      	adds	r3, #15
 800025a:	111b      	asrs	r3, r3, #4
 800025c:	b21b      	sxth	r3, r3
 800025e:	80fb      	strh	r3, [r7, #6]
	  uart_send_num(roll);
 8000260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fa93 	bl	8000790 <uart_send_num>
	  uart_send('\n');
 800026a:	200a      	movs	r0, #10
 800026c:	f000 fa70 	bl	8000750 <uart_send>
	  uart_send('\r');
 8000270:	200d      	movs	r0, #13
 8000272:	f000 fa6d 	bl	8000750 <uart_send>
	  for (int i = 0; i < 500000; i++);
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	e002      	b.n	8000282 <main+0xae>
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	3301      	adds	r3, #1
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a03      	ldr	r2, [pc, #12]	@ (8000294 <main+0xc0>)
 8000286:	4293      	cmp	r3, r2
 8000288:	ddf8      	ble.n	800027c <main+0xa8>
  {
 800028a:	e7db      	b.n	8000244 <main+0x70>
 800028c:	40023800 	.word	0x40023800
 8000290:	40020000 	.word	0x40020000
 8000294:	0007a11f 	.word	0x0007a11f

08000298 <clock_config>:
  }
}

void clock_config() {
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 800029e:	4b42      	ldr	r3, [pc, #264]	@ (80003a8 <clock_config+0x110>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a41      	ldr	r2, [pc, #260]	@ (80003a8 <clock_config+0x110>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 80002aa:	bf00      	nop
 80002ac:	4b3e      	ldr	r3, [pc, #248]	@ (80003a8 <clock_config+0x110>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f003 0302 	and.w	r3, r3, #2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f9      	beq.n	80002ac <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80002b8:	4b3b      	ldr	r3, [pc, #236]	@ (80003a8 <clock_config+0x110>)
 80002ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002be:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 80002c0:	4b3a      	ldr	r3, [pc, #232]	@ (80003ac <clock_config+0x114>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a39      	ldr	r2, [pc, #228]	@ (80003ac <clock_config+0x114>)
 80002c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ca:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 80002cc:	4b37      	ldr	r3, [pc, #220]	@ (80003ac <clock_config+0x114>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a36      	ldr	r2, [pc, #216]	@ (80003ac <clock_config+0x114>)
 80002d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002d6:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 80002d8:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80002dc:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	f043 0302 	orr.w	r3, r3, #2
 80002e4:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 80002e6:	4a32      	ldr	r2, [pc, #200]	@ (80003b0 <clock_config+0x118>)
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002f6:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002fe:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000306:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000308:	4a27      	ldr	r2, [pc, #156]	@ (80003a8 <clock_config+0x110>)
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 800030e:	4b26      	ldr	r3, [pc, #152]	@ (80003a8 <clock_config+0x110>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800031a:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000322:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800032a:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000336:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 800033e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000346:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000350:	4a15      	ldr	r2, [pc, #84]	@ (80003a8 <clock_config+0x110>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <clock_config+0x110>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a13      	ldr	r2, [pc, #76]	@ (80003a8 <clock_config+0x110>)
 800035c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000360:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000362:	bf00      	nop
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <clock_config+0x110>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f9      	beq.n	8000364 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <clock_config+0x110>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000386:	4a08      	ldr	r2, [pc, #32]	@ (80003a8 <clock_config+0x110>)
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 800038c:	bf00      	nop
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <clock_config+0x110>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f003 0308 	and.w	r3, r3, #8
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <clock_config+0xf6>
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40007000 	.word	0x40007000
 80003b0:	40023c00 	.word	0x40023c00

080003b4 <i2c1_config>:

void i2c1_config() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

	// PB8 is SCL
	// PB9 is SDA
	// enable I2C clock before configuring pins
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C1 clock
 80003b8:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <i2c1_config+0x8c>)
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	4a20      	ldr	r2, [pc, #128]	@ (8000440 <i2c1_config+0x8c>)
 80003be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003c2:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 80003c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <i2c1_config+0x8c>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000440 <i2c1_config+0x8c>)
 80003ca:	f043 0302 	orr.w	r3, r3, #2
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30

	// before configuring SCL and SDA pins for AF, make sure bus is not busy by clocking out extra
	// data to slave devices
	i2c1_release();
 80003d0:	f000 f920 	bl	8000614 <i2c1_release>


	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <i2c1_config+0x90>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000444 <i2c1_config+0x90>)
 80003da:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80003de:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <i2c1_config+0x90>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a17      	ldr	r2, [pc, #92]	@ (8000444 <i2c1_config+0x90>)
 80003e6:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 80003ea:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 80003ec:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <i2c1_config+0x90>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <i2c1_config+0x90>)
 80003f2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003f6:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// set max output speed for both
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR8;
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <i2c1_config+0x90>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <i2c1_config+0x90>)
 80003fe:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000402:	6093      	str	r3, [r2, #8]

	// AF04 for PB8 and PB9 to select I2C1_SCL and I2C1_SDA
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <i2c1_config+0x90>)
 8000406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000408:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <i2c1_config+0x90>)
 800040a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800040e:	6253      	str	r3, [r2, #36]	@ 0x24
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <i2c1_config+0x94>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
	i2c1_sw_rst();		// reset I2C to clear busy bit
 8000416:	f000 f819 	bl	800044c <i2c1_sw_rst>
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 800041a:	4b0b      	ldr	r3, [pc, #44]	@ (8000448 <i2c1_config+0x94>)
 800041c:	222a      	movs	r2, #42	@ 0x2a
 800041e:	605a      	str	r2, [r3, #4]
	// tLOW = 2 * tHIGH
	// 300kHz = 1 / (tLOW + tHIGH) = 1 / (3 * tHIGH)
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode and set freq to 300kHz
 8000420:	4b09      	ldr	r3, [pc, #36]	@ (8000448 <i2c1_config+0x94>)
 8000422:	f248 022f 	movw	r2, #32815	@ 0x802f
 8000426:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 8000428:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <i2c1_config+0x94>)
 800042a:	220d      	movs	r2, #13
 800042c:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 800042e:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <i2c1_config+0x94>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a05      	ldr	r2, [pc, #20]	@ (8000448 <i2c1_config+0x94>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6013      	str	r3, [r2, #0]
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40023800 	.word	0x40023800
 8000444:	40020400 	.word	0x40020400
 8000448:	40005400 	.word	0x40005400

0800044c <i2c1_sw_rst>:

void i2c1_sw_rst() {
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

	// reset I2C1
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000450:	4b08      	ldr	r3, [pc, #32]	@ (8000474 <i2c1_sw_rst+0x28>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a07      	ldr	r2, [pc, #28]	@ (8000474 <i2c1_sw_rst+0x28>)
 8000456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800045a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 800045c:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <i2c1_sw_rst+0x28>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <i2c1_sw_rst+0x28>)
 8000462:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40005400 	.word	0x40005400

08000478 <i2c_writebyte>:

	return i2c_readbyte(slave_addr, who_am_i_addr);
}


void i2c_writebyte(uint8_t slave_addr, uint8_t reg_addr, uint8_t byte) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
 8000482:	460b      	mov	r3, r1
 8000484:	71bb      	strb	r3, [r7, #6]
 8000486:	4613      	mov	r3, r2
 8000488:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 800048a:	bf00      	nop
 800048c:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <i2c_writebyte+0x80>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0302 	and.w	r3, r3, #2
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f9      	bne.n	800048c <i2c_writebyte+0x14>

	i2c_start();
 8000498:	f000 f884 	bl	80005a4 <i2c_start>
	I2C1->DR = slave_addr;
 800049c:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <i2c_writebyte+0x80>)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80004a2:	bf00      	nop
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <i2c_writebyte+0x80>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f003 0302 	and.w	r3, r3, #2
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f9      	beq.n	80004a4 <i2c_writebyte+0x2c>
	(void)I2C1->SR2;						// dummy read to clear status bit
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <i2c_writebyte+0x80>)
 80004b2:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80004b4:	bf00      	nop
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <i2c_writebyte+0x80>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f9      	beq.n	80004b6 <i2c_writebyte+0x3e>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 80004c2:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <i2c_writebyte+0x80>)
 80004c4:	79bb      	ldrb	r3, [r7, #6]
 80004c6:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80004c8:	bf00      	nop
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <i2c_writebyte+0x80>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0f9      	beq.n	80004ca <i2c_writebyte+0x52>
	I2C1->DR = byte;
 80004d6:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <i2c_writebyte+0x80>)
 80004d8:	797b      	ldrb	r3, [r7, #5]
 80004da:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 80004dc:	bf00      	nop
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <i2c_writebyte+0x80>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f9      	beq.n	80004de <i2c_writebyte+0x66>
	i2c_request_stop();
 80004ea:	f000 f873 	bl	80005d4 <i2c_request_stop>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40005400 	.word	0x40005400

080004fc <i2c_readbyte>:


uint8_t i2c_readbyte(uint8_t slave_addr, uint8_t reg_addr) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	460a      	mov	r2, r1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	4613      	mov	r3, r2
 800050a:	71bb      	strb	r3, [r7, #6]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 800050c:	bf00      	nop
 800050e:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f9      	bne.n	800050e <i2c_readbyte+0x12>

	i2c_start();
 800051a:	f000 f843 	bl	80005a4 <i2c_start>
	I2C1->DR = slave_addr;
 800051e:	4a20      	ldr	r2, [pc, #128]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000524:	bf00      	nop
 8000526:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <i2c_readbyte+0x2a>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8000532:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000534:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8000536:	bf00      	nop
 8000538:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <i2c_readbyte+0xa4>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <i2c_readbyte+0x3c>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 8000544:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 800054a:	bf00      	nop
 800054c:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <i2c_readbyte+0xa4>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f9      	beq.n	800054c <i2c_readbyte+0x50>

	// For single byte reads, pg 482 of reference manual "Closing the communication"
	i2c_start();
 8000558:	f000 f824 	bl	80005a4 <i2c_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000566:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000568:	bf00      	nop
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <i2c_readbyte+0xa4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0f9      	beq.n	800056a <i2c_readbyte+0x6e>
	i2c_nack();
 8000576:	f000 f83d 	bl	80005f4 <i2c_nack>
	(void)I2C1->SR2;						// dummy read to clear status bit
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <i2c_readbyte+0xa4>)
 800057c:	699b      	ldr	r3, [r3, #24]
	i2c_request_stop();
 800057e:	f000 f829 	bl	80005d4 <i2c_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8000582:	bf00      	nop
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <i2c_readbyte+0x88>
	return I2C1->DR;
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <i2c_readbyte+0xa4>)
 8000592:	691b      	ldr	r3, [r3, #16]
 8000594:	b2db      	uxtb	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40005400 	.word	0x40005400

080005a4 <i2c_start>:


void i2c_start() {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <i2c_start+0x2c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <i2c_start+0x2c>)
 80005ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005b2:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));		// wait for start bit generation
 80005b4:	bf00      	nop
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <i2c_start+0x2c>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <i2c_start+0x12>
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400

080005d4 <i2c_request_stop>:

void i2c_request_stop() {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <i2c_request_stop+0x1c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <i2c_request_stop+0x1c>)
 80005de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40005400 	.word	0x40005400

080005f4 <i2c_nack>:
void i2c_ack() {

	I2C1->CR1 |= I2C_CR1_ACK;
}

void i2c_nack() {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~I2C_CR1_ACK;
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <i2c_nack+0x1c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <i2c_nack+0x1c>)
 80005fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40005400 	.word	0x40005400

08000614 <i2c1_release>:


void i2c1_release() {
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0

	// set SCL and SDA lines as outputs
	GPIOB->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 800061a:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <i2c1_release+0xa4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <i2c1_release+0xa4>)
 8000620:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000624:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1);
 8000626:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <i2c1_release+0xa4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a23      	ldr	r2, [pc, #140]	@ (80006b8 <i2c1_release+0xa4>)
 800062c:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8000630:	6013      	str	r3, [r2, #0]

	// output open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <i2c1_release+0xa4>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <i2c1_release+0xa4>)
 8000638:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800063c:	6053      	str	r3, [r2, #4]

	// set SDA line high, so that after slave releases the SDA and listens for ACK/NACK, it will get NACK
	GPIOB->ODR |= GPIO_ODR_ODR_9;
 800063e:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <i2c1_release+0xa4>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a1d      	ldr	r2, [pc, #116]	@ (80006b8 <i2c1_release+0xa4>)
 8000644:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000648:	6153      	str	r3, [r2, #20]

	// generate 10 clock pulses on SCL line
	for (int i = 0; i < 10; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e024      	b.n	800069a <i2c1_release+0x86>

		GPIOB->ODR |= GPIO_ODR_ODR_8;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <i2c1_release+0xa4>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <i2c1_release+0xa4>)
 8000656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800065a:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	e003      	b.n	800066a <i2c1_release+0x56>
			__NOP();
 8000662:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3301      	adds	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000670:	dbf7      	blt.n	8000662 <i2c1_release+0x4e>

		GPIOB->ODR &= ~GPIO_ODR_ODR_8;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <i2c1_release+0xa4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <i2c1_release+0xa4>)
 8000678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800067c:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e003      	b.n	800068c <i2c1_release+0x78>
			__NOP();
 8000684:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000692:	dbf7      	blt.n	8000684 <i2c1_release+0x70>
	for (int i = 0; i < 10; i++) {
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b09      	cmp	r3, #9
 800069e:	ddd7      	ble.n	8000650 <i2c1_release+0x3c>
	}

	// set SCL high, line should be pulled high when I2C is idle
	GPIOB->ODR |= GPIO_ODR_ODR_8;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <i2c1_release+0xa4>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <i2c1_release+0xa4>)
 80006a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006aa:	6153      	str	r3, [r2, #20]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40020400 	.word	0x40020400

080006bc <uart1_config>:


void uart1_config() {
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

	// UART TX is PA9 or D8

	// enable clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <uart1_config+0x88>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <uart1_config+0x88>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode for PA9
	GPIOA->MODER |= GPIO_MODER_MODER9_1;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <uart1_config+0x8c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <uart1_config+0x8c>)
 80006d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER9_0;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <uart1_config+0x8c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000748 <uart1_config+0x8c>)
 80006de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006e2:	6013      	str	r3, [r2, #0]

	// select UART_TX1 as AF
	GPIOA->AFR[1] |= GPIO_AFRH_AFRH1_2 | GPIO_AFRH_AFRH1_1 | GPIO_AFRH_AFRH1_0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <uart1_config+0x8c>)
 80006e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e8:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <uart1_config+0x8c>)
 80006ea:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80006ee:	6253      	str	r3, [r2, #36]	@ 0x24


	// enable USART1 clock
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <uart1_config+0x88>)
 80006f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <uart1_config+0x88>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6453      	str	r3, [r2, #68]	@ 0x44

	USART1->CR1 |= USART_CR1_UE;		// USART enable
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <uart1_config+0x90>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <uart1_config+0x90>)
 8000702:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000706:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~USART_CR1_M;		// 1 start bit, 8 data bits, n stop bits
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <uart1_config+0x90>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	4a0f      	ldr	r2, [pc, #60]	@ (800074c <uart1_config+0x90>)
 800070e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000712:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~USART_CR1_PCE;		// no parity
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <uart1_config+0x90>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <uart1_config+0x90>)
 800071a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800071e:	60d3      	str	r3, [r2, #12]

	USART1->CR2 = 0;					// 1 stop bit, asynchronous
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <uart1_config+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
	// fCK = 84MHz (APB2 bus)
	// baud = 9600
	// USARTDIV = 546.875
	// Mantissa = 546
	// Fraction = 0.875 * 16 (4 bits for fraction) = 14
	USART1->BRR = 546 << 4 | 14;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <uart1_config+0x90>)
 8000728:	f242 222e 	movw	r2, #8750	@ 0x222e
 800072c:	609a      	str	r2, [r3, #8]

	USART1->CR1 |= USART_CR1_TE;		// enable transmitter
 800072e:	4b07      	ldr	r3, [pc, #28]	@ (800074c <uart1_config+0x90>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	4a06      	ldr	r2, [pc, #24]	@ (800074c <uart1_config+0x90>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	60d3      	str	r3, [r2, #12]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40023800 	.word	0x40023800
 8000748:	40020000 	.word	0x40020000
 800074c:	40011000 	.word	0x40011000

08000750 <uart_send>:


void uart_send(uint8_t byte) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]

	while (!(USART1->SR & USART_SR_TXE));		// wait until data register is empty
 800075a:	bf00      	nop
 800075c:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <uart_send+0x3c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0f9      	beq.n	800075c <uart_send+0xc>
	USART1->DR = byte;			// load register
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <uart_send+0x3c>)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TC));		// wait until transmission complete
 800076e:	bf00      	nop
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <uart_send+0x3c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f9      	beq.n	8000770 <uart_send+0x20>
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40011000 	.word	0x40011000

08000790 <uart_send_num>:


void uart_send_num(int16_t num) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]

	if (num == 0)
 800079a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d103      	bne.n	80007aa <uart_send_num+0x1a>
		uart_send('0');
 80007a2:	2030      	movs	r0, #48	@ 0x30
 80007a4:	f7ff ffd4 	bl	8000750 <uart_send>
 80007a8:	e00a      	b.n	80007c0 <uart_send_num+0x30>
	else if (num < 0) {
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da06      	bge.n	80007c0 <uart_send_num+0x30>

		uart_send('-');
 80007b2:	202d      	movs	r0, #45	@ 0x2d
 80007b4:	f7ff ffcc 	bl	8000750 <uart_send>
		num = num * -1;
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	425b      	negs	r3, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	80fb      	strh	r3, [r7, #6]
	}

	for (int i = 10000; i > 0; i /= 10) {
 80007c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	e021      	b.n	800080c <uart_send_num+0x7c>

		if (num > i) {
 80007c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	da14      	bge.n	80007fc <uart_send_num+0x6c>

			uart_send((num / i) + '0');
 80007d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	3330      	adds	r3, #48	@ 0x30
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffb4 	bl	8000750 <uart_send>
			num = num - (num / i) * i;
 80007e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	fb93 f2f2 	sdiv	r2, r3, r2
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	fb01 f202 	mul.w	r2, r1, r2
 80007f8:	1a9b      	subs	r3, r3, r2
 80007fa:	80fb      	strh	r3, [r7, #6]
	for (int i = 10000; i > 0; i /= 10) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <uart_send_num+0x8c>)
 8000800:	fb82 1203 	smull	r1, r2, r2, r3
 8000804:	1092      	asrs	r2, r2, #2
 8000806:	17db      	asrs	r3, r3, #31
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	dcda      	bgt.n	80007c8 <uart_send_num+0x38>
		}
	}
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	66666667 	.word	0x66666667

08000820 <bno055_config>:


uint8_t bno055_config() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0

	const uint8_t slave_addr = 0x50;
 8000826:	2350      	movs	r3, #80	@ 0x50
 8000828:	71fb      	strb	r3, [r7, #7]
	const uint8_t opr_reg = 0x3d;
 800082a:	233d      	movs	r3, #61	@ 0x3d
 800082c:	71bb      	strb	r3, [r7, #6]

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_mode_config = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	717b      	strb	r3, [r7, #5]
	i2c_writebyte(slave_addr, opr_reg, opr_mode_config);
 8000832:	797a      	ldrb	r2, [r7, #5]
 8000834:	79b9      	ldrb	r1, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe1d 	bl	8000478 <i2c_writebyte>

	// delay >19 ms
	for (int i = 0; i < 2000000; i++);
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e002      	b.n	800084a <bno055_config+0x2a>
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <bno055_config+0x94>)
 800084e:	4293      	cmp	r3, r2
 8000850:	ddf8      	ble.n	8000844 <bno055_config+0x24>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 8000852:	233b      	movs	r3, #59	@ 0x3b
 8000854:	713b      	strb	r3, [r7, #4]
	i2c_writebyte(slave_addr, unit_sel_reg, 0x80);
 8000856:	7939      	ldrb	r1, [r7, #4]
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe0b 	bl	8000478 <i2c_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_imu = 0x08;
 8000862:	2308      	movs	r3, #8
 8000864:	70fb      	strb	r3, [r7, #3]
	i2c_writebyte(slave_addr, opr_reg, opr_mode_imu);
 8000866:	78fa      	ldrb	r2, [r7, #3]
 8000868:	79b9      	ldrb	r1, [r7, #6]
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe03 	bl	8000478 <i2c_writebyte>

	// delay >7 ms
	for (int i = 0; i < 2000000; i++);
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	e002      	b.n	800087e <bno055_config+0x5e>
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <bno055_config+0x94>)
 8000882:	4293      	cmp	r3, r2
 8000884:	ddf8      	ble.n	8000878 <bno055_config+0x58>

	// check POST register ST_RESULT
	const uint8_t st_result = 0x36;
 8000886:	2336      	movs	r3, #54	@ 0x36
 8000888:	70bb      	strb	r3, [r7, #2]
	uint8_t post = i2c_readbyte(slave_addr, st_result);
 800088a:	78ba      	ldrb	r2, [r7, #2]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fe33 	bl	80004fc <i2c_readbyte>
 8000896:	4603      	mov	r3, r0
 8000898:	707b      	strb	r3, [r7, #1]

	if ((post & 0x0f) == 0x0f)
 800089a:	787b      	ldrb	r3, [r7, #1]
 800089c:	f003 030f 	and.w	r3, r3, #15
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d101      	bne.n	80008a8 <bno055_config+0x88>
		return 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	e000      	b.n	80008aa <bno055_config+0x8a>
	else
		return 1;
 80008a8:	2301      	movs	r3, #1
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	001e847f 	.word	0x001e847f

080008b8 <bno055_read_euler>:


void bno055_read_euler(int16_t * roll, int16_t * pitch, int16_t * heading) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]

	uint16_t roll_val;
	roll_val = i2c_readbyte(0x50, 0x1c);	// read lsb
 80008c4:	211c      	movs	r1, #28
 80008c6:	2050      	movs	r0, #80	@ 0x50
 80008c8:	f7ff fe18 	bl	80004fc <i2c_readbyte>
 80008cc:	4603      	mov	r3, r0
 80008ce:	82fb      	strh	r3, [r7, #22]
	roll_val |= i2c_readbyte(0x50, 0x1d) << 8;		// read msb
 80008d0:	211d      	movs	r1, #29
 80008d2:	2050      	movs	r0, #80	@ 0x50
 80008d4:	f7ff fe12 	bl	80004fc <i2c_readbyte>
 80008d8:	4603      	mov	r3, r0
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b21a      	sxth	r2, r3
 80008de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	82fb      	strh	r3, [r7, #22]
	*roll = roll_val;
 80008e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f83f 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f000 f825 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fc11 	bl	80001d4 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009c0:	08000a60 	.word	0x08000a60
  ldr r2, =_sbss
 80009c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009c8:	20000024 	.word	0x20000024

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000020 	.word	0x20000020

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 f818 	bl	8000a40 <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000a58 	.word	0x08000a58
 8000a34:	08000a58 	.word	0x08000a58
 8000a38:	08000a58 	.word	0x08000a58
 8000a3c:	08000a5c 	.word	0x08000a5c

08000a40 <_init>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr

08000a4c <_fini>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr
