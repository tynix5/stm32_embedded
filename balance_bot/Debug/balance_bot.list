
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000568  08000568  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000568  08000568  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000568  08000568  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000568  08000568  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000568  08000568  00001568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800056c  0800056c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000570  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000574  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000574  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a47  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006bb  00000000  00000000  00003a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00004138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ba  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145a1  00000000  00000000  00004552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a0d  00000000  00000000  00018af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081baf  00000000  00000000  0001b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d0af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007ec  00000000  00000000  0009d0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000550 	.word	0x08000550

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000550 	.word	0x08000550

080001d4 <main>:
void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw);
void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, int16_t * roll, int16_t * pitch, int16_t * heading);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	clock_config();
 80001d8:	f000 f814 	bl	8000204 <clock_config>
//	i2c1_config();
//	uart1_config(9600);
	tim2_config();
 80001dc:	f000 f8a0 	bl	8000320 <tim2_config>
//	float sum_err = 0;

  while (1)
  {

	  while (!(TIM2->SR & TIM_SR_CC3IF));
 80001e0:	bf00      	nop
 80001e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f003 0308 	and.w	r3, r3, #8
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d0f8      	beq.n	80001e2 <main+0xe>
	  while (!(TIM2->SR & TIM_SR_CC4IF));
 80001f0:	bf00      	nop
 80001f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f6:	691b      	ldr	r3, [r3, #16]
 80001f8:	f003 0310 	and.w	r3, r3, #16
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f8      	beq.n	80001f2 <main+0x1e>
	  while (!(TIM2->SR & TIM_SR_CC3IF));
 8000200:	e7ee      	b.n	80001e0 <main+0xc>
	...

08000204 <clock_config>:
//	  uart1_writebyte('\r');
//	  for (int i = 0; i < 500000; i++);
  }
}

void clock_config() {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 800020a:	4b42      	ldr	r3, [pc, #264]	@ (8000314 <clock_config+0x110>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a41      	ldr	r2, [pc, #260]	@ (8000314 <clock_config+0x110>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000216:	bf00      	nop
 8000218:	4b3e      	ldr	r3, [pc, #248]	@ (8000314 <clock_config+0x110>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f9      	beq.n	8000218 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000224:	4b3b      	ldr	r3, [pc, #236]	@ (8000314 <clock_config+0x110>)
 8000226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800022a:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 800022c:	4b3a      	ldr	r3, [pc, #232]	@ (8000318 <clock_config+0x114>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a39      	ldr	r2, [pc, #228]	@ (8000318 <clock_config+0x114>)
 8000232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000236:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000238:	4b37      	ldr	r3, [pc, #220]	@ (8000318 <clock_config+0x114>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a36      	ldr	r2, [pc, #216]	@ (8000318 <clock_config+0x114>)
 800023e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000242:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000244:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000248:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000252:	4a32      	ldr	r2, [pc, #200]	@ (800031c <clock_config+0x118>)
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000262:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800026a:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000272:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000274:	4a27      	ldr	r2, [pc, #156]	@ (8000314 <clock_config+0x110>)
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 800027a:	4b26      	ldr	r3, [pc, #152]	@ (8000314 <clock_config+0x110>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000286:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800028e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000296:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800029e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002a2:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80002aa:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80002b2:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 80002bc:	4a15      	ldr	r2, [pc, #84]	@ (8000314 <clock_config+0x110>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 80002c2:	4b14      	ldr	r3, [pc, #80]	@ (8000314 <clock_config+0x110>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a13      	ldr	r2, [pc, #76]	@ (8000314 <clock_config+0x110>)
 80002c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002cc:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 80002ce:	bf00      	nop
 80002d0:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <clock_config+0x110>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 80002dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000314 <clock_config+0x110>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f043 0302 	orr.w	r3, r3, #2
 80002e8:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	f023 0301 	bic.w	r3, r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 80002f2:	4a08      	ldr	r2, [pc, #32]	@ (8000314 <clock_config+0x110>)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 80002f8:	bf00      	nop
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <clock_config+0x110>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 0308 	and.w	r3, r3, #8
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <clock_config+0xf6>
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40023800 	.word	0x40023800
 8000318:	40007000 	.word	0x40007000
 800031c:	40023c00 	.word	0x40023c00

08000320 <tim2_config>:
	while (str[i] != '\0')
		uart1_writebyte(str[i++]);
}


void tim2_config() {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	// PA2 is TIM2_CH3 --> D1
	// PA3 is TIM2_CH4 --> D0
	// TIM2 is a 32 bit counter
	// must set AF for pins

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// enable TIM2 clock
 8000324:	4b36      	ldr	r3, [pc, #216]	@ (8000400 <tim2_config+0xe0>)
 8000326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000328:	4a35      	ldr	r2, [pc, #212]	@ (8000400 <tim2_config+0xe0>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		// enable GPIOA clock
 8000330:	4b33      	ldr	r3, [pc, #204]	@ (8000400 <tim2_config+0xe0>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000334:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <tim2_config+0xe0>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 800033c:	4b31      	ldr	r3, [pc, #196]	@ (8000404 <tim2_config+0xe4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a30      	ldr	r2, [pc, #192]	@ (8000404 <tim2_config+0xe4>)
 8000342:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000346:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0);
 8000348:	4b2e      	ldr	r3, [pc, #184]	@ (8000404 <tim2_config+0xe4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a2d      	ldr	r2, [pc, #180]	@ (8000404 <tim2_config+0xe4>)
 800034e:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000352:	6013      	str	r3, [r2, #0]

	// alternate function mode 1
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2 | GPIO_AFRL_AFRL3);
 8000354:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <tim2_config+0xe4>)
 8000356:	6a1b      	ldr	r3, [r3, #32]
 8000358:	4a2a      	ldr	r2, [pc, #168]	@ (8000404 <tim2_config+0xe4>)
 800035a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800035e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL3_0;
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <tim2_config+0xe4>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a27      	ldr	r2, [pc, #156]	@ (8000404 <tim2_config+0xe4>)
 8000366:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800036a:	6213      	str	r3, [r2, #32]

	TIM2->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 800036c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 0;		// /1 prescaler
 8000374:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000378:	2200      	movs	r2, #0
 800037a:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;		// configure TIM2_CH3 (PA2) to PWM mode
 800037c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000380:	2260      	movs	r2, #96	@ 0x60
 8000382:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;		// configure TIM2_CH4 (PA3) to PWM mode
 8000384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800038e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000392:	61d3      	str	r3, [r2, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;		// output compare 3 and 4 preload enable
 8000394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800039e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	61d3      	str	r3, [r2, #28]

	TIM2->CCER = TIM_CCER_CC3E | TIM_CCER_CC4E;		// active high, outputs enabled
 80003a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ac:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 80003b0:	621a      	str	r2, [r3, #32]


	TIM2->ARR = 2048;		// output frequency approx 20.5kHz
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80003ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR3 = 10;
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c0:	220a      	movs	r2, #10
 80003c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 2047;		// test
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80003cc:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 80003ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	601a      	str	r2, [r3, #0]

	TIM2->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003da:	2201      	movs	r2, #1
 80003dc:	615a      	str	r2, [r3, #20]

	TIM2->CNT = 0;				// reset counter
 80003de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;	// enable counter
 80003e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6013      	str	r3, [r2, #0]
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40023800 	.word	0x40023800
 8000404:	40020000 	.word	0x40020000

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f83f 	bl	80004e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <SystemInit+0x20>)
 800046e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000472:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <SystemInit+0x20>)
 8000474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800048c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000490:	f7ff ffea 	bl	8000468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000494:	480c      	ldr	r0, [pc, #48]	@ (80004c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000496:	490d      	ldr	r1, [pc, #52]	@ (80004cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000498:	4a0d      	ldr	r2, [pc, #52]	@ (80004d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004ac:	4c0a      	ldr	r4, [pc, #40]	@ (80004d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80004ba:	f000 f825 	bl	8000508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004be:	f7ff fe89 	bl	80001d4 <main>
  bx  lr    
 80004c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004d0:	08000570 	.word	0x08000570
  ldr r2, =_sbss
 80004d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004d8:	20000024 	.word	0x20000024

080004dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC_IRQHandler>
	...

080004e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_IncTick+0x20>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_IncTick+0x24>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <HAL_IncTick+0x24>)
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	20000020 	.word	0x20000020

08000508 <__libc_init_array>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	4d0d      	ldr	r5, [pc, #52]	@ (8000540 <__libc_init_array+0x38>)
 800050c:	4c0d      	ldr	r4, [pc, #52]	@ (8000544 <__libc_init_array+0x3c>)
 800050e:	1b64      	subs	r4, r4, r5
 8000510:	10a4      	asrs	r4, r4, #2
 8000512:	2600      	movs	r6, #0
 8000514:	42a6      	cmp	r6, r4
 8000516:	d109      	bne.n	800052c <__libc_init_array+0x24>
 8000518:	4d0b      	ldr	r5, [pc, #44]	@ (8000548 <__libc_init_array+0x40>)
 800051a:	4c0c      	ldr	r4, [pc, #48]	@ (800054c <__libc_init_array+0x44>)
 800051c:	f000 f818 	bl	8000550 <_init>
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	10a4      	asrs	r4, r4, #2
 8000524:	2600      	movs	r6, #0
 8000526:	42a6      	cmp	r6, r4
 8000528:	d105      	bne.n	8000536 <__libc_init_array+0x2e>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000530:	4798      	blx	r3
 8000532:	3601      	adds	r6, #1
 8000534:	e7ee      	b.n	8000514 <__libc_init_array+0xc>
 8000536:	f855 3b04 	ldr.w	r3, [r5], #4
 800053a:	4798      	blx	r3
 800053c:	3601      	adds	r6, #1
 800053e:	e7f2      	b.n	8000526 <__libc_init_array+0x1e>
 8000540:	08000568 	.word	0x08000568
 8000544:	08000568 	.word	0x08000568
 8000548:	08000568 	.word	0x08000568
 800054c:	0800056c 	.word	0x0800056c

08000550 <_init>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr

0800055c <_fini>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr
