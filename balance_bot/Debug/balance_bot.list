
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002818  08002818  00003818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00003848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800284c  0800284c  0000384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002850  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000068  080028b8  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080028b8  000041c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c80  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b5  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000063d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ec  00000000  00000000  00006670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145bf  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c0d  00000000  00000000  0001ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d6b  00000000  00000000  0001da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f1c  00000000  00000000  0009f7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a06f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080027fc 	.word	0x080027fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080027fc 	.word	0x080027fc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <main>:
void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw);
void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading);


int main(void)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b09a      	sub	sp, #104	@ 0x68
 8000b54:	af02      	add	r7, sp, #8

	clock_config();
 8000b56:	f000 f963 	bl	8000e20 <clock_config>
	i2c1_config();
 8000b5a:	f000 f9ef 	bl	8000f3c <i2c1_config>
//	uart1_config(9600);
	motors_config();
 8000b5e:	f000 fc73 	bl	8001448 <motors_config>

	tim5_config();
 8000b62:	f000 fd3b 	bl	80015dc <tim5_config>


	while (!imu_config());
 8000b66:	bf00      	nop
 8000b68:	f000 fd60 	bl	800162c <imu_config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0fa      	beq.n	8000b68 <main+0x18>


	const float kp = 1.21;
 8000b72:	4ba5      	ldr	r3, [pc, #660]	@ (8000e08 <main+0x2b8>)
 8000b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
//	const float kd = 1.54;
	const float kd = 1.0;
 8000b76:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
	float multiplier = 1.0;
 8000b7c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000b80:	65fb      	str	r3, [r7, #92]	@ 0x5c

	const float max_error = 30;
 8000b82:	4ba2      	ldr	r3, [pc, #648]	@ (8000e0c <main+0x2bc>)
 8000b84:	647b      	str	r3, [r7, #68]	@ 0x44
	const float max_controller_out = 10;
 8000b86:	4ba2      	ldr	r3, [pc, #648]	@ (8000e10 <main+0x2c0>)
 8000b88:	643b      	str	r3, [r7, #64]	@ 0x40


	const float pitch_setpoint = 0;
 8000b8a:	f04f 0300 	mov.w	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	float last_err = 0;
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	65bb      	str	r3, [r7, #88]	@ 0x58

  while (1)
  {
	  TIM5->SR &= ~TIM_SR_UIF;			// clear update interrupt flag
 8000b96:	4b9f      	ldr	r3, [pc, #636]	@ (8000e14 <main+0x2c4>)
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	4a9e      	ldr	r2, [pc, #632]	@ (8000e14 <main+0x2c4>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6113      	str	r3, [r2, #16]

	  int16_t roll_raw, heading_raw, pitch_raw;
	  float roll, heading, pitch;
	  imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 8000ba2:	f107 0214 	add.w	r2, r7, #20
 8000ba6:	f107 0112 	add.w	r1, r7, #18
 8000baa:	f107 0316 	add.w	r3, r7, #22
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fda4 	bl	80016fc <imu_read_euler>
	  convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 8000bb4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000bb8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000bbc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000bc0:	f107 040c 	add.w	r4, r7, #12
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	4623      	mov	r3, r4
 8000bd0:	f000 fdc2 	bl	8001758 <convert_euler>

	  // pitch is one we care about
	  float pitch_err = pitch - pitch_setpoint;
 8000bd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bd8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	  // if bot tips over, turn off motors
	  if (fabs(pitch_err) > max_error) {
 8000be4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000be8:	eef0 7ae7 	vabs.f32	s15, s15
 8000bec:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	d504      	bpl.n	8000c04 <main+0xb4>

		  disable_leftmotor();
 8000bfa:	f000 fcbf 	bl	800157c <disable_leftmotor>
		  disable_rightmotor();
 8000bfe:	f000 fcdd 	bl	80015bc <disable_rightmotor>
 8000c02:	e7c8      	b.n	8000b96 <main+0x46>
		  continue;
	  }
	  else {

		  enable_leftmotor();
 8000c04:	f000 fcaa 	bl	800155c <enable_leftmotor>
		  enable_rightmotor();
 8000c08:	f000 fcc8 	bl	800159c <enable_rightmotor>
	  }

	  if (fabs(pitch_err) > 5.0) {
 8000c0c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c10:	eef0 7ae7 	vabs.f32	s15, s15
 8000c14:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c20:	dd26      	ble.n	8000c70 <main+0x120>

		  multiplier = 1.0 + 0.2 * (fabs(pitch_err) - 5.0);
 8000c22:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c26:	eef0 7ae7 	vabs.f32	s15, s15
 8000c2a:	ee17 0a90 	vmov	r0, s15
 8000c2e:	f7ff fc37 	bl	80004a0 <__aeabi_f2d>
 8000c32:	f04f 0200 	mov.w	r2, #0
 8000c36:	4b78      	ldr	r3, [pc, #480]	@ (8000e18 <main+0x2c8>)
 8000c38:	f7ff fad2 	bl	80001e0 <__aeabi_dsub>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4610      	mov	r0, r2
 8000c42:	4619      	mov	r1, r3
 8000c44:	a36e      	add	r3, pc, #440	@ (adr r3, 8000e00 <main+0x2b0>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f7ff fc81 	bl	8000550 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4610      	mov	r0, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	4b70      	ldr	r3, [pc, #448]	@ (8000e1c <main+0x2cc>)
 8000c5c:	f7ff fac2 	bl	80001e4 <__adddf3>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff ff22 	bl	8000ab0 <__aeabi_d2f>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  }


	  float controller_out = kp * pitch_err + kd * (pitch_err - last_err);
 8000c70:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000c74:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c7c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8000c80:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000c84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000c88:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8000c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c94:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  controller_out *= multiplier;
 8000c98:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000c9c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	  // use absolute value of controller to select pwm duty value
	  // direction of motors is determined by sign of controller_out
	  float controller_abs = fabs(controller_out);
 8000ca8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cac:	eef0 7ae7 	vabs.f32	s15, s15
 8000cb0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	  // limit the top of the controller
	  if (controller_abs > max_controller_out)
 8000cb4:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000cb8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	dd01      	ble.n	8000cca <main+0x17a>
		  controller_abs = max_controller_out;
 8000cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000cc8:	657b      	str	r3, [r7, #84]	@ 0x54


	  // weight large errors more than smaller errors
	  const float power = 1;
 8000cca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
	  float sq_controller = pow(controller_abs, power);
 8000cd0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000cd2:	f7ff fbe5 	bl	80004a0 <__aeabi_f2d>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	460d      	mov	r5, r1
 8000cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000cdc:	f7ff fbe0 	bl	80004a0 <__aeabi_f2d>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	ec43 2b11 	vmov	d1, r2, r3
 8000ce8:	ec45 4b10 	vmov	d0, r4, r5
 8000cec:	f000 fe28 	bl	8001940 <pow>
 8000cf0:	ec53 2b10 	vmov	r2, r3, d0
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f7ff feda 	bl	8000ab0 <__aeabi_d2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  const float max_in = pow(max_controller_out, power);
 8000d00:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000d02:	f7ff fbcd 	bl	80004a0 <__aeabi_f2d>
 8000d06:	4604      	mov	r4, r0
 8000d08:	460d      	mov	r5, r1
 8000d0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000d0c:	f7ff fbc8 	bl	80004a0 <__aeabi_f2d>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	ec43 2b11 	vmov	d1, r2, r3
 8000d18:	ec45 4b10 	vmov	d0, r4, r5
 8000d1c:	f000 fe10 	bl	8001940 <pow>
 8000d20:	ec53 2b10 	vmov	r2, r3, d0
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff fec2 	bl	8000ab0 <__aeabi_d2f>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  // map function: output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
	  // input: [0, 10]
	  // output: [900, 2000]
	  // motors probably won't ever need to run at full speed
	  // motors begin to spin at about 900
	  uint16_t leftmotor_max_pwm = 2047;
 8000d30:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d34:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  uint16_t leftmotor_min_pwm = 750;
 8000d36:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8000d3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  uint16_t rightmotor_max_pwm = 2047;
 8000d3c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d40:	847b      	strh	r3, [r7, #34]	@ 0x22
	  uint16_t rightmotor_min_pwm = 900;
 8000d42:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000d46:	843b      	strh	r3, [r7, #32]
	  uint32_t left_pwm_val = (uint32_t) (leftmotor_min_pwm + ( ((float)(leftmotor_max_pwm - leftmotor_min_pwm)) / (max_in - 0)) * (sq_controller - 0));
 8000d48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d52:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000d54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000d60:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000d64:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000d68:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d78:	ee17 3a90 	vmov	r3, s15
 8000d7c:	61fb      	str	r3, [r7, #28]
	  uint32_t right_pwm_val = (uint32_t) (rightmotor_min_pwm + ( ((float)(rightmotor_max_pwm - rightmotor_min_pwm)) / (max_in - 0)) * (sq_controller - 0));
 8000d7e:	8c3b      	ldrh	r3, [r7, #32]
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d88:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000d8a:	8c3b      	ldrh	r3, [r7, #32]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000d96:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000d9a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000d9e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dae:	ee17 3a90 	vmov	r3, s15
 8000db2:	61bb      	str	r3, [r7, #24]

	  uint8_t motor_dir;

	  if (controller_out > 0)		motor_dir = MOTOR_BACKWD;
 8000db4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	dd03      	ble.n	8000dca <main+0x27a>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8000dc8:	e002      	b.n	8000dd0 <main+0x280>
	  else							motor_dir = MOTOR_FWD;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53


	  set_pwm_leftmotor(motor_dir, left_pwm_val);
 8000dd0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000dd4:	69f9      	ldr	r1, [r7, #28]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fb70 	bl	80014bc <set_pwm_leftmotor>
	  set_pwm_rightmotor(motor_dir, right_pwm_val);
 8000ddc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000de0:	69b9      	ldr	r1, [r7, #24]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fb92 	bl	800150c <set_pwm_rightmotor>

	  last_err = pitch_err;
 8000de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dea:	65bb      	str	r3, [r7, #88]	@ 0x58

	  while (!(TIM5->SR & (TIM_SR_UIF)));		// wait for next fusion data
 8000dec:	bf00      	nop
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <main+0x2c4>)
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f9      	beq.n	8000dee <main+0x29e>
  {
 8000dfa:	e6cc      	b.n	8000b96 <main+0x46>
 8000dfc:	f3af 8000 	nop.w
 8000e00:	9999999a 	.word	0x9999999a
 8000e04:	3fc99999 	.word	0x3fc99999
 8000e08:	3f9ae148 	.word	0x3f9ae148
 8000e0c:	41f00000 	.word	0x41f00000
 8000e10:	41200000 	.word	0x41200000
 8000e14:	40000c00 	.word	0x40000c00
 8000e18:	40140000 	.word	0x40140000
 8000e1c:	3ff00000 	.word	0x3ff00000

08000e20 <clock_config>:

  }
}

void clock_config() {
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000e26:	4b42      	ldr	r3, [pc, #264]	@ (8000f30 <clock_config+0x110>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a41      	ldr	r2, [pc, #260]	@ (8000f30 <clock_config+0x110>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000e32:	bf00      	nop
 8000e34:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <clock_config+0x110>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f9      	beq.n	8000e34 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000e40:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <clock_config+0x110>)
 8000e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	@ (8000f34 <clock_config+0x114>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a39      	ldr	r2, [pc, #228]	@ (8000f34 <clock_config+0x114>)
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e52:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000e54:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <clock_config+0x114>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a36      	ldr	r2, [pc, #216]	@ (8000f34 <clock_config+0x114>)
 8000e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e5e:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000e60:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e64:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000e6e:	4a32      	ldr	r2, [pc, #200]	@ (8000f38 <clock_config+0x118>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e7e:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e86:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e8e:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000e90:	4a27      	ldr	r2, [pc, #156]	@ (8000f30 <clock_config+0x110>)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <clock_config+0x110>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000ea2:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eaa:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000eb2:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ebe:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000ec6:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ece:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000ed8:	4a15      	ldr	r2, [pc, #84]	@ (8000f30 <clock_config+0x110>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <clock_config+0x110>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <clock_config+0x110>)
 8000ee4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee8:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000eea:	bf00      	nop
 8000eec:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <clock_config+0x110>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f9      	beq.n	8000eec <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <clock_config+0x110>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <clock_config+0x110>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000f14:	bf00      	nop
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <clock_config+0x110>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f9      	beq.n	8000f16 <clock_config+0xf6>
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <i2c1_config>:


void i2c1_config() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

	// PB8 is SCL
	// PB9 is SDA
	// enable I2C clock before configuring pins
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;			// enable I2C1 clock
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <i2c1_config+0x8c>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a20      	ldr	r2, [pc, #128]	@ (8000fc8 <i2c1_config+0x8c>)
 8000f46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;		// enable GPIO clock
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <i2c1_config+0x8c>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc8 <i2c1_config+0x8c>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30

	// before configuring SCL and SDA pins for AF, make sure bus is not busy by clocking out extra
	// data to slave devices
	i2c1_release();
 8000f58:	f000 f9b0 	bl	80012bc <i2c1_release>


	// set AF mode for SCL and SDA
	GPIOB->MODER |= GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <i2c1_config+0x90>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <i2c1_config+0x90>)
 8000f62:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000f66:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODE9_0 | GPIO_MODER_MODE8_0);
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <i2c1_config+0x90>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <i2c1_config+0x90>)
 8000f6e:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 8000f72:	6013      	str	r3, [r2, #0]

	// set open-drain for both lines
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <i2c1_config+0x90>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <i2c1_config+0x90>)
 8000f7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000f7e:	6053      	str	r3, [r2, #4]

	// enable pull ups (already on board)

	// set max output speed for both
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9 | GPIO_OSPEEDER_OSPEEDR8;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <i2c1_config+0x90>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <i2c1_config+0x90>)
 8000f86:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000f8a:	6093      	str	r3, [r2, #8]

	// AF04 for PB8 and PB9 to select I2C1_SCL and I2C1_SDA
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_2 | GPIO_AFRH_AFRH1_2;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <i2c1_config+0x90>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <i2c1_config+0x90>)
 8000f92:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000f96:	6253      	str	r3, [r2, #36]	@ 0x24
	// 2. Program peripheral input clock to generate correct timing
	// 3. Configure clock control registers
	// 4. Configure rise time
	// 5. Enable peripheral
	// 6. Start bit
	I2C1->CR1 = 0;		// disable peripheral
 8000f98:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <i2c1_config+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	i2c1_sw_rst();		// reset I2C to clear busy bit
 8000f9e:	f000 f819 	bl	8000fd4 <i2c1_sw_rst>
	I2C1->CR2 = 42;		// configure peripheral input clock freq to 42MHz (APB1 clock)
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <i2c1_config+0x94>)
 8000fa4:	222a      	movs	r2, #42	@ 0x2a
 8000fa6:	605a      	str	r2, [r3, #4]
	// tLOW = 2 * tHIGH
	// 300kHz = 1 / (tLOW + tHIGH) = 1 / (3 * tHIGH)
	// tHIGH = 1.11us
	// tHIGH = CCR * tPCLK
	// CCR = 46.667
	I2C1->CCR = I2C_CCR_FS | 47;	// fast mode and set freq to 300kHz
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <i2c1_config+0x94>)
 8000faa:	f248 022f 	movw	r2, #32815	@ 0x802f
 8000fae:	61da      	str	r2, [r3, #28]
	// max SCL tRISE is 300ns
	// tPCLK = 23.8ns
	// tRISE / tPCLK + 1 = 12.6 + 1 = 13.6
	I2C1->TRISE = 13;
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <i2c1_config+0x94>)
 8000fb2:	220d      	movs	r2, #13
 8000fb4:	621a      	str	r2, [r3, #32]

	I2C1->CR1 |= I2C_CR1_PE;	// enable peripheral
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <i2c1_config+0x94>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <i2c1_config+0x94>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40005400 	.word	0x40005400

08000fd4 <i2c1_sw_rst>:


void i2c1_sw_rst() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

	// reset I2C1
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <i2c1_sw_rst+0x28>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <i2c1_sw_rst+0x28>)
 8000fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fe2:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <i2c1_sw_rst+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <i2c1_sw_rst+0x28>)
 8000fea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40005400 	.word	0x40005400

08001000 <i2c1_writebyte>:


void i2c1_writebyte(uint8_t slave_addr, uint8_t reg_addr, uint8_t byte) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	460b      	mov	r3, r1
 800100c:	71bb      	strb	r3, [r7, #6]
 800100e:	4613      	mov	r3, r2
 8001010:	717b      	strb	r3, [r7, #5]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8001012:	bf00      	nop
 8001014:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <i2c1_writebyte+0x80>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f9      	bne.n	8001014 <i2c1_writebyte+0x14>

	i2c1_start();
 8001020:	f000 f904 	bl	800122c <i2c1_start>
	I2C1->DR = slave_addr;
 8001024:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <i2c1_writebyte+0x80>)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800102a:	bf00      	nop
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <i2c1_writebyte+0x80>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f9      	beq.n	800102c <i2c1_writebyte+0x2c>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <i2c1_writebyte+0x80>)
 800103a:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 800103c:	bf00      	nop
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <i2c1_writebyte+0x80>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f9      	beq.n	800103e <i2c1_writebyte+0x3e>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 800104a:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <i2c1_writebyte+0x80>)
 800104c:	79bb      	ldrb	r3, [r7, #6]
 800104e:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001050:	bf00      	nop
 8001052:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <i2c1_writebyte+0x80>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f9      	beq.n	8001052 <i2c1_writebyte+0x52>
	I2C1->DR = byte;
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <i2c1_writebyte+0x80>)
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 8001064:	bf00      	nop
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <i2c1_writebyte+0x80>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <i2c1_writebyte+0x66>
	i2c1_request_stop();
 8001072:	f000 f8f3 	bl	800125c <i2c1_request_stop>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40005400 	.word	0x40005400

08001084 <i2c1_readbyte>:


uint8_t i2c1_readbyte(uint8_t slave_addr, uint8_t reg_addr) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8001094:	bf00      	nop
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <i2c1_readbyte+0xa4>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <i2c1_readbyte+0x12>

	i2c1_start();
 80010a2:	f000 f8c3 	bl	800122c <i2c1_start>
	I2C1->DR = slave_addr;
 80010a6:	4a20      	ldr	r2, [pc, #128]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80010ac:	bf00      	nop
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f9      	beq.n	80010ae <i2c1_readbyte+0x2a>
	(void)I2C1->SR2;						// dummy read to clear status bit
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010bc:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80010be:	bf00      	nop
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f9      	beq.n	80010c0 <i2c1_readbyte+0x3c>
	I2C1->DR = reg_addr;					// set pointer on BNO055
 80010cc:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 80010d2:	bf00      	nop
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f9      	beq.n	80010d4 <i2c1_readbyte+0x50>

	// For single byte reads, pg 482 of reference manual "Closing the communication"
	i2c1_start();
 80010e0:	f000 f8a4 	bl	800122c <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010ee:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80010f0:	bf00      	nop
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <i2c1_readbyte+0xa4>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f9      	beq.n	80010f2 <i2c1_readbyte+0x6e>
	i2c1_nack();
 80010fe:	f000 f8cd 	bl	800129c <i2c1_nack>
	(void)I2C1->SR2;						// dummy read to clear status bit
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <i2c1_readbyte+0xa4>)
 8001104:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 8001106:	f000 f8a9 	bl	800125c <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 800110a:	bf00      	nop
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <i2c1_readbyte+0xa4>)
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f9      	beq.n	800110c <i2c1_readbyte+0x88>
	return I2C1->DR;
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <i2c1_readbyte+0xa4>)
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40005400 	.word	0x40005400

0800112c <i2c1_readburst>:


void i2c1_readburst(uint8_t slave_addr, uint8_t reg_addr, uint8_t len, uint8_t * bytes) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	460b      	mov	r3, r1
 800113a:	71bb      	strb	r3, [r7, #6]
 800113c:	4613      	mov	r3, r2
 800113e:	717b      	strb	r3, [r7, #5]

	if (len == 0)
 8001140:	797b      	ldrb	r3, [r7, #5]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d06b      	beq.n	800121e <i2c1_readburst+0xf2>
		return;

	while (I2C1->SR2 & I2C_SR2_BUSY);
 8001146:	bf00      	nop
 8001148:	4b37      	ldr	r3, [pc, #220]	@ (8001228 <i2c1_readburst+0xfc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f9      	bne.n	8001148 <i2c1_readburst+0x1c>

	i2c1_start();
 8001154:	f000 f86a 	bl	800122c <i2c1_start>
	I2C1->DR = slave_addr;
 8001158:	4a33      	ldr	r2, [pc, #204]	@ (8001228 <i2c1_readburst+0xfc>)
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800115e:	bf00      	nop
 8001160:	4b31      	ldr	r3, [pc, #196]	@ (8001228 <i2c1_readburst+0xfc>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f9      	beq.n	8001160 <i2c1_readburst+0x34>
	(void)I2C1->SR2;						// dummy read to clear status bit
 800116c:	4b2e      	ldr	r3, [pc, #184]	@ (8001228 <i2c1_readburst+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001170:	bf00      	nop
 8001172:	4b2d      	ldr	r3, [pc, #180]	@ (8001228 <i2c1_readburst+0xfc>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f9      	beq.n	8001172 <i2c1_readburst+0x46>
	I2C1->DR = reg_addr;					// set first pointer on BNO055
 800117e:	4a2a      	ldr	r2, [pc, #168]	@ (8001228 <i2c1_readburst+0xfc>)
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));		// data register needs to be empty
 8001184:	bf00      	nop
 8001186:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <i2c1_readburst+0xfc>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <i2c1_readburst+0x5a>

	i2c1_start();
 8001192:	f000 f84b 	bl	800122c <i2c1_start>
	I2C1->DR = slave_addr | 0x01;			// read mode
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <i2c1_readburst+0xfc>)
 80011a0:	611a      	str	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80011a2:	bf00      	nop
 80011a4:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <i2c1_readburst+0xfc>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f9      	beq.n	80011a4 <i2c1_readburst+0x78>

	// acknowledge next byte if burst >1 byte
	if (len != 1)
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <i2c1_readburst+0x8e>
		(void)I2C1->SR2;
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <i2c1_readburst+0xfc>)
 80011b8:	699b      	ldr	r3, [r3, #24]

	for (uint8_t i = 0; i < len - 1; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e013      	b.n	80011e8 <i2c1_readburst+0xbc>

		i2c1_ack();
 80011c0:	f000 f85c 	bl	800127c <i2c1_ack>
		while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 80011c4:	bf00      	nop
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <i2c1_readburst+0xfc>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f9      	beq.n	80011c6 <i2c1_readburst+0x9a>
		*bytes = I2C1->DR;					// store byte
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <i2c1_readburst+0xfc>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	701a      	strb	r2, [r3, #0]
		bytes++;							// move pointer
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < len - 1; i++) {
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	3301      	adds	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbe6      	blt.n	80011c0 <i2c1_readburst+0x94>
	}

	i2c1_nack();								// clear ACK bit just after reading second last data byte
 80011f2:	f000 f853 	bl	800129c <i2c1_nack>
	if (len == 1)
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <i2c1_readburst+0xd4>
		(void)I2C1->SR2;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <i2c1_readburst+0xfc>)
 80011fe:	699b      	ldr	r3, [r3, #24]
	i2c1_request_stop();
 8001200:	f000 f82c 	bl	800125c <i2c1_request_stop>
	while (!(I2C1->SR1 & I2C_SR1_RXNE));	// wait for full data register
 8001204:	bf00      	nop
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <i2c1_readburst+0xfc>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f9      	beq.n	8001206 <i2c1_readburst+0xda>
	*bytes = I2C1->DR;
 8001212:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <i2c1_readburst+0xfc>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	e000      	b.n	8001220 <i2c1_readburst+0xf4>
		return;
 800121e:	bf00      	nop
}
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40005400 	.word	0x40005400

0800122c <i2c1_start>:


void i2c1_start() {
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <i2c1_start+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <i2c1_start+0x2c>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123a:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));		// wait for start bit generation
 800123c:	bf00      	nop
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <i2c1_start+0x2c>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f9      	beq.n	800123e <i2c1_start+0x12>
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400

0800125c <i2c1_request_stop>:

void i2c1_request_stop() {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <i2c1_request_stop+0x1c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <i2c1_request_stop+0x1c>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40005400 	.word	0x40005400

0800127c <i2c1_ack>:

void i2c1_ack() {
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_ACK;
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <i2c1_ack+0x1c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <i2c1_ack+0x1c>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40005400 	.word	0x40005400

0800129c <i2c1_nack>:

void i2c1_nack() {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

	I2C1->CR1 &= ~I2C_CR1_ACK;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <i2c1_nack+0x1c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <i2c1_nack+0x1c>)
 80012a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40005400 	.word	0x40005400

080012bc <i2c1_release>:


void i2c1_release() {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0

	// set SCL and SDA lines as outputs
	GPIOB->MODER |= GPIO_MODER_MODER9_0 | GPIO_MODER_MODER8_0;
 80012c2:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <i2c1_release+0xa4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a26      	ldr	r2, [pc, #152]	@ (8001360 <i2c1_release+0xa4>)
 80012c8:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80012cc:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1);
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <i2c1_release+0xa4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <i2c1_release+0xa4>)
 80012d4:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 80012d8:	6013      	str	r3, [r2, #0]

	// output open drain
	GPIOB->OTYPER |= GPIO_OTYPER_OT9 | GPIO_OTYPER_OT8;
 80012da:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <i2c1_release+0xa4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a20      	ldr	r2, [pc, #128]	@ (8001360 <i2c1_release+0xa4>)
 80012e0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80012e4:	6053      	str	r3, [r2, #4]

	// set SDA line high, so that after slave releases the SDA and listens for ACK/NACK, it will get NACK
	GPIOB->ODR |= GPIO_ODR_ODR_9;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <i2c1_release+0xa4>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <i2c1_release+0xa4>)
 80012ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012f0:	6153      	str	r3, [r2, #20]

	// generate 10 clock pulses on SCL line
	for (int i = 0; i < 10; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e024      	b.n	8001342 <i2c1_release+0x86>

		GPIOB->ODR |= GPIO_ODR_ODR_8;
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <i2c1_release+0xa4>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <i2c1_release+0xa4>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001302:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	e003      	b.n	8001312 <i2c1_release+0x56>
			__NOP();
 800130a:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	3301      	adds	r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001318:	dbf7      	blt.n	800130a <i2c1_release+0x4e>

		GPIOB->ODR &= ~GPIO_ODR_ODR_8;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <i2c1_release+0xa4>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a10      	ldr	r2, [pc, #64]	@ (8001360 <i2c1_release+0xa4>)
 8001320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001324:	6153      	str	r3, [r2, #20]
		for (int j = 0; j < 1000; j++)
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e003      	b.n	8001334 <i2c1_release+0x78>
			__NOP();
 800132c:	bf00      	nop
		for (int j = 0; j < 1000; j++)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3301      	adds	r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800133a:	dbf7      	blt.n	800132c <i2c1_release+0x70>
	for (int i = 0; i < 10; i++) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3301      	adds	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b09      	cmp	r3, #9
 8001346:	ddd7      	ble.n	80012f8 <i2c1_release+0x3c>
	}

	// set SCL high, line should be pulled high when I2C is idle
	GPIOB->ODR |= GPIO_ODR_ODR_8;
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <i2c1_release+0xa4>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <i2c1_release+0xa4>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001352:	6153      	str	r3, [r2, #20]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40020400 	.word	0x40020400

08001364 <tim2_config>:
	while (str[i] != '\0')
		uart1_writebyte(str[i++]);
}


void tim2_config() {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	// PA0 is TIM2_CH1 --> A0
	// PA1 is TIM2_CH2 --> A1
	// TIM2 is a 32 bit counter
	// must set AF for pins

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			// enable TIM2 clock
 8001368:	4b35      	ldr	r3, [pc, #212]	@ (8001440 <tim2_config+0xdc>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	4a34      	ldr	r2, [pc, #208]	@ (8001440 <tim2_config+0xdc>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;		// enable GPIOA clock
 8001374:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <tim2_config+0xdc>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a31      	ldr	r2, [pc, #196]	@ (8001440 <tim2_config+0xdc>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 8001380:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <tim2_config+0xe0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a2f      	ldr	r2, [pc, #188]	@ (8001444 <tim2_config+0xe0>)
 8001386:	f043 030a 	orr.w	r3, r3, #10
 800138a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <tim2_config+0xe0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a2c      	ldr	r2, [pc, #176]	@ (8001444 <tim2_config+0xe0>)
 8001392:	f023 0305 	bic.w	r3, r3, #5
 8001396:	6013      	str	r3, [r2, #0]

	// alternate function mode 1
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 8001398:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <tim2_config+0xe0>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <tim2_config+0xe0>)
 800139e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0 | GPIO_AFRL_AFRL1_0;
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <tim2_config+0xe0>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <tim2_config+0xe0>)
 80013aa:	f043 0311 	orr.w	r3, r3, #17
 80013ae:	6213      	str	r3, [r2, #32]

	TIM2->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
	TIM2->PSC = 0;		// /1 prescaler
 80013b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM2->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;		// configure TIM2_CH1 (PA0) to PWM mode
 80013c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c4:	2260      	movs	r2, #96	@ 0x60
 80013c6:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;		// configure TIM2_CH2 (PA1) to PWM mode
 80013c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80013d6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE;		// output compare 1 and 2 preload enable
 80013d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6193      	str	r3, [r2, #24]

	TIM2->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;		// active high, output channels enabled
 80013ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f0:	2211      	movs	r2, #17
 80013f2:	621a      	str	r2, [r3, #32]


	TIM2->ARR = 2048;		// output frequency approx 20.5kHz
 80013f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = 0;			// pwm duty cycle of 0
 80013fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001402:	2200      	movs	r2, #0
 8001404:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8001406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800140a:	2200      	movs	r2, #0
 800140c:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 800140e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	601a      	str	r2, [r3, #0]

	TIM2->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 8001416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800141a:	2201      	movs	r2, #1
 800141c:	615a      	str	r2, [r3, #20]

	TIM2->CNT = 0;				// reset counter
 800141e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;	// enable counter
 8001426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000

08001448 <motors_config>:


void motors_config() {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

	tim2_config();
 800144c:	f7ff ff8a 	bl	8001364 <tim2_config>
	// left motor enable is D2
	// right motor enable is D3
	// D2 is PA10
	// D3 is PB3

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN |
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <motors_config+0x68>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	4a16      	ldr	r2, [pc, #88]	@ (80014b0 <motors_config+0x68>)
 8001456:	f043 0303 	orr.w	r3, r3, #3
 800145a:	6313      	str	r3, [r2, #48]	@ 0x30
					RCC_AHB1ENR_GPIOBEN;

	// configure D2 and D3 as outputs
	GPIOA->MODER |= GPIO_MODER_MODER10_0;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <motors_config+0x6c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <motors_config+0x6c>)
 8001462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001466:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER10_1;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <motors_config+0x6c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a11      	ldr	r2, [pc, #68]	@ (80014b4 <motors_config+0x6c>)
 800146e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001472:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= GPIO_MODER_MODER3_0;
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <motors_config+0x70>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <motors_config+0x70>)
 800147a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800147e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER3_1;
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <motors_config+0x70>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <motors_config+0x70>)
 8001486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800148a:	6013      	str	r3, [r2, #0]
	// right motor direction is D5
	// D4 is PB5
	// D5 is PB4

	// configure D4 and D5 as outputs
	GPIOB->MODER |= GPIO_MODER_MODER4_0 |
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <motors_config+0x70>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <motors_config+0x70>)
 8001492:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001496:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODER5_0;
	GPIOB->MODER &= ~(GPIO_MODER_MODER4_1 |
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <motors_config+0x70>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <motors_config+0x70>)
 800149e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80014a2:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODER5_1);

	enable_leftmotor();
 80014a4:	f000 f85a 	bl	800155c <enable_leftmotor>
	enable_rightmotor();
 80014a8:	f000 f878 	bl	800159c <enable_rightmotor>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <set_pwm_leftmotor>:


void set_pwm_leftmotor(uint8_t direction, uint32_t pwm) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_adjusted;

	if (direction == MOTOR_FWD) {
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10a      	bne.n	80014e4 <set_pwm_leftmotor+0x28>

		GPIOB->ODR |= GPIO_ODR_ODR_5;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <set_pwm_leftmotor+0x4c>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <set_pwm_leftmotor+0x4c>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6153      	str	r3, [r2, #20]
		pwm_adjusted = 2048 - pwm;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e007      	b.n	80014f4 <set_pwm_leftmotor+0x38>

	} else {

		GPIOB->ODR &= ~GPIO_ODR_ODR_5;
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <set_pwm_leftmotor+0x4c>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <set_pwm_leftmotor+0x4c>)
 80014ea:	f023 0320 	bic.w	r3, r3, #32
 80014ee:	6153      	str	r3, [r2, #20]
		pwm_adjusted = pwm;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR1 = pwm_adjusted;
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40020400 	.word	0x40020400

0800150c <set_pwm_rightmotor>:


void set_pwm_rightmotor(uint8_t direction, uint32_t pwm) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]

	uint32_t pwm_adjusted;


	if (direction == MOTOR_FWD) {
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10a      	bne.n	8001534 <set_pwm_rightmotor+0x28>

		GPIOB->ODR |= GPIO_ODR_ODR_4;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <set_pwm_rightmotor+0x4c>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <set_pwm_rightmotor+0x4c>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6153      	str	r3, [r2, #20]
		pwm_adjusted = 2048 - pwm;			// invert duty cycle
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	e007      	b.n	8001544 <set_pwm_rightmotor+0x38>

	} else {

		GPIOB->ODR &= ~GPIO_ODR_ODR_4;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <set_pwm_rightmotor+0x4c>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4a07      	ldr	r2, [pc, #28]	@ (8001558 <set_pwm_rightmotor+0x4c>)
 800153a:	f023 0310 	bic.w	r3, r3, #16
 800153e:	6153      	str	r3, [r2, #20]
		pwm_adjusted = pwm;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	60fb      	str	r3, [r7, #12]
	}

	TIM2->CCR2 = pwm_adjusted;
 8001544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40020400 	.word	0x40020400

0800155c <enable_leftmotor>:


void enable_leftmotor() {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

	// turn on D2
	GPIOA->ODR |= GPIO_ODR_OD10;
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <enable_leftmotor+0x1c>)
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <enable_leftmotor+0x1c>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156a:	6153      	str	r3, [r2, #20]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40020000 	.word	0x40020000

0800157c <disable_leftmotor>:


void disable_leftmotor() {
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

	// turn off D2
	GPIOA->ODR &= ~GPIO_ODR_OD10;
 8001580:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <disable_leftmotor+0x1c>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <disable_leftmotor+0x1c>)
 8001586:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800158a:	6153      	str	r3, [r2, #20]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40020000 	.word	0x40020000

0800159c <enable_rightmotor>:


void enable_rightmotor() {
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

	// turn on D2
	GPIOB->ODR |= GPIO_ODR_OD3;
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <enable_rightmotor+0x1c>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <enable_rightmotor+0x1c>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6153      	str	r3, [r2, #20]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40020400 	.word	0x40020400

080015bc <disable_rightmotor>:


void disable_rightmotor() {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

	// turn off D3
	GPIOB->ODR &= ~GPIO_ODR_OD3;
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <disable_rightmotor+0x1c>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <disable_rightmotor+0x1c>)
 80015c6:	f023 0308 	bic.w	r3, r3, #8
 80015ca:	6153      	str	r3, [r2, #20]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40020400 	.word	0x40020400

080015dc <tim5_config>:


void tim5_config() {
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		// enable TIM5 clock
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <tim5_config+0x44>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <tim5_config+0x44>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 0;				// /1 prescaler
 80015ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <tim5_config+0x48>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 420000;			// 42MHz clock on APB1, generates a timer overflow at 100Hz
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <tim5_config+0x48>)
 80015f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <tim5_config+0x4c>)
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->CNT = 0;				// reset counter
 80015f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <tim5_config+0x48>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;	// update registers
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <tim5_config+0x48>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <tim5_config+0x48>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;	// enable counter
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <tim5_config+0x48>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <tim5_config+0x48>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800
 8001624:	40000c00 	.word	0x40000c00
 8001628:	000668a0 	.word	0x000668a0

0800162c <imu_config>:


uint8_t imu_config() {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0


	while (!imu_test());		// read chip id
 8001632:	bf00      	nop
 8001634:	f000 f854 	bl	80016e0 <imu_test>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0fa      	beq.n	8001634 <imu_config+0x8>

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_reg = 0x3d;
 800163e:	233d      	movs	r3, #61	@ 0x3d
 8001640:	73fb      	strb	r3, [r7, #15]
	const uint8_t opr_mode_config = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	73bb      	strb	r3, [r7, #14]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_config);
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4619      	mov	r1, r3
 800164c:	2050      	movs	r0, #80	@ 0x50
 800164e:	f7ff fcd7 	bl	8001000 <i2c1_writebyte>

	// delay >19 ms
	for (volatile int i = 0; i < 2000000; i++);
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	e002      	b.n	800165e <imu_config+0x32>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3301      	adds	r3, #1
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1e      	ldr	r2, [pc, #120]	@ (80016dc <imu_config+0xb0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	ddf8      	ble.n	8001658 <imu_config+0x2c>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 8001666:	233b      	movs	r3, #59	@ 0x3b
 8001668:	737b      	strb	r3, [r7, #13]
	i2c1_writebyte(IMU_ADDR, unit_sel_reg, 0x80);
 800166a:	7b7b      	ldrb	r3, [r7, #13]
 800166c:	2280      	movs	r2, #128	@ 0x80
 800166e:	4619      	mov	r1, r3
 8001670:	2050      	movs	r0, #80	@ 0x50
 8001672:	f7ff fcc5 	bl	8001000 <i2c1_writebyte>

	// for current setup, placement P3 is used (from BNO055 datasheet)
	// thus, AXIS_REMAP = 0x21 and AXIS_SIGN = 0x02
	const uint8_t axis_map_config_reg = 0x41;
 8001676:	2341      	movs	r3, #65	@ 0x41
 8001678:	733b      	strb	r3, [r7, #12]
	const uint8_t axis_map_sign_reg = 0x42;
 800167a:	2342      	movs	r3, #66	@ 0x42
 800167c:	72fb      	strb	r3, [r7, #11]
	i2c1_writebyte(IMU_ADDR, axis_map_config_reg, 0x21);
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	2221      	movs	r2, #33	@ 0x21
 8001682:	4619      	mov	r1, r3
 8001684:	2050      	movs	r0, #80	@ 0x50
 8001686:	f7ff fcbb 	bl	8001000 <i2c1_writebyte>
	i2c1_writebyte(IMU_ADDR, axis_map_sign_reg, 0x02);
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	2202      	movs	r2, #2
 800168e:	4619      	mov	r1, r3
 8001690:	2050      	movs	r0, #80	@ 0x50
 8001692:	f7ff fcb5 	bl	8001000 <i2c1_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_fusion = 0x08;
 8001696:	2308      	movs	r3, #8
 8001698:	72bb      	strb	r3, [r7, #10]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_fusion);
 800169a:	7aba      	ldrb	r2, [r7, #10]
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	4619      	mov	r1, r3
 80016a0:	2050      	movs	r0, #80	@ 0x50
 80016a2:	f7ff fcad 	bl	8001000 <i2c1_writebyte>

	// delay >7 ms
	for (volatile int i = 0; i < 2000000; i++);
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	e002      	b.n	80016b2 <imu_config+0x86>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4a09      	ldr	r2, [pc, #36]	@ (80016dc <imu_config+0xb0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	ddf8      	ble.n	80016ac <imu_config+0x80>

	// check POST register ST_RESULT
	// returns 1 if all sensors are working
	return ((i2c1_readbyte(IMU_ADDR, IMU_ST_RESULT_REG) & 0x0f) == 0x0f) ? 1 : 0;
 80016ba:	2136      	movs	r1, #54	@ 0x36
 80016bc:	2050      	movs	r0, #80	@ 0x50
 80016be:	f7ff fce1 	bl	8001084 <i2c1_readbyte>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	001e847f 	.word	0x001e847f

080016e0 <imu_test>:


uint8_t imu_test() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0

	// returns 1 if correct chip id is read
	return (i2c1_readbyte(IMU_ADDR, IMU_WHO_AM_I_REG) == 0xa0) ? 1 : 0;
 80016e4:	2100      	movs	r1, #0
 80016e6:	2050      	movs	r0, #80	@ 0x50
 80016e8:	f7ff fccc 	bl	8001084 <i2c1_readbyte>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}

080016fc <imu_read_euler>:


void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]

	uint8_t raw_euler[6];			// 6 bytes total for euler angles
	const uint8_t start_addr = 0x1a;		// starting byte is heading LSB
 8001708:	231a      	movs	r3, #26
 800170a:	75fb      	strb	r3, [r7, #23]
	i2c1_readburst(IMU_ADDR, start_addr, 6, raw_euler);		// read 6 consecutive bytes
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	7df9      	ldrb	r1, [r7, #23]
 8001712:	2206      	movs	r2, #6
 8001714:	2050      	movs	r0, #80	@ 0x50
 8001716:	f7ff fd09 	bl	800112c <i2c1_readburst>
	*heading_raw = raw_euler[0] | (raw_euler[1] << 8);
 800171a:	7c3b      	ldrb	r3, [r7, #16]
 800171c:	b21a      	sxth	r2, r3
 800171e:	7c7b      	ldrb	r3, [r7, #17]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21a      	sxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	801a      	strh	r2, [r3, #0]
	*roll_raw = raw_euler[2] | (raw_euler[3] << 8);
 800172c:	7cbb      	ldrb	r3, [r7, #18]
 800172e:	b21a      	sxth	r2, r3
 8001730:	7cfb      	ldrb	r3, [r7, #19]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21b      	sxth	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	b21a      	sxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	801a      	strh	r2, [r3, #0]
	*pitch_raw = raw_euler[4] | (raw_euler[5] << 8);
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	b21a      	sxth	r2, r3
 8001742:	7d7b      	ldrb	r3, [r7, #21]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21b      	sxth	r3, r3
 8001748:	4313      	orrs	r3, r2
 800174a:	b21a      	sxth	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	801a      	strh	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <convert_euler>:


void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	4603      	mov	r3, r0
 8001762:	81fb      	strh	r3, [r7, #14]
 8001764:	460b      	mov	r3, r1
 8001766:	81bb      	strh	r3, [r7, #12]
 8001768:	4613      	mov	r3, r2
 800176a:	817b      	strh	r3, [r7, #10]

	*roll = roll_raw / 16.0;		// 1 degree = 16 LSB
 800176c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe83 	bl	800047c <__aeabi_i2d>
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <convert_euler+0x90>)
 800177c:	f7ff f812 	bl	80007a4 <__aeabi_ddiv>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff f992 	bl	8000ab0 <__aeabi_d2f>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
	*pitch = pitch_raw / 16.0;
 8001792:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe70 	bl	800047c <__aeabi_i2d>
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <convert_euler+0x90>)
 80017a2:	f7fe ffff 	bl	80007a4 <__aeabi_ddiv>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f97f 	bl	8000ab0 <__aeabi_d2f>
 80017b2:	4602      	mov	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	601a      	str	r2, [r3, #0]
	*heading = heading_raw / 16.0;
 80017b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe5d 	bl	800047c <__aeabi_i2d>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <convert_euler+0x90>)
 80017c8:	f7fe ffec 	bl	80007a4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f96c 	bl	8000ab0 <__aeabi_d2f>
 80017d8:	4602      	mov	r2, r0
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40300000 	.word	0x40300000

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <NMI_Handler+0x4>

080017f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <MemManage_Handler+0x4>

08001804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <UsageFault_Handler+0x4>

08001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f000 f83f 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001874:	f7ff ffea 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
   ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800189e:	f000 f82b 	bl	80018f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff f955 	bl	8000b50 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a8:	20018000 	.word	0x20018000
   ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018b4:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 80018b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018bc:	200001c0 	.word	0x200001c0

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000084 	.word	0x20000084

080018ec <__errno>:
 80018ec:	4b01      	ldr	r3, [pc, #4]	@ (80018f4 <__errno+0x8>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000004 	.word	0x20000004

080018f8 <__libc_init_array>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	4d0d      	ldr	r5, [pc, #52]	@ (8001930 <__libc_init_array+0x38>)
 80018fc:	4c0d      	ldr	r4, [pc, #52]	@ (8001934 <__libc_init_array+0x3c>)
 80018fe:	1b64      	subs	r4, r4, r5
 8001900:	10a4      	asrs	r4, r4, #2
 8001902:	2600      	movs	r6, #0
 8001904:	42a6      	cmp	r6, r4
 8001906:	d109      	bne.n	800191c <__libc_init_array+0x24>
 8001908:	4d0b      	ldr	r5, [pc, #44]	@ (8001938 <__libc_init_array+0x40>)
 800190a:	4c0c      	ldr	r4, [pc, #48]	@ (800193c <__libc_init_array+0x44>)
 800190c:	f000 ff76 	bl	80027fc <_init>
 8001910:	1b64      	subs	r4, r4, r5
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	2600      	movs	r6, #0
 8001916:	42a6      	cmp	r6, r4
 8001918:	d105      	bne.n	8001926 <__libc_init_array+0x2e>
 800191a:	bd70      	pop	{r4, r5, r6, pc}
 800191c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001920:	4798      	blx	r3
 8001922:	3601      	adds	r6, #1
 8001924:	e7ee      	b.n	8001904 <__libc_init_array+0xc>
 8001926:	f855 3b04 	ldr.w	r3, [r5], #4
 800192a:	4798      	blx	r3
 800192c:	3601      	adds	r6, #1
 800192e:	e7f2      	b.n	8001916 <__libc_init_array+0x1e>
 8001930:	08002848 	.word	0x08002848
 8001934:	08002848 	.word	0x08002848
 8001938:	08002848 	.word	0x08002848
 800193c:	0800284c 	.word	0x0800284c

08001940 <pow>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	ed2d 8b02 	vpush	{d8}
 8001946:	eeb0 8a40 	vmov.f32	s16, s0
 800194a:	eef0 8a60 	vmov.f32	s17, s1
 800194e:	ec55 4b11 	vmov	r4, r5, d1
 8001952:	f000 f871 	bl	8001a38 <__ieee754_pow>
 8001956:	4622      	mov	r2, r4
 8001958:	462b      	mov	r3, r5
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	ec57 6b10 	vmov	r6, r7, d0
 8001962:	f7ff f88f 	bl	8000a84 <__aeabi_dcmpun>
 8001966:	2800      	cmp	r0, #0
 8001968:	d13b      	bne.n	80019e2 <pow+0xa2>
 800196a:	ec51 0b18 	vmov	r0, r1, d8
 800196e:	2200      	movs	r2, #0
 8001970:	2300      	movs	r3, #0
 8001972:	f7ff f855 	bl	8000a20 <__aeabi_dcmpeq>
 8001976:	b1b8      	cbz	r0, 80019a8 <pow+0x68>
 8001978:	2200      	movs	r2, #0
 800197a:	2300      	movs	r3, #0
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7ff f84e 	bl	8000a20 <__aeabi_dcmpeq>
 8001984:	2800      	cmp	r0, #0
 8001986:	d146      	bne.n	8001a16 <pow+0xd6>
 8001988:	ec45 4b10 	vmov	d0, r4, r5
 800198c:	f000 f848 	bl	8001a20 <finite>
 8001990:	b338      	cbz	r0, 80019e2 <pow+0xa2>
 8001992:	2200      	movs	r2, #0
 8001994:	2300      	movs	r3, #0
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7ff f84b 	bl	8000a34 <__aeabi_dcmplt>
 800199e:	b300      	cbz	r0, 80019e2 <pow+0xa2>
 80019a0:	f7ff ffa4 	bl	80018ec <__errno>
 80019a4:	2322      	movs	r3, #34	@ 0x22
 80019a6:	e01b      	b.n	80019e0 <pow+0xa0>
 80019a8:	ec47 6b10 	vmov	d0, r6, r7
 80019ac:	f000 f838 	bl	8001a20 <finite>
 80019b0:	b9e0      	cbnz	r0, 80019ec <pow+0xac>
 80019b2:	eeb0 0a48 	vmov.f32	s0, s16
 80019b6:	eef0 0a68 	vmov.f32	s1, s17
 80019ba:	f000 f831 	bl	8001a20 <finite>
 80019be:	b1a8      	cbz	r0, 80019ec <pow+0xac>
 80019c0:	ec45 4b10 	vmov	d0, r4, r5
 80019c4:	f000 f82c 	bl	8001a20 <finite>
 80019c8:	b180      	cbz	r0, 80019ec <pow+0xac>
 80019ca:	4632      	mov	r2, r6
 80019cc:	463b      	mov	r3, r7
 80019ce:	4630      	mov	r0, r6
 80019d0:	4639      	mov	r1, r7
 80019d2:	f7ff f857 	bl	8000a84 <__aeabi_dcmpun>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d0e2      	beq.n	80019a0 <pow+0x60>
 80019da:	f7ff ff87 	bl	80018ec <__errno>
 80019de:	2321      	movs	r3, #33	@ 0x21
 80019e0:	6003      	str	r3, [r0, #0]
 80019e2:	ecbd 8b02 	vpop	{d8}
 80019e6:	ec47 6b10 	vmov	d0, r6, r7
 80019ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ec:	2200      	movs	r2, #0
 80019ee:	2300      	movs	r3, #0
 80019f0:	4630      	mov	r0, r6
 80019f2:	4639      	mov	r1, r7
 80019f4:	f7ff f814 	bl	8000a20 <__aeabi_dcmpeq>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d0f2      	beq.n	80019e2 <pow+0xa2>
 80019fc:	eeb0 0a48 	vmov.f32	s0, s16
 8001a00:	eef0 0a68 	vmov.f32	s1, s17
 8001a04:	f000 f80c 	bl	8001a20 <finite>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d0ea      	beq.n	80019e2 <pow+0xa2>
 8001a0c:	ec45 4b10 	vmov	d0, r4, r5
 8001a10:	f000 f806 	bl	8001a20 <finite>
 8001a14:	e7c3      	b.n	800199e <pow+0x5e>
 8001a16:	4f01      	ldr	r7, [pc, #4]	@ (8001a1c <pow+0xdc>)
 8001a18:	2600      	movs	r6, #0
 8001a1a:	e7e2      	b.n	80019e2 <pow+0xa2>
 8001a1c:	3ff00000 	.word	0x3ff00000

08001a20 <finite>:
 8001a20:	b082      	sub	sp, #8
 8001a22:	ed8d 0b00 	vstr	d0, [sp]
 8001a26:	9801      	ldr	r0, [sp, #4]
 8001a28:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8001a2c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8001a30:	0fc0      	lsrs	r0, r0, #31
 8001a32:	b002      	add	sp, #8
 8001a34:	4770      	bx	lr
	...

08001a38 <__ieee754_pow>:
 8001a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3c:	b091      	sub	sp, #68	@ 0x44
 8001a3e:	ed8d 1b00 	vstr	d1, [sp]
 8001a42:	e9dd 1900 	ldrd	r1, r9, [sp]
 8001a46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8001a4a:	ea5a 0001 	orrs.w	r0, sl, r1
 8001a4e:	ec57 6b10 	vmov	r6, r7, d0
 8001a52:	d113      	bne.n	8001a7c <__ieee754_pow+0x44>
 8001a54:	19b3      	adds	r3, r6, r6
 8001a56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8001a5a:	4152      	adcs	r2, r2
 8001a5c:	4298      	cmp	r0, r3
 8001a5e:	4b98      	ldr	r3, [pc, #608]	@ (8001cc0 <__ieee754_pow+0x288>)
 8001a60:	4193      	sbcs	r3, r2
 8001a62:	f080 84ea 	bcs.w	800243a <__ieee754_pow+0xa02>
 8001a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	4639      	mov	r1, r7
 8001a6e:	f7fe fbb9 	bl	80001e4 <__adddf3>
 8001a72:	ec41 0b10 	vmov	d0, r0, r1
 8001a76:	b011      	add	sp, #68	@ 0x44
 8001a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a7c:	4a91      	ldr	r2, [pc, #580]	@ (8001cc4 <__ieee754_pow+0x28c>)
 8001a7e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8001a82:	4590      	cmp	r8, r2
 8001a84:	463d      	mov	r5, r7
 8001a86:	4633      	mov	r3, r6
 8001a88:	d806      	bhi.n	8001a98 <__ieee754_pow+0x60>
 8001a8a:	d101      	bne.n	8001a90 <__ieee754_pow+0x58>
 8001a8c:	2e00      	cmp	r6, #0
 8001a8e:	d1ea      	bne.n	8001a66 <__ieee754_pow+0x2e>
 8001a90:	4592      	cmp	sl, r2
 8001a92:	d801      	bhi.n	8001a98 <__ieee754_pow+0x60>
 8001a94:	d10e      	bne.n	8001ab4 <__ieee754_pow+0x7c>
 8001a96:	b169      	cbz	r1, 8001ab4 <__ieee754_pow+0x7c>
 8001a98:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8001a9c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8001aa0:	431d      	orrs	r5, r3
 8001aa2:	d1e0      	bne.n	8001a66 <__ieee754_pow+0x2e>
 8001aa4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001aa8:	18db      	adds	r3, r3, r3
 8001aaa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8001aae:	4152      	adcs	r2, r2
 8001ab0:	429d      	cmp	r5, r3
 8001ab2:	e7d4      	b.n	8001a5e <__ieee754_pow+0x26>
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	46c3      	mov	fp, r8
 8001ab8:	da3a      	bge.n	8001b30 <__ieee754_pow+0xf8>
 8001aba:	4a83      	ldr	r2, [pc, #524]	@ (8001cc8 <__ieee754_pow+0x290>)
 8001abc:	4592      	cmp	sl, r2
 8001abe:	d84d      	bhi.n	8001b5c <__ieee754_pow+0x124>
 8001ac0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8001ac4:	4592      	cmp	sl, r2
 8001ac6:	f240 84c7 	bls.w	8002458 <__ieee754_pow+0xa20>
 8001aca:	ea4f 522a 	mov.w	r2, sl, asr #20
 8001ace:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8001ad2:	2a14      	cmp	r2, #20
 8001ad4:	dd0f      	ble.n	8001af6 <__ieee754_pow+0xbe>
 8001ad6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8001ada:	fa21 f402 	lsr.w	r4, r1, r2
 8001ade:	fa04 f202 	lsl.w	r2, r4, r2
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	f040 84b8 	bne.w	8002458 <__ieee754_pow+0xa20>
 8001ae8:	f004 0401 	and.w	r4, r4, #1
 8001aec:	f1c4 0402 	rsb	r4, r4, #2
 8001af0:	2900      	cmp	r1, #0
 8001af2:	d158      	bne.n	8001ba6 <__ieee754_pow+0x16e>
 8001af4:	e00e      	b.n	8001b14 <__ieee754_pow+0xdc>
 8001af6:	2900      	cmp	r1, #0
 8001af8:	d154      	bne.n	8001ba4 <__ieee754_pow+0x16c>
 8001afa:	f1c2 0214 	rsb	r2, r2, #20
 8001afe:	fa4a f402 	asr.w	r4, sl, r2
 8001b02:	fa04 f202 	lsl.w	r2, r4, r2
 8001b06:	4552      	cmp	r2, sl
 8001b08:	f040 84a3 	bne.w	8002452 <__ieee754_pow+0xa1a>
 8001b0c:	f004 0401 	and.w	r4, r4, #1
 8001b10:	f1c4 0402 	rsb	r4, r4, #2
 8001b14:	4a6d      	ldr	r2, [pc, #436]	@ (8001ccc <__ieee754_pow+0x294>)
 8001b16:	4592      	cmp	sl, r2
 8001b18:	d12e      	bne.n	8001b78 <__ieee754_pow+0x140>
 8001b1a:	f1b9 0f00 	cmp.w	r9, #0
 8001b1e:	f280 8494 	bge.w	800244a <__ieee754_pow+0xa12>
 8001b22:	496a      	ldr	r1, [pc, #424]	@ (8001ccc <__ieee754_pow+0x294>)
 8001b24:	4632      	mov	r2, r6
 8001b26:	463b      	mov	r3, r7
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7fe fe3b 	bl	80007a4 <__aeabi_ddiv>
 8001b2e:	e7a0      	b.n	8001a72 <__ieee754_pow+0x3a>
 8001b30:	2400      	movs	r4, #0
 8001b32:	bbc1      	cbnz	r1, 8001ba6 <__ieee754_pow+0x16e>
 8001b34:	4a63      	ldr	r2, [pc, #396]	@ (8001cc4 <__ieee754_pow+0x28c>)
 8001b36:	4592      	cmp	sl, r2
 8001b38:	d1ec      	bne.n	8001b14 <__ieee754_pow+0xdc>
 8001b3a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8001b3e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8001b42:	431a      	orrs	r2, r3
 8001b44:	f000 8479 	beq.w	800243a <__ieee754_pow+0xa02>
 8001b48:	4b61      	ldr	r3, [pc, #388]	@ (8001cd0 <__ieee754_pow+0x298>)
 8001b4a:	4598      	cmp	r8, r3
 8001b4c:	d908      	bls.n	8001b60 <__ieee754_pow+0x128>
 8001b4e:	f1b9 0f00 	cmp.w	r9, #0
 8001b52:	f2c0 8476 	blt.w	8002442 <__ieee754_pow+0xa0a>
 8001b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001b5a:	e78a      	b.n	8001a72 <__ieee754_pow+0x3a>
 8001b5c:	2402      	movs	r4, #2
 8001b5e:	e7e8      	b.n	8001b32 <__ieee754_pow+0xfa>
 8001b60:	f1b9 0f00 	cmp.w	r9, #0
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	da81      	bge.n	8001a72 <__ieee754_pow+0x3a>
 8001b6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8001b72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8001b76:	e77c      	b.n	8001a72 <__ieee754_pow+0x3a>
 8001b78:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8001b7c:	d106      	bne.n	8001b8c <__ieee754_pow+0x154>
 8001b7e:	4632      	mov	r2, r6
 8001b80:	463b      	mov	r3, r7
 8001b82:	4630      	mov	r0, r6
 8001b84:	4639      	mov	r1, r7
 8001b86:	f7fe fce3 	bl	8000550 <__aeabi_dmul>
 8001b8a:	e772      	b.n	8001a72 <__ieee754_pow+0x3a>
 8001b8c:	4a51      	ldr	r2, [pc, #324]	@ (8001cd4 <__ieee754_pow+0x29c>)
 8001b8e:	4591      	cmp	r9, r2
 8001b90:	d109      	bne.n	8001ba6 <__ieee754_pow+0x16e>
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	db07      	blt.n	8001ba6 <__ieee754_pow+0x16e>
 8001b96:	ec47 6b10 	vmov	d0, r6, r7
 8001b9a:	b011      	add	sp, #68	@ 0x44
 8001b9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba0:	f000 bd52 	b.w	8002648 <__ieee754_sqrt>
 8001ba4:	2400      	movs	r4, #0
 8001ba6:	ec47 6b10 	vmov	d0, r6, r7
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	f000 fc88 	bl	80024c0 <fabs>
 8001bb0:	9b02      	ldr	r3, [sp, #8]
 8001bb2:	ec51 0b10 	vmov	r0, r1, d0
 8001bb6:	bb53      	cbnz	r3, 8001c0e <__ieee754_pow+0x1d6>
 8001bb8:	4b44      	ldr	r3, [pc, #272]	@ (8001ccc <__ieee754_pow+0x294>)
 8001bba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d002      	beq.n	8001bc8 <__ieee754_pow+0x190>
 8001bc2:	f1b8 0f00 	cmp.w	r8, #0
 8001bc6:	d122      	bne.n	8001c0e <__ieee754_pow+0x1d6>
 8001bc8:	f1b9 0f00 	cmp.w	r9, #0
 8001bcc:	da05      	bge.n	8001bda <__ieee754_pow+0x1a2>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	493d      	ldr	r1, [pc, #244]	@ (8001ccc <__ieee754_pow+0x294>)
 8001bd6:	f7fe fde5 	bl	80007a4 <__aeabi_ddiv>
 8001bda:	2d00      	cmp	r5, #0
 8001bdc:	f6bf af49 	bge.w	8001a72 <__ieee754_pow+0x3a>
 8001be0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8001be4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8001be8:	ea58 0804 	orrs.w	r8, r8, r4
 8001bec:	d108      	bne.n	8001c00 <__ieee754_pow+0x1c8>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe faf3 	bl	80001e0 <__aeabi_dsub>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e794      	b.n	8001b2a <__ieee754_pow+0xf2>
 8001c00:	2c01      	cmp	r4, #1
 8001c02:	f47f af36 	bne.w	8001a72 <__ieee754_pow+0x3a>
 8001c06:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	e731      	b.n	8001a72 <__ieee754_pow+0x3a>
 8001c0e:	0feb      	lsrs	r3, r5, #31
 8001c10:	3b01      	subs	r3, #1
 8001c12:	ea53 0204 	orrs.w	r2, r3, r4
 8001c16:	d102      	bne.n	8001c1e <__ieee754_pow+0x1e6>
 8001c18:	4632      	mov	r2, r6
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	e7e9      	b.n	8001bf2 <__ieee754_pow+0x1ba>
 8001c1e:	3c01      	subs	r4, #1
 8001c20:	431c      	orrs	r4, r3
 8001c22:	d016      	beq.n	8001c52 <__ieee754_pow+0x21a>
 8001c24:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8001cb0 <__ieee754_pow+0x278>
 8001c28:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8001c2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c30:	f240 8112 	bls.w	8001e58 <__ieee754_pow+0x420>
 8001c34:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <__ieee754_pow+0x2a0>)
 8001c36:	459a      	cmp	sl, r3
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <__ieee754_pow+0x298>)
 8001c3a:	d916      	bls.n	8001c6a <__ieee754_pow+0x232>
 8001c3c:	4598      	cmp	r8, r3
 8001c3e:	d80b      	bhi.n	8001c58 <__ieee754_pow+0x220>
 8001c40:	f1b9 0f00 	cmp.w	r9, #0
 8001c44:	da0b      	bge.n	8001c5e <__ieee754_pow+0x226>
 8001c46:	2000      	movs	r0, #0
 8001c48:	b011      	add	sp, #68	@ 0x44
 8001c4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c4e:	f000 bcf3 	b.w	8002638 <__math_oflow>
 8001c52:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8001cb8 <__ieee754_pow+0x280>
 8001c56:	e7e7      	b.n	8001c28 <__ieee754_pow+0x1f0>
 8001c58:	f1b9 0f00 	cmp.w	r9, #0
 8001c5c:	dcf3      	bgt.n	8001c46 <__ieee754_pow+0x20e>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	b011      	add	sp, #68	@ 0x44
 8001c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c66:	f000 bcdf 	b.w	8002628 <__math_uflow>
 8001c6a:	4598      	cmp	r8, r3
 8001c6c:	d20c      	bcs.n	8001c88 <__ieee754_pow+0x250>
 8001c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	2300      	movs	r3, #0
 8001c76:	f7fe fedd 	bl	8000a34 <__aeabi_dcmplt>
 8001c7a:	3800      	subs	r0, #0
 8001c7c:	bf18      	it	ne
 8001c7e:	2001      	movne	r0, #1
 8001c80:	f1b9 0f00 	cmp.w	r9, #0
 8001c84:	daec      	bge.n	8001c60 <__ieee754_pow+0x228>
 8001c86:	e7df      	b.n	8001c48 <__ieee754_pow+0x210>
 8001c88:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <__ieee754_pow+0x294>)
 8001c8a:	4598      	cmp	r8, r3
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	d924      	bls.n	8001cdc <__ieee754_pow+0x2a4>
 8001c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001c96:	2300      	movs	r3, #0
 8001c98:	f7fe fecc 	bl	8000a34 <__aeabi_dcmplt>
 8001c9c:	3800      	subs	r0, #0
 8001c9e:	bf18      	it	ne
 8001ca0:	2001      	movne	r0, #1
 8001ca2:	f1b9 0f00 	cmp.w	r9, #0
 8001ca6:	dccf      	bgt.n	8001c48 <__ieee754_pow+0x210>
 8001ca8:	e7da      	b.n	8001c60 <__ieee754_pow+0x228>
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	3ff00000 	.word	0x3ff00000
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	bff00000 	.word	0xbff00000
 8001cc0:	fff00000 	.word	0xfff00000
 8001cc4:	7ff00000 	.word	0x7ff00000
 8001cc8:	433fffff 	.word	0x433fffff
 8001ccc:	3ff00000 	.word	0x3ff00000
 8001cd0:	3fefffff 	.word	0x3fefffff
 8001cd4:	3fe00000 	.word	0x3fe00000
 8001cd8:	43f00000 	.word	0x43f00000
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e48 <__ieee754_pow+0x410>)
 8001cde:	f7fe fa7f 	bl	80001e0 <__aeabi_dsub>
 8001ce2:	a351      	add	r3, pc, #324	@ (adr r3, 8001e28 <__ieee754_pow+0x3f0>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	4604      	mov	r4, r0
 8001cea:	460d      	mov	r5, r1
 8001cec:	f7fe fc30 	bl	8000550 <__aeabi_dmul>
 8001cf0:	a34f      	add	r3, pc, #316	@ (adr r3, 8001e30 <__ieee754_pow+0x3f8>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	4606      	mov	r6, r0
 8001cf8:	460f      	mov	r7, r1
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fc27 	bl	8000550 <__aeabi_dmul>
 8001d02:	4b52      	ldr	r3, [pc, #328]	@ (8001e4c <__ieee754_pow+0x414>)
 8001d04:	4682      	mov	sl, r0
 8001d06:	468b      	mov	fp, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fc1f 	bl	8000550 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	a148      	add	r1, pc, #288	@ (adr r1, 8001e38 <__ieee754_pow+0x400>)
 8001d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d1c:	f7fe fa60 	bl	80001e0 <__aeabi_dsub>
 8001d20:	4622      	mov	r2, r4
 8001d22:	462b      	mov	r3, r5
 8001d24:	f7fe fc14 	bl	8000550 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	4948      	ldr	r1, [pc, #288]	@ (8001e50 <__ieee754_pow+0x418>)
 8001d30:	f7fe fa56 	bl	80001e0 <__aeabi_dsub>
 8001d34:	4622      	mov	r2, r4
 8001d36:	4680      	mov	r8, r0
 8001d38:	4689      	mov	r9, r1
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	f7fe fc06 	bl	8000550 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fc00 	bl	8000550 <__aeabi_dmul>
 8001d50:	a33b      	add	r3, pc, #236	@ (adr r3, 8001e40 <__ieee754_pow+0x408>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fbfb 	bl	8000550 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4650      	mov	r0, sl
 8001d60:	4659      	mov	r1, fp
 8001d62:	f7fe fa3d 	bl	80001e0 <__aeabi_dsub>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4680      	mov	r8, r0
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	4630      	mov	r0, r6
 8001d70:	4639      	mov	r1, r7
 8001d72:	f7fe fa37 	bl	80001e4 <__adddf3>
 8001d76:	2400      	movs	r4, #0
 8001d78:	4632      	mov	r2, r6
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	460d      	mov	r5, r1
 8001d80:	f7fe fa2e 	bl	80001e0 <__aeabi_dsub>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4640      	mov	r0, r8
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	f7fe fa28 	bl	80001e0 <__aeabi_dsub>
 8001d90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9304      	str	r3, [sp, #16]
 8001d9c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8001da0:	4606      	mov	r6, r0
 8001da2:	460f      	mov	r7, r1
 8001da4:	4652      	mov	r2, sl
 8001da6:	465b      	mov	r3, fp
 8001da8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001dac:	f7fe fa18 	bl	80001e0 <__aeabi_dsub>
 8001db0:	4622      	mov	r2, r4
 8001db2:	462b      	mov	r3, r5
 8001db4:	f7fe fbcc 	bl	8000550 <__aeabi_dmul>
 8001db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001dbc:	4680      	mov	r8, r0
 8001dbe:	4689      	mov	r9, r1
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	4639      	mov	r1, r7
 8001dc4:	f7fe fbc4 	bl	8000550 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4640      	mov	r0, r8
 8001dce:	4649      	mov	r1, r9
 8001dd0:	f7fe fa08 	bl	80001e4 <__adddf3>
 8001dd4:	4652      	mov	r2, sl
 8001dd6:	465b      	mov	r3, fp
 8001dd8:	4606      	mov	r6, r0
 8001dda:	460f      	mov	r7, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fbb6 	bl	8000550 <__aeabi_dmul>
 8001de4:	460b      	mov	r3, r1
 8001de6:	4602      	mov	r2, r0
 8001de8:	4680      	mov	r8, r0
 8001dea:	4689      	mov	r9, r1
 8001dec:	4630      	mov	r0, r6
 8001dee:	4639      	mov	r1, r7
 8001df0:	f7fe f9f8 	bl	80001e4 <__adddf3>
 8001df4:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <__ieee754_pow+0x41c>)
 8001df6:	4299      	cmp	r1, r3
 8001df8:	4604      	mov	r4, r0
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	468a      	mov	sl, r1
 8001dfe:	468b      	mov	fp, r1
 8001e00:	f340 82ef 	ble.w	80023e2 <__ieee754_pow+0x9aa>
 8001e04:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8001e08:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8001e0c:	4303      	orrs	r3, r0
 8001e0e:	f000 81e8 	beq.w	80021e2 <__ieee754_pow+0x7aa>
 8001e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f7fe fe0b 	bl	8000a34 <__aeabi_dcmplt>
 8001e1e:	3800      	subs	r0, #0
 8001e20:	bf18      	it	ne
 8001e22:	2001      	movne	r0, #1
 8001e24:	e710      	b.n	8001c48 <__ieee754_pow+0x210>
 8001e26:	bf00      	nop
 8001e28:	60000000 	.word	0x60000000
 8001e2c:	3ff71547 	.word	0x3ff71547
 8001e30:	f85ddf44 	.word	0xf85ddf44
 8001e34:	3e54ae0b 	.word	0x3e54ae0b
 8001e38:	55555555 	.word	0x55555555
 8001e3c:	3fd55555 	.word	0x3fd55555
 8001e40:	652b82fe 	.word	0x652b82fe
 8001e44:	3ff71547 	.word	0x3ff71547
 8001e48:	3ff00000 	.word	0x3ff00000
 8001e4c:	3fd00000 	.word	0x3fd00000
 8001e50:	3fe00000 	.word	0x3fe00000
 8001e54:	408fffff 	.word	0x408fffff
 8001e58:	4bd5      	ldr	r3, [pc, #852]	@ (80021b0 <__ieee754_pow+0x778>)
 8001e5a:	402b      	ands	r3, r5
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	b92b      	cbnz	r3, 8001e6c <__ieee754_pow+0x434>
 8001e60:	4bd4      	ldr	r3, [pc, #848]	@ (80021b4 <__ieee754_pow+0x77c>)
 8001e62:	f7fe fb75 	bl	8000550 <__aeabi_dmul>
 8001e66:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8001e6a:	468b      	mov	fp, r1
 8001e6c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8001e70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8001e74:	4413      	add	r3, r2
 8001e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e78:	4bcf      	ldr	r3, [pc, #828]	@ (80021b8 <__ieee754_pow+0x780>)
 8001e7a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8001e7e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8001e82:	459b      	cmp	fp, r3
 8001e84:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8001e88:	dd08      	ble.n	8001e9c <__ieee754_pow+0x464>
 8001e8a:	4bcc      	ldr	r3, [pc, #816]	@ (80021bc <__ieee754_pow+0x784>)
 8001e8c:	459b      	cmp	fp, r3
 8001e8e:	f340 81a5 	ble.w	80021dc <__ieee754_pow+0x7a4>
 8001e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e94:	3301      	adds	r3, #1
 8001e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e98:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001e9c:	f04f 0a00 	mov.w	sl, #0
 8001ea0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001ea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001ea6:	4bc6      	ldr	r3, [pc, #792]	@ (80021c0 <__ieee754_pow+0x788>)
 8001ea8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001eac:	ed93 7b00 	vldr	d7, [r3]
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	ec53 2b17 	vmov	r2, r3, d7
 8001eb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001eba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001ebe:	f7fe f98f 	bl	80001e0 <__aeabi_dsub>
 8001ec2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	460f      	mov	r7, r1
 8001eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ece:	f7fe f989 	bl	80001e4 <__adddf3>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	49ba      	ldr	r1, [pc, #744]	@ (80021c4 <__ieee754_pow+0x78c>)
 8001eda:	f7fe fc63 	bl	80007a4 <__aeabi_ddiv>
 8001ede:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	4639      	mov	r1, r7
 8001eea:	f7fe fb31 	bl	8000550 <__aeabi_dmul>
 8001eee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001ef2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8001ef6:	106d      	asrs	r5, r5, #1
 8001ef8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8001efc:	f04f 0b00 	mov.w	fp, #0
 8001f00:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8001f04:	4661      	mov	r1, ip
 8001f06:	2200      	movs	r2, #0
 8001f08:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8001f0c:	4658      	mov	r0, fp
 8001f0e:	46e1      	mov	r9, ip
 8001f10:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8001f14:	4614      	mov	r4, r2
 8001f16:	461d      	mov	r5, r3
 8001f18:	f7fe fb1a 	bl	8000550 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4630      	mov	r0, r6
 8001f22:	4639      	mov	r1, r7
 8001f24:	f7fe f95c 	bl	80001e0 <__aeabi_dsub>
 8001f28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001f2c:	4606      	mov	r6, r0
 8001f2e:	460f      	mov	r7, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe f954 	bl	80001e0 <__aeabi_dsub>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001f40:	f7fe f94e 	bl	80001e0 <__aeabi_dsub>
 8001f44:	465a      	mov	r2, fp
 8001f46:	464b      	mov	r3, r9
 8001f48:	f7fe fb02 	bl	8000550 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4630      	mov	r0, r6
 8001f52:	4639      	mov	r1, r7
 8001f54:	f7fe f944 	bl	80001e0 <__aeabi_dsub>
 8001f58:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8001f5c:	f7fe faf8 	bl	8000550 <__aeabi_dmul>
 8001f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe faf0 	bl	8000550 <__aeabi_dmul>
 8001f70:	a37d      	add	r3, pc, #500	@ (adr r3, 8002168 <__ieee754_pow+0x730>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	4604      	mov	r4, r0
 8001f78:	460d      	mov	r5, r1
 8001f7a:	f7fe fae9 	bl	8000550 <__aeabi_dmul>
 8001f7e:	a37c      	add	r3, pc, #496	@ (adr r3, 8002170 <__ieee754_pow+0x738>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe f92e 	bl	80001e4 <__adddf3>
 8001f88:	4622      	mov	r2, r4
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	f7fe fae0 	bl	8000550 <__aeabi_dmul>
 8001f90:	a379      	add	r3, pc, #484	@ (adr r3, 8002178 <__ieee754_pow+0x740>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe f925 	bl	80001e4 <__adddf3>
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	f7fe fad7 	bl	8000550 <__aeabi_dmul>
 8001fa2:	a377      	add	r3, pc, #476	@ (adr r3, 8002180 <__ieee754_pow+0x748>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe f91c 	bl	80001e4 <__adddf3>
 8001fac:	4622      	mov	r2, r4
 8001fae:	462b      	mov	r3, r5
 8001fb0:	f7fe face 	bl	8000550 <__aeabi_dmul>
 8001fb4:	a374      	add	r3, pc, #464	@ (adr r3, 8002188 <__ieee754_pow+0x750>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe f913 	bl	80001e4 <__adddf3>
 8001fbe:	4622      	mov	r2, r4
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	f7fe fac5 	bl	8000550 <__aeabi_dmul>
 8001fc6:	a372      	add	r3, pc, #456	@ (adr r3, 8002190 <__ieee754_pow+0x758>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe f90a 	bl	80001e4 <__adddf3>
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	4606      	mov	r6, r0
 8001fd4:	460f      	mov	r7, r1
 8001fd6:	462b      	mov	r3, r5
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe fab8 	bl	8000550 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	4639      	mov	r1, r7
 8001fe8:	f7fe fab2 	bl	8000550 <__aeabi_dmul>
 8001fec:	465a      	mov	r2, fp
 8001fee:	4604      	mov	r4, r0
 8001ff0:	460d      	mov	r5, r1
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001ff8:	f7fe f8f4 	bl	80001e4 <__adddf3>
 8001ffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002000:	f7fe faa6 	bl	8000550 <__aeabi_dmul>
 8002004:	4622      	mov	r2, r4
 8002006:	462b      	mov	r3, r5
 8002008:	f7fe f8ec 	bl	80001e4 <__adddf3>
 800200c:	465a      	mov	r2, fp
 800200e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002012:	464b      	mov	r3, r9
 8002014:	4658      	mov	r0, fp
 8002016:	4649      	mov	r1, r9
 8002018:	f7fe fa9a 	bl	8000550 <__aeabi_dmul>
 800201c:	4b6a      	ldr	r3, [pc, #424]	@ (80021c8 <__ieee754_pow+0x790>)
 800201e:	2200      	movs	r2, #0
 8002020:	4606      	mov	r6, r0
 8002022:	460f      	mov	r7, r1
 8002024:	f7fe f8de 	bl	80001e4 <__adddf3>
 8002028:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800202c:	f7fe f8da 	bl	80001e4 <__adddf3>
 8002030:	46d8      	mov	r8, fp
 8002032:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8002036:	460d      	mov	r5, r1
 8002038:	465a      	mov	r2, fp
 800203a:	460b      	mov	r3, r1
 800203c:	4640      	mov	r0, r8
 800203e:	4649      	mov	r1, r9
 8002040:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8002044:	f7fe fa84 	bl	8000550 <__aeabi_dmul>
 8002048:	465c      	mov	r4, fp
 800204a:	4680      	mov	r8, r0
 800204c:	4689      	mov	r9, r1
 800204e:	4b5e      	ldr	r3, [pc, #376]	@ (80021c8 <__ieee754_pow+0x790>)
 8002050:	2200      	movs	r2, #0
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe f8c3 	bl	80001e0 <__aeabi_dsub>
 800205a:	4632      	mov	r2, r6
 800205c:	463b      	mov	r3, r7
 800205e:	f7fe f8bf 	bl	80001e0 <__aeabi_dsub>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800206a:	f7fe f8b9 	bl	80001e0 <__aeabi_dsub>
 800206e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002072:	f7fe fa6d 	bl	8000550 <__aeabi_dmul>
 8002076:	4622      	mov	r2, r4
 8002078:	4606      	mov	r6, r0
 800207a:	460f      	mov	r7, r1
 800207c:	462b      	mov	r3, r5
 800207e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002082:	f7fe fa65 	bl	8000550 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4630      	mov	r0, r6
 800208c:	4639      	mov	r1, r7
 800208e:	f7fe f8a9 	bl	80001e4 <__adddf3>
 8002092:	4606      	mov	r6, r0
 8002094:	460f      	mov	r7, r1
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4640      	mov	r0, r8
 800209c:	4649      	mov	r1, r9
 800209e:	f7fe f8a1 	bl	80001e4 <__adddf3>
 80020a2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80020a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8002198 <__ieee754_pow+0x760>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	4658      	mov	r0, fp
 80020ae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80020b2:	460d      	mov	r5, r1
 80020b4:	f7fe fa4c 	bl	8000550 <__aeabi_dmul>
 80020b8:	465c      	mov	r4, fp
 80020ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020be:	4642      	mov	r2, r8
 80020c0:	464b      	mov	r3, r9
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7fe f88b 	bl	80001e0 <__aeabi_dsub>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4630      	mov	r0, r6
 80020d0:	4639      	mov	r1, r7
 80020d2:	f7fe f885 	bl	80001e0 <__aeabi_dsub>
 80020d6:	a332      	add	r3, pc, #200	@ (adr r3, 80021a0 <__ieee754_pow+0x768>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fa38 	bl	8000550 <__aeabi_dmul>
 80020e0:	a331      	add	r3, pc, #196	@ (adr r3, 80021a8 <__ieee754_pow+0x770>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	4606      	mov	r6, r0
 80020e8:	460f      	mov	r7, r1
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe fa2f 	bl	8000550 <__aeabi_dmul>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4630      	mov	r0, r6
 80020f8:	4639      	mov	r1, r7
 80020fa:	f7fe f873 	bl	80001e4 <__adddf3>
 80020fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002100:	4b32      	ldr	r3, [pc, #200]	@ (80021cc <__ieee754_pow+0x794>)
 8002102:	4413      	add	r3, r2
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe f86c 	bl	80001e4 <__adddf3>
 800210c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002110:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002112:	f7fe f9b3 	bl	800047c <__aeabi_i2d>
 8002116:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <__ieee754_pow+0x798>)
 800211a:	4413      	add	r3, r2
 800211c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002120:	4606      	mov	r6, r0
 8002122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002126:	460f      	mov	r7, r1
 8002128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800212c:	f7fe f85a 	bl	80001e4 <__adddf3>
 8002130:	4642      	mov	r2, r8
 8002132:	464b      	mov	r3, r9
 8002134:	f7fe f856 	bl	80001e4 <__adddf3>
 8002138:	4632      	mov	r2, r6
 800213a:	463b      	mov	r3, r7
 800213c:	f7fe f852 	bl	80001e4 <__adddf3>
 8002140:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8002144:	4632      	mov	r2, r6
 8002146:	463b      	mov	r3, r7
 8002148:	4658      	mov	r0, fp
 800214a:	460d      	mov	r5, r1
 800214c:	f7fe f848 	bl	80001e0 <__aeabi_dsub>
 8002150:	4642      	mov	r2, r8
 8002152:	464b      	mov	r3, r9
 8002154:	f7fe f844 	bl	80001e0 <__aeabi_dsub>
 8002158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800215c:	f7fe f840 	bl	80001e0 <__aeabi_dsub>
 8002160:	465c      	mov	r4, fp
 8002162:	4602      	mov	r2, r0
 8002164:	e036      	b.n	80021d4 <__ieee754_pow+0x79c>
 8002166:	bf00      	nop
 8002168:	4a454eef 	.word	0x4a454eef
 800216c:	3fca7e28 	.word	0x3fca7e28
 8002170:	93c9db65 	.word	0x93c9db65
 8002174:	3fcd864a 	.word	0x3fcd864a
 8002178:	a91d4101 	.word	0xa91d4101
 800217c:	3fd17460 	.word	0x3fd17460
 8002180:	518f264d 	.word	0x518f264d
 8002184:	3fd55555 	.word	0x3fd55555
 8002188:	db6fabff 	.word	0xdb6fabff
 800218c:	3fdb6db6 	.word	0x3fdb6db6
 8002190:	33333303 	.word	0x33333303
 8002194:	3fe33333 	.word	0x3fe33333
 8002198:	e0000000 	.word	0xe0000000
 800219c:	3feec709 	.word	0x3feec709
 80021a0:	dc3a03fd 	.word	0xdc3a03fd
 80021a4:	3feec709 	.word	0x3feec709
 80021a8:	145b01f5 	.word	0x145b01f5
 80021ac:	be3e2fe0 	.word	0xbe3e2fe0
 80021b0:	7ff00000 	.word	0x7ff00000
 80021b4:	43400000 	.word	0x43400000
 80021b8:	0003988e 	.word	0x0003988e
 80021bc:	000bb679 	.word	0x000bb679
 80021c0:	08002838 	.word	0x08002838
 80021c4:	3ff00000 	.word	0x3ff00000
 80021c8:	40080000 	.word	0x40080000
 80021cc:	08002818 	.word	0x08002818
 80021d0:	08002828 	.word	0x08002828
 80021d4:	460b      	mov	r3, r1
 80021d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80021da:	e5d7      	b.n	8001d8c <__ieee754_pow+0x354>
 80021dc:	f04f 0a01 	mov.w	sl, #1
 80021e0:	e65e      	b.n	8001ea0 <__ieee754_pow+0x468>
 80021e2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80024b4 <__ieee754_pow+0xa7c>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	4630      	mov	r0, r6
 80021ea:	4639      	mov	r1, r7
 80021ec:	f7fd fffa 	bl	80001e4 <__adddf3>
 80021f0:	4642      	mov	r2, r8
 80021f2:	e9cd 0100 	strd	r0, r1, [sp]
 80021f6:	464b      	mov	r3, r9
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fd fff0 	bl	80001e0 <__aeabi_dsub>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002208:	f7fe fc32 	bl	8000a70 <__aeabi_dcmpgt>
 800220c:	2800      	cmp	r0, #0
 800220e:	f47f ae00 	bne.w	8001e12 <__ieee754_pow+0x3da>
 8002212:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8002216:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800221a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800221e:	fa43 fa0a 	asr.w	sl, r3, sl
 8002222:	44da      	add	sl, fp
 8002224:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8002228:	489d      	ldr	r0, [pc, #628]	@ (80024a0 <__ieee754_pow+0xa68>)
 800222a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800222e:	4108      	asrs	r0, r1
 8002230:	ea00 030a 	and.w	r3, r0, sl
 8002234:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8002238:	f1c1 0114 	rsb	r1, r1, #20
 800223c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8002240:	fa4a fa01 	asr.w	sl, sl, r1
 8002244:	f1bb 0f00 	cmp.w	fp, #0
 8002248:	4640      	mov	r0, r8
 800224a:	4649      	mov	r1, r9
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	bfb8      	it	lt
 8002252:	f1ca 0a00 	rsblt	sl, sl, #0
 8002256:	f7fd ffc3 	bl	80001e0 <__aeabi_dsub>
 800225a:	4680      	mov	r8, r0
 800225c:	4689      	mov	r9, r1
 800225e:	4632      	mov	r2, r6
 8002260:	463b      	mov	r3, r7
 8002262:	4640      	mov	r0, r8
 8002264:	4649      	mov	r1, r9
 8002266:	f7fd ffbd 	bl	80001e4 <__adddf3>
 800226a:	2400      	movs	r4, #0
 800226c:	a37c      	add	r3, pc, #496	@ (adr r3, 8002460 <__ieee754_pow+0xa28>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	4620      	mov	r0, r4
 8002274:	460d      	mov	r5, r1
 8002276:	f7fe f96b 	bl	8000550 <__aeabi_dmul>
 800227a:	4642      	mov	r2, r8
 800227c:	e9cd 0100 	strd	r0, r1, [sp]
 8002280:	464b      	mov	r3, r9
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fd ffab 	bl	80001e0 <__aeabi_dsub>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4630      	mov	r0, r6
 8002290:	4639      	mov	r1, r7
 8002292:	f7fd ffa5 	bl	80001e0 <__aeabi_dsub>
 8002296:	a374      	add	r3, pc, #464	@ (adr r3, 8002468 <__ieee754_pow+0xa30>)
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f7fe f958 	bl	8000550 <__aeabi_dmul>
 80022a0:	a373      	add	r3, pc, #460	@ (adr r3, 8002470 <__ieee754_pow+0xa38>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	4680      	mov	r8, r0
 80022a8:	4689      	mov	r9, r1
 80022aa:	4620      	mov	r0, r4
 80022ac:	4629      	mov	r1, r5
 80022ae:	f7fe f94f 	bl	8000550 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4640      	mov	r0, r8
 80022b8:	4649      	mov	r1, r9
 80022ba:	f7fd ff93 	bl	80001e4 <__adddf3>
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80022ca:	f7fd ff8b 	bl	80001e4 <__adddf3>
 80022ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80022d2:	4680      	mov	r8, r0
 80022d4:	4689      	mov	r9, r1
 80022d6:	f7fd ff83 	bl	80001e0 <__aeabi_dsub>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f7fd ff7d 	bl	80001e0 <__aeabi_dsub>
 80022e6:	4642      	mov	r2, r8
 80022e8:	4606      	mov	r6, r0
 80022ea:	460f      	mov	r7, r1
 80022ec:	464b      	mov	r3, r9
 80022ee:	4640      	mov	r0, r8
 80022f0:	4649      	mov	r1, r9
 80022f2:	f7fe f92d 	bl	8000550 <__aeabi_dmul>
 80022f6:	a360      	add	r3, pc, #384	@ (adr r3, 8002478 <__ieee754_pow+0xa40>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	4604      	mov	r4, r0
 80022fe:	460d      	mov	r5, r1
 8002300:	f7fe f926 	bl	8000550 <__aeabi_dmul>
 8002304:	a35e      	add	r3, pc, #376	@ (adr r3, 8002480 <__ieee754_pow+0xa48>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fd ff69 	bl	80001e0 <__aeabi_dsub>
 800230e:	4622      	mov	r2, r4
 8002310:	462b      	mov	r3, r5
 8002312:	f7fe f91d 	bl	8000550 <__aeabi_dmul>
 8002316:	a35c      	add	r3, pc, #368	@ (adr r3, 8002488 <__ieee754_pow+0xa50>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ff62 	bl	80001e4 <__adddf3>
 8002320:	4622      	mov	r2, r4
 8002322:	462b      	mov	r3, r5
 8002324:	f7fe f914 	bl	8000550 <__aeabi_dmul>
 8002328:	a359      	add	r3, pc, #356	@ (adr r3, 8002490 <__ieee754_pow+0xa58>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fd ff57 	bl	80001e0 <__aeabi_dsub>
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	f7fe f90b 	bl	8000550 <__aeabi_dmul>
 800233a:	a357      	add	r3, pc, #348	@ (adr r3, 8002498 <__ieee754_pow+0xa60>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fd ff50 	bl	80001e4 <__adddf3>
 8002344:	4622      	mov	r2, r4
 8002346:	462b      	mov	r3, r5
 8002348:	f7fe f902 	bl	8000550 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4640      	mov	r0, r8
 8002352:	4649      	mov	r1, r9
 8002354:	f7fd ff44 	bl	80001e0 <__aeabi_dsub>
 8002358:	4604      	mov	r4, r0
 800235a:	460d      	mov	r5, r1
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4640      	mov	r0, r8
 8002362:	4649      	mov	r1, r9
 8002364:	f7fe f8f4 	bl	8000550 <__aeabi_dmul>
 8002368:	2200      	movs	r2, #0
 800236a:	e9cd 0100 	strd	r0, r1, [sp]
 800236e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fd ff33 	bl	80001e0 <__aeabi_dsub>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002382:	f7fe fa0f 	bl	80007a4 <__aeabi_ddiv>
 8002386:	4632      	mov	r2, r6
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
 800238c:	463b      	mov	r3, r7
 800238e:	4640      	mov	r0, r8
 8002390:	4649      	mov	r1, r9
 8002392:	f7fe f8dd 	bl	8000550 <__aeabi_dmul>
 8002396:	4632      	mov	r2, r6
 8002398:	463b      	mov	r3, r7
 800239a:	f7fd ff23 	bl	80001e4 <__adddf3>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fd ff1b 	bl	80001e0 <__aeabi_dsub>
 80023aa:	4642      	mov	r2, r8
 80023ac:	464b      	mov	r3, r9
 80023ae:	f7fd ff17 	bl	80001e0 <__aeabi_dsub>
 80023b2:	460b      	mov	r3, r1
 80023b4:	4602      	mov	r2, r0
 80023b6:	493b      	ldr	r1, [pc, #236]	@ (80024a4 <__ieee754_pow+0xa6c>)
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fd ff11 	bl	80001e0 <__aeabi_dsub>
 80023be:	ec41 0b10 	vmov	d0, r0, r1
 80023c2:	ee10 3a90 	vmov	r3, s1
 80023c6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80023ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023ce:	da30      	bge.n	8002432 <__ieee754_pow+0x9fa>
 80023d0:	4650      	mov	r0, sl
 80023d2:	f000 f87d 	bl	80024d0 <scalbn>
 80023d6:	ec51 0b10 	vmov	r0, r1, d0
 80023da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80023de:	f7ff bbd2 	b.w	8001b86 <__ieee754_pow+0x14e>
 80023e2:	4c31      	ldr	r4, [pc, #196]	@ (80024a8 <__ieee754_pow+0xa70>)
 80023e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80023e8:	42a3      	cmp	r3, r4
 80023ea:	d91a      	bls.n	8002422 <__ieee754_pow+0x9ea>
 80023ec:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <__ieee754_pow+0xa74>)
 80023ee:	440b      	add	r3, r1
 80023f0:	4303      	orrs	r3, r0
 80023f2:	d009      	beq.n	8002408 <__ieee754_pow+0x9d0>
 80023f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2300      	movs	r3, #0
 80023fc:	f7fe fb1a 	bl	8000a34 <__aeabi_dcmplt>
 8002400:	3800      	subs	r0, #0
 8002402:	bf18      	it	ne
 8002404:	2001      	movne	r0, #1
 8002406:	e42b      	b.n	8001c60 <__ieee754_pow+0x228>
 8002408:	4642      	mov	r2, r8
 800240a:	464b      	mov	r3, r9
 800240c:	f7fd fee8 	bl	80001e0 <__aeabi_dsub>
 8002410:	4632      	mov	r2, r6
 8002412:	463b      	mov	r3, r7
 8002414:	f7fe fb22 	bl	8000a5c <__aeabi_dcmpge>
 8002418:	2800      	cmp	r0, #0
 800241a:	d1eb      	bne.n	80023f4 <__ieee754_pow+0x9bc>
 800241c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80024bc <__ieee754_pow+0xa84>
 8002420:	e6f7      	b.n	8002212 <__ieee754_pow+0x7da>
 8002422:	469a      	mov	sl, r3
 8002424:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <__ieee754_pow+0xa78>)
 8002426:	459a      	cmp	sl, r3
 8002428:	f63f aef3 	bhi.w	8002212 <__ieee754_pow+0x7da>
 800242c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002430:	e715      	b.n	800225e <__ieee754_pow+0x826>
 8002432:	ec51 0b10 	vmov	r0, r1, d0
 8002436:	4619      	mov	r1, r3
 8002438:	e7cf      	b.n	80023da <__ieee754_pow+0x9a2>
 800243a:	491a      	ldr	r1, [pc, #104]	@ (80024a4 <__ieee754_pow+0xa6c>)
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff bb18 	b.w	8001a72 <__ieee754_pow+0x3a>
 8002442:	2000      	movs	r0, #0
 8002444:	2100      	movs	r1, #0
 8002446:	f7ff bb14 	b.w	8001a72 <__ieee754_pow+0x3a>
 800244a:	4630      	mov	r0, r6
 800244c:	4639      	mov	r1, r7
 800244e:	f7ff bb10 	b.w	8001a72 <__ieee754_pow+0x3a>
 8002452:	460c      	mov	r4, r1
 8002454:	f7ff bb5e 	b.w	8001b14 <__ieee754_pow+0xdc>
 8002458:	2400      	movs	r4, #0
 800245a:	f7ff bb49 	b.w	8001af0 <__ieee754_pow+0xb8>
 800245e:	bf00      	nop
 8002460:	00000000 	.word	0x00000000
 8002464:	3fe62e43 	.word	0x3fe62e43
 8002468:	fefa39ef 	.word	0xfefa39ef
 800246c:	3fe62e42 	.word	0x3fe62e42
 8002470:	0ca86c39 	.word	0x0ca86c39
 8002474:	be205c61 	.word	0xbe205c61
 8002478:	72bea4d0 	.word	0x72bea4d0
 800247c:	3e663769 	.word	0x3e663769
 8002480:	c5d26bf1 	.word	0xc5d26bf1
 8002484:	3ebbbd41 	.word	0x3ebbbd41
 8002488:	af25de2c 	.word	0xaf25de2c
 800248c:	3f11566a 	.word	0x3f11566a
 8002490:	16bebd93 	.word	0x16bebd93
 8002494:	3f66c16c 	.word	0x3f66c16c
 8002498:	5555553e 	.word	0x5555553e
 800249c:	3fc55555 	.word	0x3fc55555
 80024a0:	fff00000 	.word	0xfff00000
 80024a4:	3ff00000 	.word	0x3ff00000
 80024a8:	4090cbff 	.word	0x4090cbff
 80024ac:	3f6f3400 	.word	0x3f6f3400
 80024b0:	3fe00000 	.word	0x3fe00000
 80024b4:	652b82fe 	.word	0x652b82fe
 80024b8:	3c971547 	.word	0x3c971547
 80024bc:	4090cc00 	.word	0x4090cc00

080024c0 <fabs>:
 80024c0:	ec51 0b10 	vmov	r0, r1, d0
 80024c4:	4602      	mov	r2, r0
 80024c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80024ca:	ec43 2b10 	vmov	d0, r2, r3
 80024ce:	4770      	bx	lr

080024d0 <scalbn>:
 80024d0:	b570      	push	{r4, r5, r6, lr}
 80024d2:	ec55 4b10 	vmov	r4, r5, d0
 80024d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80024da:	4606      	mov	r6, r0
 80024dc:	462b      	mov	r3, r5
 80024de:	b991      	cbnz	r1, 8002506 <scalbn+0x36>
 80024e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80024e4:	4323      	orrs	r3, r4
 80024e6:	d03d      	beq.n	8002564 <scalbn+0x94>
 80024e8:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <scalbn+0xf0>)
 80024ea:	4620      	mov	r0, r4
 80024ec:	4629      	mov	r1, r5
 80024ee:	2200      	movs	r2, #0
 80024f0:	f7fe f82e 	bl	8000550 <__aeabi_dmul>
 80024f4:	4b33      	ldr	r3, [pc, #204]	@ (80025c4 <scalbn+0xf4>)
 80024f6:	429e      	cmp	r6, r3
 80024f8:	4604      	mov	r4, r0
 80024fa:	460d      	mov	r5, r1
 80024fc:	da0f      	bge.n	800251e <scalbn+0x4e>
 80024fe:	a328      	add	r3, pc, #160	@ (adr r3, 80025a0 <scalbn+0xd0>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	e01e      	b.n	8002544 <scalbn+0x74>
 8002506:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800250a:	4291      	cmp	r1, r2
 800250c:	d10b      	bne.n	8002526 <scalbn+0x56>
 800250e:	4622      	mov	r2, r4
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd fe66 	bl	80001e4 <__adddf3>
 8002518:	4604      	mov	r4, r0
 800251a:	460d      	mov	r5, r1
 800251c:	e022      	b.n	8002564 <scalbn+0x94>
 800251e:	460b      	mov	r3, r1
 8002520:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002524:	3936      	subs	r1, #54	@ 0x36
 8002526:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800252a:	4296      	cmp	r6, r2
 800252c:	dd0d      	ble.n	800254a <scalbn+0x7a>
 800252e:	2d00      	cmp	r5, #0
 8002530:	a11d      	add	r1, pc, #116	@ (adr r1, 80025a8 <scalbn+0xd8>)
 8002532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002536:	da02      	bge.n	800253e <scalbn+0x6e>
 8002538:	a11d      	add	r1, pc, #116	@ (adr r1, 80025b0 <scalbn+0xe0>)
 800253a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800253e:	a31a      	add	r3, pc, #104	@ (adr r3, 80025a8 <scalbn+0xd8>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fe f804 	bl	8000550 <__aeabi_dmul>
 8002548:	e7e6      	b.n	8002518 <scalbn+0x48>
 800254a:	1872      	adds	r2, r6, r1
 800254c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8002550:	428a      	cmp	r2, r1
 8002552:	dcec      	bgt.n	800252e <scalbn+0x5e>
 8002554:	2a00      	cmp	r2, #0
 8002556:	dd08      	ble.n	800256a <scalbn+0x9a>
 8002558:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800255c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002560:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002564:	ec45 4b10 	vmov	d0, r4, r5
 8002568:	bd70      	pop	{r4, r5, r6, pc}
 800256a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800256e:	da08      	bge.n	8002582 <scalbn+0xb2>
 8002570:	2d00      	cmp	r5, #0
 8002572:	a10b      	add	r1, pc, #44	@ (adr r1, 80025a0 <scalbn+0xd0>)
 8002574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002578:	dac1      	bge.n	80024fe <scalbn+0x2e>
 800257a:	a10f      	add	r1, pc, #60	@ (adr r1, 80025b8 <scalbn+0xe8>)
 800257c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002580:	e7bd      	b.n	80024fe <scalbn+0x2e>
 8002582:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002586:	3236      	adds	r2, #54	@ 0x36
 8002588:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800258c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002590:	4620      	mov	r0, r4
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <scalbn+0xf8>)
 8002594:	4629      	mov	r1, r5
 8002596:	2200      	movs	r2, #0
 8002598:	e7d4      	b.n	8002544 <scalbn+0x74>
 800259a:	bf00      	nop
 800259c:	f3af 8000 	nop.w
 80025a0:	c2f8f359 	.word	0xc2f8f359
 80025a4:	01a56e1f 	.word	0x01a56e1f
 80025a8:	8800759c 	.word	0x8800759c
 80025ac:	7e37e43c 	.word	0x7e37e43c
 80025b0:	8800759c 	.word	0x8800759c
 80025b4:	fe37e43c 	.word	0xfe37e43c
 80025b8:	c2f8f359 	.word	0xc2f8f359
 80025bc:	81a56e1f 	.word	0x81a56e1f
 80025c0:	43500000 	.word	0x43500000
 80025c4:	ffff3cb0 	.word	0xffff3cb0
 80025c8:	3c900000 	.word	0x3c900000

080025cc <with_errno>:
 80025cc:	b510      	push	{r4, lr}
 80025ce:	ed2d 8b02 	vpush	{d8}
 80025d2:	eeb0 8a40 	vmov.f32	s16, s0
 80025d6:	eef0 8a60 	vmov.f32	s17, s1
 80025da:	4604      	mov	r4, r0
 80025dc:	f7ff f986 	bl	80018ec <__errno>
 80025e0:	eeb0 0a48 	vmov.f32	s0, s16
 80025e4:	eef0 0a68 	vmov.f32	s1, s17
 80025e8:	ecbd 8b02 	vpop	{d8}
 80025ec:	6004      	str	r4, [r0, #0]
 80025ee:	bd10      	pop	{r4, pc}

080025f0 <xflow>:
 80025f0:	4603      	mov	r3, r0
 80025f2:	b507      	push	{r0, r1, r2, lr}
 80025f4:	ec51 0b10 	vmov	r0, r1, d0
 80025f8:	b183      	cbz	r3, 800261c <xflow+0x2c>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002600:	e9cd 2300 	strd	r2, r3, [sp]
 8002604:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002608:	f7fd ffa2 	bl	8000550 <__aeabi_dmul>
 800260c:	ec41 0b10 	vmov	d0, r0, r1
 8002610:	2022      	movs	r0, #34	@ 0x22
 8002612:	b003      	add	sp, #12
 8002614:	f85d eb04 	ldr.w	lr, [sp], #4
 8002618:	f7ff bfd8 	b.w	80025cc <with_errno>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	e7ee      	b.n	8002600 <xflow+0x10>
 8002622:	0000      	movs	r0, r0
 8002624:	0000      	movs	r0, r0
	...

08002628 <__math_uflow>:
 8002628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002630 <__math_uflow+0x8>
 800262c:	f7ff bfe0 	b.w	80025f0 <xflow>
 8002630:	00000000 	.word	0x00000000
 8002634:	10000000 	.word	0x10000000

08002638 <__math_oflow>:
 8002638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002640 <__math_oflow+0x8>
 800263c:	f7ff bfd8 	b.w	80025f0 <xflow>
 8002640:	00000000 	.word	0x00000000
 8002644:	70000000 	.word	0x70000000

08002648 <__ieee754_sqrt>:
 8002648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264c:	4a68      	ldr	r2, [pc, #416]	@ (80027f0 <__ieee754_sqrt+0x1a8>)
 800264e:	ec55 4b10 	vmov	r4, r5, d0
 8002652:	43aa      	bics	r2, r5
 8002654:	462b      	mov	r3, r5
 8002656:	4621      	mov	r1, r4
 8002658:	d110      	bne.n	800267c <__ieee754_sqrt+0x34>
 800265a:	4622      	mov	r2, r4
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fd ff76 	bl	8000550 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd fdba 	bl	80001e4 <__adddf3>
 8002670:	4604      	mov	r4, r0
 8002672:	460d      	mov	r5, r1
 8002674:	ec45 4b10 	vmov	d0, r4, r5
 8002678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800267c:	2d00      	cmp	r5, #0
 800267e:	dc0e      	bgt.n	800269e <__ieee754_sqrt+0x56>
 8002680:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8002684:	4322      	orrs	r2, r4
 8002686:	d0f5      	beq.n	8002674 <__ieee754_sqrt+0x2c>
 8002688:	b19d      	cbz	r5, 80026b2 <__ieee754_sqrt+0x6a>
 800268a:	4622      	mov	r2, r4
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	f7fd fda6 	bl	80001e0 <__aeabi_dsub>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	f7fe f884 	bl	80007a4 <__aeabi_ddiv>
 800269c:	e7e8      	b.n	8002670 <__ieee754_sqrt+0x28>
 800269e:	152a      	asrs	r2, r5, #20
 80026a0:	d115      	bne.n	80026ce <__ieee754_sqrt+0x86>
 80026a2:	2000      	movs	r0, #0
 80026a4:	e009      	b.n	80026ba <__ieee754_sqrt+0x72>
 80026a6:	0acb      	lsrs	r3, r1, #11
 80026a8:	3a15      	subs	r2, #21
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0fa      	beq.n	80026a6 <__ieee754_sqrt+0x5e>
 80026b0:	e7f7      	b.n	80026a2 <__ieee754_sqrt+0x5a>
 80026b2:	462a      	mov	r2, r5
 80026b4:	e7fa      	b.n	80026ac <__ieee754_sqrt+0x64>
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	3001      	adds	r0, #1
 80026ba:	02dc      	lsls	r4, r3, #11
 80026bc:	d5fb      	bpl.n	80026b6 <__ieee754_sqrt+0x6e>
 80026be:	1e44      	subs	r4, r0, #1
 80026c0:	1b12      	subs	r2, r2, r4
 80026c2:	f1c0 0420 	rsb	r4, r0, #32
 80026c6:	fa21 f404 	lsr.w	r4, r1, r4
 80026ca:	4323      	orrs	r3, r4
 80026cc:	4081      	lsls	r1, r0
 80026ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026da:	07d2      	lsls	r2, r2, #31
 80026dc:	bf5c      	itt	pl
 80026de:	005b      	lslpl	r3, r3, #1
 80026e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80026e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80026e8:	bf58      	it	pl
 80026ea:	0049      	lslpl	r1, r1, #1
 80026ec:	2600      	movs	r6, #0
 80026ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80026f2:	106d      	asrs	r5, r5, #1
 80026f4:	0049      	lsls	r1, r1, #1
 80026f6:	2016      	movs	r0, #22
 80026f8:	4632      	mov	r2, r6
 80026fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80026fe:	1917      	adds	r7, r2, r4
 8002700:	429f      	cmp	r7, r3
 8002702:	bfde      	ittt	le
 8002704:	193a      	addle	r2, r7, r4
 8002706:	1bdb      	suble	r3, r3, r7
 8002708:	1936      	addle	r6, r6, r4
 800270a:	0fcf      	lsrs	r7, r1, #31
 800270c:	3801      	subs	r0, #1
 800270e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8002712:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8002716:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800271a:	d1f0      	bne.n	80026fe <__ieee754_sqrt+0xb6>
 800271c:	4604      	mov	r4, r0
 800271e:	2720      	movs	r7, #32
 8002720:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8002724:	429a      	cmp	r2, r3
 8002726:	eb00 0e0c 	add.w	lr, r0, ip
 800272a:	db02      	blt.n	8002732 <__ieee754_sqrt+0xea>
 800272c:	d113      	bne.n	8002756 <__ieee754_sqrt+0x10e>
 800272e:	458e      	cmp	lr, r1
 8002730:	d811      	bhi.n	8002756 <__ieee754_sqrt+0x10e>
 8002732:	f1be 0f00 	cmp.w	lr, #0
 8002736:	eb0e 000c 	add.w	r0, lr, ip
 800273a:	da42      	bge.n	80027c2 <__ieee754_sqrt+0x17a>
 800273c:	2800      	cmp	r0, #0
 800273e:	db40      	blt.n	80027c2 <__ieee754_sqrt+0x17a>
 8002740:	f102 0801 	add.w	r8, r2, #1
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	458e      	cmp	lr, r1
 8002748:	bf88      	it	hi
 800274a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800274e:	eba1 010e 	sub.w	r1, r1, lr
 8002752:	4464      	add	r4, ip
 8002754:	4642      	mov	r2, r8
 8002756:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800275a:	3f01      	subs	r7, #1
 800275c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8002760:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8002764:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002768:	d1dc      	bne.n	8002724 <__ieee754_sqrt+0xdc>
 800276a:	4319      	orrs	r1, r3
 800276c:	d01b      	beq.n	80027a6 <__ieee754_sqrt+0x15e>
 800276e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80027f4 <__ieee754_sqrt+0x1ac>
 8002772:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80027f8 <__ieee754_sqrt+0x1b0>
 8002776:	e9da 0100 	ldrd	r0, r1, [sl]
 800277a:	e9db 2300 	ldrd	r2, r3, [fp]
 800277e:	f7fd fd2f 	bl	80001e0 <__aeabi_dsub>
 8002782:	e9da 8900 	ldrd	r8, r9, [sl]
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4640      	mov	r0, r8
 800278c:	4649      	mov	r1, r9
 800278e:	f7fe f95b 	bl	8000a48 <__aeabi_dcmple>
 8002792:	b140      	cbz	r0, 80027a6 <__ieee754_sqrt+0x15e>
 8002794:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002798:	e9da 0100 	ldrd	r0, r1, [sl]
 800279c:	e9db 2300 	ldrd	r2, r3, [fp]
 80027a0:	d111      	bne.n	80027c6 <__ieee754_sqrt+0x17e>
 80027a2:	3601      	adds	r6, #1
 80027a4:	463c      	mov	r4, r7
 80027a6:	1072      	asrs	r2, r6, #1
 80027a8:	0863      	lsrs	r3, r4, #1
 80027aa:	07f1      	lsls	r1, r6, #31
 80027ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80027b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80027b4:	bf48      	it	mi
 80027b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80027ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80027be:	4618      	mov	r0, r3
 80027c0:	e756      	b.n	8002670 <__ieee754_sqrt+0x28>
 80027c2:	4690      	mov	r8, r2
 80027c4:	e7be      	b.n	8002744 <__ieee754_sqrt+0xfc>
 80027c6:	f7fd fd0d 	bl	80001e4 <__adddf3>
 80027ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4640      	mov	r0, r8
 80027d4:	4649      	mov	r1, r9
 80027d6:	f7fe f92d 	bl	8000a34 <__aeabi_dcmplt>
 80027da:	b120      	cbz	r0, 80027e6 <__ieee754_sqrt+0x19e>
 80027dc:	1ca0      	adds	r0, r4, #2
 80027de:	bf08      	it	eq
 80027e0:	3601      	addeq	r6, #1
 80027e2:	3402      	adds	r4, #2
 80027e4:	e7df      	b.n	80027a6 <__ieee754_sqrt+0x15e>
 80027e6:	1c63      	adds	r3, r4, #1
 80027e8:	f023 0401 	bic.w	r4, r3, #1
 80027ec:	e7db      	b.n	80027a6 <__ieee754_sqrt+0x15e>
 80027ee:	bf00      	nop
 80027f0:	7ff00000 	.word	0x7ff00000
 80027f4:	20000060 	.word	0x20000060
 80027f8:	20000058 	.word	0x20000058

080027fc <_init>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr

08002808 <_fini>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	bf00      	nop
 800280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280e:	bc08      	pop	{r3}
 8002810:	469e      	mov	lr, r3
 8002812:	4770      	bx	lr
