
balance_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002170  08002170  00003170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002188  08002188  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002188  08002188  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002188  08002188  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002188  08002188  00003188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800218c  0800218c  0000318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002190  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000054  080021e4  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080021e4  000041ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fec  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000083d  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  000068b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e8  00000000  00000000  00006b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f34  00000000  00000000  00006d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003819  00000000  00000000  0002fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae834  00000000  00000000  00033485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e1cb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e08  00000000  00000000  000e1d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000e2b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000054 	.word	0x20000054
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002158 	.word	0x08002158

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000058 	.word	0x20000058
 80001d4:	08002158 	.word	0x08002158

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <main>:
float constrain(float var, float min, float max);
uint32_t map(float in, float in_min, float in_max, float out_min, float out_max);


int main(void)
{
 8000b74:	b5b0      	push	{r4, r5, r7, lr}
 8000b76:	b0a4      	sub	sp, #144	@ 0x90
 8000b78:	af02      	add	r7, sp, #8

	clock_config();
 8000b7a:	f000 f97f 	bl	8000e7c <clock_config>
	motors_config();
 8000b7e:	f000 faa1 	bl	80010c4 <motors_config>

	encoder_config();
 8000b82:	f000 fb1b 	bl	80011bc <encoder_config>
	refresh_tim_config();
 8000b86:	f000 fb73 	bl	8001270 <refresh_tim_config>

	// ensure IMU connected
	while (!imu_config());
 8000b8a:	bf00      	nop
 8000b8c:	f000 fb98 	bl	80012c0 <imu_config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0fa      	beq.n	8000b8c <main+0x18>

	// Encoder PID constants
	const float encoder_kp = 0.00625;
 8000b96:	4ba9      	ldr	r3, [pc, #676]	@ (8000e3c <main+0x2c8>)
 8000b98:	66bb      	str	r3, [r7, #104]	@ 0x68
	const float encoder_ki = 0.0000285;
 8000b9a:	4ba9      	ldr	r3, [pc, #676]	@ (8000e40 <main+0x2cc>)
 8000b9c:	667b      	str	r3, [r7, #100]	@ 0x64
	const float encoder_kd = 0.00725;
 8000b9e:	4ba9      	ldr	r3, [pc, #676]	@ (8000e44 <main+0x2d0>)
 8000ba0:	663b      	str	r3, [r7, #96]	@ 0x60
	const float encoder_dt = 7 / 100.0;
 8000ba2:	4ba9      	ldr	r3, [pc, #676]	@ (8000e48 <main+0x2d4>)
 8000ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	// IMU PID constants
	const float imu_kp = 0.737;
 8000ba6:	4ba9      	ldr	r3, [pc, #676]	@ (8000e4c <main+0x2d8>)
 8000ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
	const float imu_kd = 0.04;
 8000baa:	4ba9      	ldr	r3, [pc, #676]	@ (8000e50 <main+0x2dc>)
 8000bac:	657b      	str	r3, [r7, #84]	@ 0x54
	const float imu_dt = 1 / 100.0;			// 100Hz fusion refresh rate
 8000bae:	4ba9      	ldr	r3, [pc, #676]	@ (8000e54 <main+0x2e0>)
 8000bb0:	653b      	str	r3, [r7, #80]	@ 0x50

	// Critical thresholds
	const float critical_angle = 18;	// after 18 degrees, there is no returning
 8000bb2:	4ba9      	ldr	r3, [pc, #676]	@ (8000e58 <main+0x2e4>)
 8000bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const float max_imu_pid = 10;
 8000bb6:	4ba9      	ldr	r3, [pc, #676]	@ (8000e5c <main+0x2e8>)
 8000bb8:	64bb      	str	r3, [r7, #72]	@ 0x48

	// don't select a target pitch greater or less than these values
	const float max_target_pitch = 5;
 8000bba:	4ba9      	ldr	r3, [pc, #676]	@ (8000e60 <main+0x2ec>)
 8000bbc:	647b      	str	r3, [r7, #68]	@ 0x44
	const float min_target_pitch = -5;
 8000bbe:	4ba9      	ldr	r3, [pc, #676]	@ (8000e64 <main+0x2f0>)
 8000bc0:	643b      	str	r3, [r7, #64]	@ 0x40


	const uint16_t min_pwm = 225;		// minimum speed when motors begin to turn
 8000bc2:	23e1      	movs	r3, #225	@ 0xe1
 8000bc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	const uint16_t max_pwm = TIM3->ARR;	// full duty cycle
 8000bc6:	4ba8      	ldr	r3, [pc, #672]	@ (8000e68 <main+0x2f4>)
 8000bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bca:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	int16_t roll_raw, heading_raw, pitch_raw;
	float roll, heading, pitch;

	float target_pitch;
	float pitch_err, last_pitch_err = 0;
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	// Encoder variables
	float encoder_integral = 0;
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const float max_encoder_integral = 500;
 8000bda:	4ba4      	ldr	r3, [pc, #656]	@ (8000e6c <main+0x2f8>)
 8000bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
	const float min_encoder_integral = -500;
 8000bde:	4ba4      	ldr	r3, [pc, #656]	@ (8000e70 <main+0x2fc>)
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
	const int32_t encoder_home = 0;			// bot origin
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t encoder_loop_cnt = 0;			// run encoder loop at a rate of ~14Hz instead of 100Hz
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	int32_t encoder_ticks, last_encoder_ticks = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	673b      	str	r3, [r7, #112]	@ 0x70

	// Average out 100 readings
	float sensor_offset = imu_calibrate();
 8000bf0:	f000 fc4c 	bl	800148c <imu_calibrate>
 8000bf4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	while (1)
	{

	  TIM5->SR &= ~TIM_SR_UIF;				// clear update interrupt flag
 8000bf8:	4b9e      	ldr	r3, [pc, #632]	@ (8000e74 <main+0x300>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a9d      	ldr	r2, [pc, #628]	@ (8000e74 <main+0x300>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6113      	str	r3, [r2, #16]
	  while (!(TIM5->SR & (TIM_SR_UIF)));	// wait for next fusion data
 8000c04:	bf00      	nop
 8000c06:	4b9b      	ldr	r3, [pc, #620]	@ (8000e74 <main+0x300>)
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f9      	beq.n	8000c06 <main+0x92>

	  // Run this loop at ~14Hz to allow time for motors to engage, makes for much smoother balancing
	  if (++encoder_loop_cnt == 7) {
 8000c12:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000c16:	3301      	adds	r3, #1
 8000c18:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8000c1c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000c20:	2b07      	cmp	r3, #7
 8000c22:	d150      	bne.n	8000cc6 <main+0x152>

		  // 768 encoder ticks per wheel revolution (TIM2->CNT will read 768)
		  // read encoder error and calculate target pitch
		  // ticks is < 0 when pitch > 0
		  encoder_ticks = TIM2->CNT - encoder_home;
 8000c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	677b      	str	r3, [r7, #116]	@ 0x74

		  float pitch_pid = encoder_kp * encoder_ticks
 8000c30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c3a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8000c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ encoder_ki * encoder_integral
 8000c42:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8000c46:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8000c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ encoder_kd * (encoder_ticks - last_encoder_ticks) / encoder_dt;
 8000c52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c60:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000c64:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000c68:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8000c6c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		  float pitch_pid = encoder_kp * encoder_ticks
 8000c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c74:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		  // small errors with give a smooth, linear response, but large errors will taper off
		  target_pitch = max_target_pitch * tanh(pitch_pid / max_target_pitch);
 8000c78:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c7a:	f7ff fc11 	bl	80004a0 <__aeabi_f2d>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000c86:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000c8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c8e:	ee16 0a90 	vmov	r0, s13
 8000c92:	f7ff fc05 	bl	80004a0 <__aeabi_f2d>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	ec43 2b10 	vmov	d0, r2, r3
 8000c9e:	f000 ff5b 	bl	8001b58 <tanh>
 8000ca2:	ec53 2b10 	vmov	r2, r3, d0
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	4629      	mov	r1, r5
 8000caa:	f7ff fc51 	bl	8000550 <__aeabi_dmul>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff ff0d 	bl	8000ad4 <__aeabi_d2f>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

		  encoder_loop_cnt = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	  }


	  // read orientation and convert to degrees
	  imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 8000cc6:	f107 0214 	add.w	r2, r7, #20
 8000cca:	f107 0112 	add.w	r1, r7, #18
 8000cce:	f107 0316 	add.w	r3, r7, #22
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fb5e 	bl	8001394 <imu_read_euler>
	  convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 8000cd8:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000cdc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000ce0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ce4:	f107 040c 	add.w	r4, r7, #12
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	f000 fb80 	bl	80013f8 <convert_euler>

	  // error is difference between current pitch and target pitch
	  pitch_err = pitch - target_pitch - sensor_offset;
 8000cf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cfc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000d00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d04:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24


	  float imu_pid = imu_kp * pitch_err
 8000d10:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8000d14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d18:	ee27 7a27 	vmul.f32	s14, s14, s15
			  	  	  + imu_kd * (pitch_err - last_pitch_err) / imu_dt;
 8000d1c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000d20:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8000d24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d28:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000d2c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000d30:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8000d34:	eec6 7a26 	vdiv.f32	s15, s12, s13
	  float imu_pid = imu_kp * pitch_err
 8000d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d3c:	edc7 7a08 	vstr	s15, [r7, #32]

	  // use absolute value of controller to select pwm duty value
	  // direction of motors is determined by sign of pid_out
	  float imu_pid_abs = fabs(imu_pid);
 8000d40:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d44:	eef0 7ae7 	vabs.f32	s15, s15
 8000d48:	edc7 7a07 	vstr	s15, [r7, #28]

	  // limit the top of the controller
	  imu_pid_abs = constrain(imu_pid_abs, 0, max_imu_pid);
 8000d4c:	ed97 1a12 	vldr	s2, [r7, #72]	@ 0x48
 8000d50:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8000e78 <main+0x304>
 8000d54:	ed97 0a07 	vldr	s0, [r7, #28]
 8000d58:	f000 fbe6 	bl	8001528 <constrain>
 8000d5c:	ed87 0a07 	vstr	s0, [r7, #28]

	  // generate PWM based on PID controller
	  uint32_t pwm = map(imu_pid_abs, 0, max_imu_pid, min_pwm, max_pwm);
 8000d60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000d6c:	ee07 3a10 	vmov	s14, r3
 8000d70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000d74:	eeb0 2a47 	vmov.f32	s4, s14
 8000d78:	eef0 1a67 	vmov.f32	s3, s15
 8000d7c:	ed97 1a12 	vldr	s2, [r7, #72]	@ 0x48
 8000d80:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8000e78 <main+0x304>
 8000d84:	ed97 0a07 	vldr	s0, [r7, #28]
 8000d88:	f000 fbf7 	bl	800157a <map>
 8000d8c:	61b8      	str	r0, [r7, #24]

	  uint8_t motor_dir;

	  if (imu_pid > 0)				motor_dir = MOTOR_FWD;
 8000d8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9a:	dd03      	ble.n	8000da4 <main+0x230>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000da2:	e002      	b.n	8000daa <main+0x236>
	  else							motor_dir = MOTOR_BACKWD;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	  // if robot passes critical angle, turn off
	  if (fabs(pitch) > critical_angle) {
 8000daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dae:	eef0 7ae7 	vabs.f32	s15, s15
 8000db2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbe:	d50e      	bpl.n	8000dde <main+0x26a>

		  motors_set_speed(MOTOR_LEFT, motor_dir, 0);
 8000dc0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f999 	bl	8001100 <motors_set_speed>
		  motors_set_speed(MOTOR_RIGHT, motor_dir, 0);
 8000dce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f000 f992 	bl	8001100 <motors_set_speed>
		  continue;
 8000ddc:	e02d      	b.n	8000e3a <main+0x2c6>
	  }


	  motors_set_speed(MOTOR_LEFT, motor_dir, pwm);
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000de6:	4619      	mov	r1, r3
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f989 	bl	8001100 <motors_set_speed>
	  motors_set_speed(MOTOR_RIGHT, motor_dir, pwm);
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000df6:	4619      	mov	r1, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 f981 	bl	8001100 <motors_set_speed>

	  last_pitch_err = pitch_err;
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  last_encoder_ticks = encoder_ticks;
 8000e04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e06:	673b      	str	r3, [r7, #112]	@ 0x70
	  encoder_integral += encoder_ticks * encoder_dt;
 8000e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e0a:	ee07 3a90 	vmov	s15, r3
 8000e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e12:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e1a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8000e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e22:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	  encoder_integral = constrain(encoder_integral, min_encoder_integral, max_encoder_integral);
 8000e26:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8000e2a:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8000e2e:	ed97 0a1f 	vldr	s0, [r7, #124]	@ 0x7c
 8000e32:	f000 fb79 	bl	8001528 <constrain>
 8000e36:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
	{
 8000e3a:	e6dd      	b.n	8000bf8 <main+0x84>
 8000e3c:	3bcccccd 	.word	0x3bcccccd
 8000e40:	37ef1349 	.word	0x37ef1349
 8000e44:	3bed9168 	.word	0x3bed9168
 8000e48:	3d8f5c29 	.word	0x3d8f5c29
 8000e4c:	3f3cac08 	.word	0x3f3cac08
 8000e50:	3d23d70a 	.word	0x3d23d70a
 8000e54:	3c23d70a 	.word	0x3c23d70a
 8000e58:	41900000 	.word	0x41900000
 8000e5c:	41200000 	.word	0x41200000
 8000e60:	40a00000 	.word	0x40a00000
 8000e64:	c0a00000 	.word	0xc0a00000
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	43fa0000 	.word	0x43fa0000
 8000e70:	c3fa0000 	.word	0xc3fa0000
 8000e74:	40000c00 	.word	0x40000c00
 8000e78:	00000000 	.word	0x00000000

08000e7c <clock_config>:

  }
}

void clock_config() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0

	// 16 MHz HSI oscillator is default on reset, but select anyways
	RCC->CR |= RCC_CR_HSION;
 8000e82:	4b42      	ldr	r3, [pc, #264]	@ (8000f8c <clock_config+0x110>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a41      	ldr	r2, [pc, #260]	@ (8000f8c <clock_config+0x110>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
	// wait for HSI to be ready
	while (!((RCC->CR) & RCC_CR_HSIRDY));
 8000e8e:	bf00      	nop
 8000e90:	4b3e      	ldr	r3, [pc, #248]	@ (8000f8c <clock_config+0x110>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f9      	beq.n	8000e90 <clock_config+0x14>

	// enable power interface clock for APB1
	RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f8c <clock_config+0x110>)
 8000e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ea2:	641a      	str	r2, [r3, #64]	@ 0x40

	// configure VCO to scale 2 per CubeMX
	PWR->CR |= PWR_CR_VOS_1;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8000f90 <clock_config+0x114>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a39      	ldr	r2, [pc, #228]	@ (8000f90 <clock_config+0x114>)
 8000eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eae:	6013      	str	r3, [r2, #0]
	PWR->CR &= ~PWR_CR_VOS_0;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	@ (8000f90 <clock_config+0x114>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a36      	ldr	r2, [pc, #216]	@ (8000f90 <clock_config+0x114>)
 8000eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000eba:	6013      	str	r3, [r2, #0]

	// configure FLASH
	// instruction cache, prefetch enable, and data cache enabled
	uint32_t flash;
	flash = FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 8000ebc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ec0:	60fb      	str	r3, [r7, #12]
	flash |= 2;		// 2 wait states for flash
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
	FLASH->ACR = flash;
 8000eca:	4a32      	ldr	r2, [pc, #200]	@ (8000f94 <clock_config+0x118>)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6013      	str	r3, [r2, #0]

	// configure bus prescalers
	uint32_t cfgr = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_PPRE2_2;		// APB2 prescaler of 1 (84MHz)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000eda:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_PPRE1_2;		// APB1 prescaler of 2 (42MHZ)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ee2:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_HPRE;			// AHB prescaler of 1 (84MHz)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000eea:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000eec:	4a27      	ldr	r2, [pc, #156]	@ (8000f8c <clock_config+0x110>)
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	6093      	str	r3, [r2, #8]

	// configure main PLL
	uint32_t pll_cfg = RCC->PLLCFGR;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	@ (8000f8c <clock_config+0x110>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	607b      	str	r3, [r7, #4]
	pll_cfg &= ~RCC_PLLCFGR_PLLQ;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000efe:	607b      	str	r3, [r7, #4]
	pll_cfg |= RCC_PLLCFGR_PLLQ_2; // configure Q prescaler for USB, SDIO, RNG clocks (/4)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f06:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLP;	// main PLL division factor of 2
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000f0e:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLN;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f1a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 168UL << 6;	// pll multiplication factor for VCO (x168)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 8000f22:	607b      	str	r3, [r7, #4]

	pll_cfg &= ~RCC_PLLCFGR_PLLM;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f2a:	607b      	str	r3, [r7, #4]
	pll_cfg |= 16UL << 0;	// pll division factor for main PLL and audio PLL (/16)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	607b      	str	r3, [r7, #4]

	RCC->PLLCFGR = pll_cfg;
 8000f34:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <clock_config+0x110>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6053      	str	r3, [r2, #4]

	// enable PLL and wait for ready
	RCC->CR |= RCC_CR_PLLON;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <clock_config+0x110>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <clock_config+0x110>)
 8000f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f44:	6013      	str	r3, [r2, #0]
	while (!((RCC->CR) & RCC_CR_PLLRDY));
 8000f46:	bf00      	nop
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <clock_config+0x110>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f9      	beq.n	8000f48 <clock_config+0xcc>

	// select clock source
	cfgr = RCC->CFGR;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <clock_config+0x110>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	60bb      	str	r3, [r7, #8]
	cfgr |= RCC_CFGR_SW_1;		// select PLL as system clock
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	60bb      	str	r3, [r7, #8]
	cfgr &= ~RCC_CFGR_SW_0;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
	RCC->CFGR = cfgr;
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <clock_config+0x110>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	6093      	str	r3, [r2, #8]

	// wait for PLL clock source to become active
	while (!((RCC->CFGR) & RCC_CFGR_SWS_1));
 8000f70:	bf00      	nop
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <clock_config+0x110>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <clock_config+0xf6>
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40007000 	.word	0x40007000
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <pwm_config>:

void pwm_config() {
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	// TIM3_CH3 is PB0 (A3)
	// TIM3_CH4 is PB1 (PIN 24)
	// CH1 and CH2 are used to drive left motor
	// CH3 and CH4 are used to drive right motor

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;							// enable TIM3 clock
 8000f9c:	4b45      	ldr	r3, [pc, #276]	@ (80010b4 <pwm_config+0x11c>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	4a44      	ldr	r2, [pc, #272]	@ (80010b4 <pwm_config+0x11c>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;	// enable GPIOA and B clock
 8000fa8:	4b42      	ldr	r3, [pc, #264]	@ (80010b4 <pwm_config+0x11c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a41      	ldr	r2, [pc, #260]	@ (80010b4 <pwm_config+0x11c>)
 8000fae:	f043 0303 	orr.w	r3, r3, #3
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30

	// select alternate function mode for PB0 and PB1
	GPIOB->MODER |= GPIO_MODER_MODER0_1 | GPIO_MODER_MODER1_1;
 8000fb4:	4b40      	ldr	r3, [pc, #256]	@ (80010b8 <pwm_config+0x120>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a3f      	ldr	r2, [pc, #252]	@ (80010b8 <pwm_config+0x120>)
 8000fba:	f043 030a 	orr.w	r3, r3, #10
 8000fbe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0);
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80010b8 <pwm_config+0x120>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a3c      	ldr	r2, [pc, #240]	@ (80010b8 <pwm_config+0x120>)
 8000fc6:	f023 0305 	bic.w	r3, r3, #5
 8000fca:	6013      	str	r3, [r2, #0]
	// select alternate function mode for PA6 and PA7
	GPIOA->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <pwm_config+0x124>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80010bc <pwm_config+0x124>)
 8000fd2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000fd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
 8000fd8:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <pwm_config+0x124>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a37      	ldr	r2, [pc, #220]	@ (80010bc <pwm_config+0x124>)
 8000fde:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8000fe2:	6013      	str	r3, [r2, #0]

	// select alternate function mode 2 for PB0 and PB1
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 8000fe4:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <pwm_config+0x120>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4a33      	ldr	r2, [pc, #204]	@ (80010b8 <pwm_config+0x120>)
 8000fea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fee:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL1_1;
 8000ff0:	4b31      	ldr	r3, [pc, #196]	@ (80010b8 <pwm_config+0x120>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a30      	ldr	r2, [pc, #192]	@ (80010b8 <pwm_config+0x120>)
 8000ff6:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000ffa:	6213      	str	r3, [r2, #32]
	// select alternate function mode 2 for PA6 and PA7
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL6 | GPIO_AFRL_AFRL7);
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <pwm_config+0x124>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <pwm_config+0x124>)
 8001002:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001006:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL7_1;
 8001008:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <pwm_config+0x124>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a2b      	ldr	r2, [pc, #172]	@ (80010bc <pwm_config+0x124>)
 800100e:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8001012:	6213      	str	r3, [r2, #32]

	TIM3->CR1 = 0;		// no clock division, edge aligned, up counter, counter disabled
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <pwm_config+0x128>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
	TIM3->PSC = 0;		// /1 prescaler
 800101a:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <pwm_config+0x128>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM3->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;		// configure TIM3_CH1 (PA6) to PWM mode
 8001020:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <pwm_config+0x128>)
 8001022:	2260      	movs	r2, #96	@ 0x60
 8001024:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;		// configure TIM3_CH2 (PA7) to PWM mode
 8001026:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <pwm_config+0x128>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	4a25      	ldr	r2, [pc, #148]	@ (80010c0 <pwm_config+0x128>)
 800102c:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001030:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC2PE;		// output compare 1 and 2 preload enable
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <pwm_config+0x128>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a22      	ldr	r2, [pc, #136]	@ (80010c0 <pwm_config+0x128>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6193      	str	r3, [r2, #24]

	TIM3->CCMR2 = TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;		// configure TIM3_CH3 (PB0) to PWM mode
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <pwm_config+0x128>)
 8001044:	2260      	movs	r2, #96	@ 0x60
 8001046:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;		// configure TIM3_CH4 (PB1) to PWM mode
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <pwm_config+0x128>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	4a1c      	ldr	r2, [pc, #112]	@ (80010c0 <pwm_config+0x128>)
 800104e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001052:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE | TIM_CCMR2_OC4PE;		// preload register enable
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <pwm_config+0x128>)
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	4a19      	ldr	r2, [pc, #100]	@ (80010c0 <pwm_config+0x128>)
 800105a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	61d3      	str	r3, [r2, #28]

	TIM3->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;		// active high, output channels enabled
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <pwm_config+0x128>)
 8001066:	f241 1211 	movw	r2, #4369	@ 0x1111
 800106a:	621a      	str	r2, [r3, #32]


	TIM3->ARR = 1680;		// output frequency 50kHz
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <pwm_config+0x128>)
 800106e:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCR1 = 0;			// pwm duty cycle of 0
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <pwm_config+0x128>)
 8001076:	2200      	movs	r2, #0
 8001078:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 0;
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <pwm_config+0x128>)
 800107c:	2200      	movs	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = 0;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <pwm_config+0x128>)
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <pwm_config+0x128>)
 8001088:	2200      	movs	r2, #0
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM3->CR1 = TIM_CR1_ARPE;	// auto reload register preload enable
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <pwm_config+0x128>)
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	601a      	str	r2, [r3, #0]

	TIM3->EGR = TIM_EGR_UG;		// reinitiliaze counter and update registers
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <pwm_config+0x128>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]

	TIM3->CNT = 0;				// reset counter
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <pwm_config+0x128>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM3->CR1 |= TIM_CR1_CEN;	// enable counter
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <pwm_config+0x128>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <pwm_config+0x128>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40000400 	.word	0x40000400

080010c4 <motors_config>:


void motors_config() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

	pwm_config();
 80010c8:	f7ff ff66 	bl	8000f98 <pwm_config>

	// DRV8833 sleep is pin D3
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <motors_config+0x34>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <motors_config+0x34>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6313      	str	r3, [r2, #48]	@ 0x30

	// configure D3 output
	GPIOA->MODER |= GPIO_MODER_MODER3_0;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <motors_config+0x38>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <motors_config+0x38>)
 80010de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER3_1;
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <motors_config+0x38>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <motors_config+0x38>)
 80010ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80010ee:	6013      	str	r3, [r2, #0]

	motors_en();
 80010f0:	f000 f854 	bl	800119c <motors_en>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <motors_set_speed>:

void motors_set_speed(uint8_t motor, uint8_t dir, uint16_t pwm) {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	460b      	mov	r3, r1
 800110c:	71bb      	strb	r3, [r7, #6]
 800110e:	4613      	mov	r3, r2
 8001110:	80bb      	strh	r3, [r7, #4]

	// to set forward PWM on DRV8833, IN1 = PWM, IN2 = 1
	// to set backward PWM, IN1 = 1, IN2 = PWM
	// these are for slow decay mode, enabling responsive motors

	if (motor == MOTOR_LEFT) {
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d11b      	bne.n	8001150 <motors_set_speed+0x50>

		if (dir == MOTOR_FWD) {
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10a      	bne.n	8001134 <motors_set_speed+0x34>

			TIM3->CCR1 = TIM3->ARR - pwm;			// inverse of pwm for slow decay
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <motors_set_speed+0x98>)
 8001120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	491c      	ldr	r1, [pc, #112]	@ (8001198 <motors_set_speed+0x98>)
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	634b      	str	r3, [r1, #52]	@ 0x34
			TIM3->CCR2 = TIM3->ARR;
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <motors_set_speed+0x98>)
 800112c:	4a1a      	ldr	r2, [pc, #104]	@ (8001198 <motors_set_speed+0x98>)
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	6393      	str	r3, [r2, #56]	@ 0x38

			TIM3->CCR4 = TIM3->ARR;
			TIM3->CCR3 = TIM3->ARR - pwm;
		}
	}
}
 8001132:	e02b      	b.n	800118c <motors_set_speed+0x8c>
		else if (dir == MOTOR_BACKWD){
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d128      	bne.n	800118c <motors_set_speed+0x8c>
			TIM3->CCR1 = TIM3->ARR;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <motors_set_speed+0x98>)
 800113c:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <motors_set_speed+0x98>)
 800113e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001140:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM3->CCR2 = TIM3->ARR - pwm;
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <motors_set_speed+0x98>)
 8001144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	4913      	ldr	r1, [pc, #76]	@ (8001198 <motors_set_speed+0x98>)
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800114e:	e01d      	b.n	800118c <motors_set_speed+0x8c>
	else if (motor == MOTOR_RIGHT) {
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d11a      	bne.n	800118c <motors_set_speed+0x8c>
		if (dir == MOTOR_FWD) {
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10a      	bne.n	8001172 <motors_set_speed+0x72>
			TIM3->CCR4 = TIM3->ARR - pwm;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <motors_set_speed+0x98>)
 800115e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001160:	88bb      	ldrh	r3, [r7, #4]
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <motors_set_speed+0x98>)
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	640b      	str	r3, [r1, #64]	@ 0x40
			TIM3->CCR3 = TIM3->ARR;
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <motors_set_speed+0x98>)
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <motors_set_speed+0x98>)
 800116c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001170:	e00c      	b.n	800118c <motors_set_speed+0x8c>
		else if (dir == MOTOR_BACKWD) {
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d109      	bne.n	800118c <motors_set_speed+0x8c>
			TIM3->CCR4 = TIM3->ARR;
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <motors_set_speed+0x98>)
 800117a:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <motors_set_speed+0x98>)
 800117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117e:	6413      	str	r3, [r2, #64]	@ 0x40
			TIM3->CCR3 = TIM3->ARR - pwm;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <motors_set_speed+0x98>)
 8001182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001184:	88bb      	ldrh	r3, [r7, #4]
 8001186:	4904      	ldr	r1, [pc, #16]	@ (8001198 <motors_set_speed+0x98>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40000400 	.word	0x40000400

0800119c <motors_en>:


void motors_en() {
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

	// turn on PA3 to disable sleep DRV8833
	GPIOA->ODR |= GPIO_ODR_OD3;
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <motors_en+0x1c>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <motors_en+0x1c>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6153      	str	r3, [r2, #20]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000

080011bc <encoder_config>:
	// turn off PA3 to sleep DRV8833
	GPIOA->ODR &= ~GPIO_ODR_OD3;
}


void encoder_config() {
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;		// enable TIM2 clock
 80011c0:	4b29      	ldr	r3, [pc, #164]	@ (8001268 <encoder_config+0xac>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	4a28      	ldr	r2, [pc, #160]	@ (8001268 <encoder_config+0xac>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;	// enable GPIOA clock
 80011cc:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <encoder_config+0xac>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	4a25      	ldr	r2, [pc, #148]	@ (8001268 <encoder_config+0xac>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6313      	str	r3, [r2, #48]	@ 0x30

	// alternate function mode on PA0 and PA1
	GPIOA->MODER |= GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <encoder_config+0xb0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a23      	ldr	r2, [pc, #140]	@ (800126c <encoder_config+0xb0>)
 80011de:	f043 030a 	orr.w	r3, r3, #10
 80011e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0);
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <encoder_config+0xb0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a20      	ldr	r2, [pc, #128]	@ (800126c <encoder_config+0xb0>)
 80011ea:	f023 0305 	bic.w	r3, r3, #5
 80011ee:	6013      	str	r3, [r2, #0]

	// select AF1 for PA0 and PA1 (TIM2_CH1 and TIM2_CH2)
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL0 | GPIO_AFRL_AFRL1);
 80011f0:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <encoder_config+0xb0>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <encoder_config+0xb0>)
 80011f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL0_0 | GPIO_AFRL_AFRL1_0;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <encoder_config+0xb0>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a1a      	ldr	r2, [pc, #104]	@ (800126c <encoder_config+0xb0>)
 8001202:	f043 0311 	orr.w	r3, r3, #17
 8001206:	6213      	str	r3, [r2, #32]

	// configure internal pullups for encoder open drain output
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <encoder_config+0xb0>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	4a17      	ldr	r2, [pc, #92]	@ (800126c <encoder_config+0xb0>)
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0 | GPIO_PUPDR_PUPD1_0;
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <encoder_config+0xb0>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <encoder_config+0xb0>)
 800121a:	f043 0305 	orr.w	r3, r3, #5
 800121e:	60d3      	str	r3, [r2, #12]

	// encoder mode 3 - counts up/down on both TI1FP1 and TI2FP2 edges depending on other input level
	TIM2->SMCR = TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8001220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001224:	2203      	movs	r2, #3
 8001226:	609a      	str	r2, [r3, #8]

	// CC1 and CC2 channels are inputs - IC1 mapped to T1, IC2 mapped to T2
	TIM2->CCMR1 = TIM_CCMR1_CC2S_0 | TIM_CCMR1_CC1S_0;
 8001228:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800122c:	f240 1201 	movw	r2, #257	@ 0x101
 8001230:	619a      	str	r2, [r3, #24]
	TIM2->CCER = 0;			// non inverted inputs
 8001232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]

	TIM2->ARR = 0xffffffff;		// set ARR to be max of 32-bit counter
 800123a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800123e:	f04f 32ff 	mov.w	r2, #4294967295
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CNT = 0;					// reset home position
 8001244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;		// enable counter
 800124c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <refresh_tim_config>:


void refresh_tim_config() {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;		// enable TIM5 clock
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <refresh_tim_config+0x44>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <refresh_tim_config+0x44>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM5->PSC = 0;				// /1 prescaler
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <refresh_tim_config+0x48>)
 8001282:	2200      	movs	r2, #0
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM5->ARR = 840000;			// 84MHz clock on APB1 for TIM5, generates a timer overflow at 100Hz
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <refresh_tim_config+0x48>)
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <refresh_tim_config+0x4c>)
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM5->CNT = 0;				// reset counter
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <refresh_tim_config+0x48>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->EGR |= TIM_EGR_UG;	// update registers
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <refresh_tim_config+0x48>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <refresh_tim_config+0x48>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6153      	str	r3, [r2, #20]

	TIM5->CR1 |= TIM_CR1_CEN;	// enable counter
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <refresh_tim_config+0x48>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <refresh_tim_config+0x48>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40000c00 	.word	0x40000c00
 80012bc:	000cd140 	.word	0x000cd140

080012c0 <imu_config>:


uint8_t imu_config() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0

	i2c1_config();
 80012c6:	f000 fa09 	bl	80016dc <i2c1_config>

	while (!imu_test());		// read chip id
 80012ca:	bf00      	nop
 80012cc:	f000 f854 	bl	8001378 <imu_test>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0fa      	beq.n	80012cc <imu_config+0xc>

	// on restart, configure registers by setting mode to CONFIG
	const uint8_t opr_reg = 0x3d;
 80012d6:	233d      	movs	r3, #61	@ 0x3d
 80012d8:	73fb      	strb	r3, [r7, #15]
	const uint8_t opr_mode_config = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	73bb      	strb	r3, [r7, #14]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_config);
 80012de:	7bba      	ldrb	r2, [r7, #14]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2050      	movs	r0, #80	@ 0x50
 80012e6:	f000 fa5b 	bl	80017a0 <i2c1_writebyte>

	// delay >19 ms
	for (volatile int i = 0; i < 2000000; i++);
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e002      	b.n	80012f6 <imu_config+0x36>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3301      	adds	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001374 <imu_config+0xb4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	ddf8      	ble.n	80012f0 <imu_config+0x30>

	// select Euler angles in units of degrees
	const uint8_t unit_sel_reg = 0x3b;
 80012fe:	233b      	movs	r3, #59	@ 0x3b
 8001300:	737b      	strb	r3, [r7, #13]
	i2c1_writebyte(IMU_ADDR, unit_sel_reg, 0x80);
 8001302:	7b7b      	ldrb	r3, [r7, #13]
 8001304:	2280      	movs	r2, #128	@ 0x80
 8001306:	4619      	mov	r1, r3
 8001308:	2050      	movs	r0, #80	@ 0x50
 800130a:	f000 fa49 	bl	80017a0 <i2c1_writebyte>

	// for current setup, placement P3 is used (from BNO055 datasheet)
	// thus, AXIS_REMAP = 0x21 and AXIS_SIGN = 0x02
	const uint8_t axis_map_config_reg = 0x41;
 800130e:	2341      	movs	r3, #65	@ 0x41
 8001310:	733b      	strb	r3, [r7, #12]
	const uint8_t axis_map_sign_reg = 0x42;
 8001312:	2342      	movs	r3, #66	@ 0x42
 8001314:	72fb      	strb	r3, [r7, #11]
	i2c1_writebyte(IMU_ADDR, axis_map_config_reg, 0x21);
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	2221      	movs	r2, #33	@ 0x21
 800131a:	4619      	mov	r1, r3
 800131c:	2050      	movs	r0, #80	@ 0x50
 800131e:	f000 fa3f 	bl	80017a0 <i2c1_writebyte>
	i2c1_writebyte(IMU_ADDR, axis_map_sign_reg, 0x02);
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2202      	movs	r2, #2
 8001326:	4619      	mov	r1, r3
 8001328:	2050      	movs	r0, #80	@ 0x50
 800132a:	f000 fa39 	bl	80017a0 <i2c1_writebyte>

	// set up fusion sensor mode in OPR_MODE
	const uint8_t opr_mode_fusion = 0x08;
 800132e:	2308      	movs	r3, #8
 8001330:	72bb      	strb	r3, [r7, #10]
	i2c1_writebyte(IMU_ADDR, opr_reg, opr_mode_fusion);
 8001332:	7aba      	ldrb	r2, [r7, #10]
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4619      	mov	r1, r3
 8001338:	2050      	movs	r0, #80	@ 0x50
 800133a:	f000 fa31 	bl	80017a0 <i2c1_writebyte>

	// delay >7 ms
	for (volatile int i = 0; i < 2000000; i++);
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	e002      	b.n	800134a <imu_config+0x8a>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <imu_config+0xb4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	ddf8      	ble.n	8001344 <imu_config+0x84>

	// check POST register ST_RESULT
	// returns 1 if all sensors are working
	return ((i2c1_readbyte(IMU_ADDR, IMU_ST_RESULT_REG) & 0x0f) == 0x0f) ? 1 : 0;
 8001352:	2136      	movs	r1, #54	@ 0x36
 8001354:	2050      	movs	r0, #80	@ 0x50
 8001356:	f000 fa65 	bl	8001824 <i2c1_readbyte>
 800135a:	4603      	mov	r3, r0
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	2b0f      	cmp	r3, #15
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	001e847f 	.word	0x001e847f

08001378 <imu_test>:


uint8_t imu_test() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

	// returns 1 if correct chip id is read
	return (i2c1_readbyte(IMU_ADDR, IMU_WHO_AM_I_REG) == 0xa0) ? 1 : 0;
 800137c:	2100      	movs	r1, #0
 800137e:	2050      	movs	r0, #80	@ 0x50
 8001380:	f000 fa50 	bl	8001824 <i2c1_readbyte>
 8001384:	4603      	mov	r3, r0
 8001386:	2ba0      	cmp	r3, #160	@ 0xa0
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}

08001394 <imu_read_euler>:


void imu_read_euler(int16_t * roll_raw, int16_t * pitch_raw, int16_t * heading_raw) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]

	uint8_t raw_euler[6];			// 6 bytes total for euler angles
	const uint8_t start_addr = 0x1a;		// starting byte is heading LSB
 80013a0:	231a      	movs	r3, #26
 80013a2:	75fb      	strb	r3, [r7, #23]
	i2c1_readburst(IMU_ADDR, start_addr, 6, raw_euler);		// read 6 consecutive bytes
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	7df9      	ldrb	r1, [r7, #23]
 80013aa:	2206      	movs	r2, #6
 80013ac:	2050      	movs	r0, #80	@ 0x50
 80013ae:	f000 fa8d 	bl	80018cc <i2c1_readburst>
	*heading_raw = raw_euler[0] | (raw_euler[1] << 8);
 80013b2:	7c3b      	ldrb	r3, [r7, #16]
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	7c7b      	ldrb	r3, [r7, #17]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	801a      	strh	r2, [r3, #0]
	*roll_raw = raw_euler[2] | (raw_euler[3] << 8);
 80013c6:	7cbb      	ldrb	r3, [r7, #18]
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	801a      	strh	r2, [r3, #0]
	*pitch_raw = raw_euler[4] | (raw_euler[5] << 8);
 80013da:	7d3b      	ldrb	r3, [r7, #20]
 80013dc:	b21a      	sxth	r2, r3
 80013de:	7d7b      	ldrb	r3, [r7, #21]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	801a      	strh	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <convert_euler>:


void convert_euler(int16_t roll_raw, int16_t pitch_raw, int16_t heading_raw, float * roll, float * pitch, float * heading) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4603      	mov	r3, r0
 8001402:	81fb      	strh	r3, [r7, #14]
 8001404:	460b      	mov	r3, r1
 8001406:	81bb      	strh	r3, [r7, #12]
 8001408:	4613      	mov	r3, r2
 800140a:	817b      	strh	r3, [r7, #10]

	*roll = roll_raw / 16.0;		// 1 degree = 16 LSB
 800140c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f833 	bl	800047c <__aeabi_i2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <convert_euler+0x90>)
 800141c:	f7ff f9c2 	bl	80007a4 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fb54 	bl	8000ad4 <__aeabi_d2f>
 800142c:	4602      	mov	r2, r0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
	*pitch = pitch_raw / 16.0;
 8001432:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f820 	bl	800047c <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <convert_euler+0x90>)
 8001442:	f7ff f9af 	bl	80007a4 <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb41 	bl	8000ad4 <__aeabi_d2f>
 8001452:	4602      	mov	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]
	*heading = heading_raw / 16.0;
 8001458:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f80d 	bl	800047c <__aeabi_i2d>
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <convert_euler+0x90>)
 8001468:	f7ff f99c 	bl	80007a4 <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fb2e 	bl	8000ad4 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	601a      	str	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40300000 	.word	0x40300000

0800148c <imu_calibrate>:


float imu_calibrate() {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08b      	sub	sp, #44	@ 0x2c
 8001490:	af02      	add	r7, sp, #8

	float err = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]

	int16_t roll_raw, pitch_raw, heading_raw;
	float roll, pitch, heading;

	// average 100 readings to get error
	for (int i = 0; i < 100; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	e030      	b.n	8001500 <imu_calibrate+0x74>

		TIM5->SR &= ~TIM_SR_UIF;				// clear update interrupt flag
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <imu_calibrate+0x94>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001520 <imu_calibrate+0x94>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6113      	str	r3, [r2, #16]
		while (!(TIM5->SR & (TIM_SR_UIF)));		// wait for next fusion data
 80014aa:	bf00      	nop
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <imu_calibrate+0x94>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f9      	beq.n	80014ac <imu_calibrate+0x20>
		imu_read_euler(&roll_raw, &pitch_raw, &heading_raw);
 80014b8:	f107 0212 	add.w	r2, r7, #18
 80014bc:	f107 0114 	add.w	r1, r7, #20
 80014c0:	f107 0316 	add.w	r3, r7, #22
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff65 	bl	8001394 <imu_read_euler>
		convert_euler(roll_raw, pitch_raw, heading_raw, &roll, &pitch, &heading);
 80014ca:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80014ce:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80014d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80014d6:	f107 040c 	add.w	r4, r7, #12
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4623      	mov	r3, r4
 80014e6:	f7ff ff87 	bl	80013f8 <convert_euler>
		err += pitch;
 80014ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80014f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f6:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < 100; i++) {
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b63      	cmp	r3, #99	@ 0x63
 8001504:	ddcb      	ble.n	800149e <imu_calibrate+0x12>
	}

	return err / 100.0;
 8001506:	edd7 7a07 	vldr	s15, [r7, #28]
 800150a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001524 <imu_calibrate+0x98>
 800150e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001512:	eef0 7a66 	vmov.f32	s15, s13
}
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	3724      	adds	r7, #36	@ 0x24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	40000c00 	.word	0x40000c00
 8001524:	42c80000 	.word	0x42c80000

08001528 <constrain>:


float constrain(float var, float min, float max) {
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001532:	edc7 0a02 	vstr	s1, [r7, #8]
 8001536:	ed87 1a01 	vstr	s2, [r7, #4]

	// returns value in range [min, max]
	if (var > max)
 800153a:	ed97 7a03 	vldr	s14, [r7, #12]
 800153e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	dd01      	ble.n	8001550 <constrain+0x28>
		return max;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	e00b      	b.n	8001568 <constrain+0x40>
	else if (var < min)
 8001550:	ed97 7a03 	vldr	s14, [r7, #12]
 8001554:	edd7 7a02 	vldr	s15, [r7, #8]
 8001558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d501      	bpl.n	8001566 <constrain+0x3e>
		return min;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	e000      	b.n	8001568 <constrain+0x40>
	else
		return var;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <map>:


uint32_t map(float in, float in_min, float in_max, float out_min, float out_max) {
 800157a:	b480      	push	{r7}
 800157c:	b087      	sub	sp, #28
 800157e:	af00      	add	r7, sp, #0
 8001580:	ed87 0a05 	vstr	s0, [r7, #20]
 8001584:	edc7 0a04 	vstr	s1, [r7, #16]
 8001588:	ed87 1a03 	vstr	s2, [r7, #12]
 800158c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001590:	ed87 2a01 	vstr	s4, [r7, #4]

	// map function: output = output_start + ((output_end - output_start) / (input_end - input_start)) * (input - input_start)
	return (uint32_t) (out_min + ((out_max - out_min) / (in_max - in_min)) * (in - in_min));
 8001594:	ed97 7a01 	vldr	s14, [r7, #4]
 8001598:	edd7 7a02 	vldr	s15, [r7, #8]
 800159c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80015b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015cc:	ee17 3a90 	vmov	r3, s15
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f83f 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001698 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	@ (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800168e:	f000 fa3f 	bl	8001b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff fa6f 	bl	8000b74 <main>
  bx  lr    
 8001696:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001698:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80016a4:	08002190 	.word	0x08002190
  ldr r2, =_sbss
 80016a8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80016ac:	200001ac 	.word	0x200001ac

080016b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC_IRQHandler>
	...

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000070 	.word	0x20000070

080016dc <i2c1_config>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <i2c1_config+0x8c>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a20      	ldr	r2, [pc, #128]	@ (8001768 <i2c1_config+0x8c>)
 80016e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <i2c1_config+0x8c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001768 <i2c1_config+0x8c>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f8:	f000 f9b0 	bl	8001a5c <i2c1_release>
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <i2c1_config+0x90>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1a      	ldr	r2, [pc, #104]	@ (800176c <i2c1_config+0x90>)
 8001702:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <i2c1_config+0x90>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	@ (800176c <i2c1_config+0x90>)
 800170e:	f423 23a0 	bic.w	r3, r3, #327680	@ 0x50000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <i2c1_config+0x90>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <i2c1_config+0x90>)
 800171a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800171e:	6053      	str	r3, [r2, #4]
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <i2c1_config+0x90>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a11      	ldr	r2, [pc, #68]	@ (800176c <i2c1_config+0x90>)
 8001726:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800172a:	6093      	str	r3, [r2, #8]
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <i2c1_config+0x90>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <i2c1_config+0x90>)
 8001732:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001736:	6253      	str	r3, [r2, #36]	@ 0x24
 8001738:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <i2c1_config+0x94>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f000 f819 	bl	8001774 <i2c1_sw_rst>
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <i2c1_config+0x94>)
 8001744:	222a      	movs	r2, #42	@ 0x2a
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <i2c1_config+0x94>)
 800174a:	f248 022f 	movw	r2, #32815	@ 0x802f
 800174e:	61da      	str	r2, [r3, #28]
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <i2c1_config+0x94>)
 8001752:	220d      	movs	r2, #13
 8001754:	621a      	str	r2, [r3, #32]
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <i2c1_config+0x94>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <i2c1_config+0x94>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40020400 	.word	0x40020400
 8001770:	40005400 	.word	0x40005400

08001774 <i2c1_sw_rst>:
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <i2c1_sw_rst+0x28>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <i2c1_sw_rst+0x28>)
 800177e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <i2c1_sw_rst+0x28>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <i2c1_sw_rst+0x28>)
 800178a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40005400 	.word	0x40005400

080017a0 <i2c1_writebyte>:
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	460b      	mov	r3, r1
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	4613      	mov	r3, r2
 80017b0:	717b      	strb	r3, [r7, #5]
 80017b2:	bf00      	nop
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <i2c1_writebyte+0x80>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f9      	bne.n	80017b4 <i2c1_writebyte+0x14>
 80017c0:	f000 f904 	bl	80019cc <i2c1_start>
 80017c4:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <i2c1_writebyte+0x80>)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	6113      	str	r3, [r2, #16]
 80017ca:	bf00      	nop
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <i2c1_writebyte+0x80>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f9      	beq.n	80017cc <i2c1_writebyte+0x2c>
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <i2c1_writebyte+0x80>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	bf00      	nop
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <i2c1_writebyte+0x80>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f9      	beq.n	80017de <i2c1_writebyte+0x3e>
 80017ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <i2c1_writebyte+0x80>)
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	6113      	str	r3, [r2, #16]
 80017f0:	bf00      	nop
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <i2c1_writebyte+0x80>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f9      	beq.n	80017f2 <i2c1_writebyte+0x52>
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <i2c1_writebyte+0x80>)
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	6113      	str	r3, [r2, #16]
 8001804:	bf00      	nop
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <i2c1_writebyte+0x80>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f9      	beq.n	8001806 <i2c1_writebyte+0x66>
 8001812:	f000 f8f3 	bl	80019fc <i2c1_request_stop>
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40005400 	.word	0x40005400

08001824 <i2c1_readbyte>:
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	460a      	mov	r2, r1
 800182e:	71fb      	strb	r3, [r7, #7]
 8001830:	4613      	mov	r3, r2
 8001832:	71bb      	strb	r3, [r7, #6]
 8001834:	bf00      	nop
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <i2c1_readbyte+0xa4>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <i2c1_readbyte+0x12>
 8001842:	f000 f8c3 	bl	80019cc <i2c1_start>
 8001846:	4a20      	ldr	r2, [pc, #128]	@ (80018c8 <i2c1_readbyte+0xa4>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	6113      	str	r3, [r2, #16]
 800184c:	bf00      	nop
 800184e:	4b1e      	ldr	r3, [pc, #120]	@ (80018c8 <i2c1_readbyte+0xa4>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f9      	beq.n	800184e <i2c1_readbyte+0x2a>
 800185a:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <i2c1_readbyte+0xa4>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	bf00      	nop
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <i2c1_readbyte+0xa4>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f9      	beq.n	8001860 <i2c1_readbyte+0x3c>
 800186c:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <i2c1_readbyte+0xa4>)
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	6113      	str	r3, [r2, #16]
 8001872:	bf00      	nop
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <i2c1_readbyte+0xa4>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f9      	beq.n	8001874 <i2c1_readbyte+0x50>
 8001880:	f000 f8a4 	bl	80019cc <i2c1_start>
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <i2c1_readbyte+0xa4>)
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	bf00      	nop
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <i2c1_readbyte+0xa4>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f9      	beq.n	8001892 <i2c1_readbyte+0x6e>
 800189e:	f000 f8cd 	bl	8001a3c <i2c1_nack>
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <i2c1_readbyte+0xa4>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f000 f8a9 	bl	80019fc <i2c1_request_stop>
 80018aa:	bf00      	nop
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <i2c1_readbyte+0xa4>)
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f9      	beq.n	80018ac <i2c1_readbyte+0x88>
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <i2c1_readbyte+0xa4>)
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400

080018cc <i2c1_readburst>:
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	460b      	mov	r3, r1
 80018da:	71bb      	strb	r3, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	717b      	strb	r3, [r7, #5]
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06b      	beq.n	80019be <i2c1_readburst+0xf2>
 80018e6:	bf00      	nop
 80018e8:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <i2c1_readburst+0xfc>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f9      	bne.n	80018e8 <i2c1_readburst+0x1c>
 80018f4:	f000 f86a 	bl	80019cc <i2c1_start>
 80018f8:	4a33      	ldr	r2, [pc, #204]	@ (80019c8 <i2c1_readburst+0xfc>)
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	6113      	str	r3, [r2, #16]
 80018fe:	bf00      	nop
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f9      	beq.n	8001900 <i2c1_readburst+0x34>
 800190c:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <i2c1_readburst+0xfc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	bf00      	nop
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f9      	beq.n	8001912 <i2c1_readburst+0x46>
 800191e:	4a2a      	ldr	r2, [pc, #168]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	6113      	str	r3, [r2, #16]
 8001924:	bf00      	nop
 8001926:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f9      	beq.n	8001926 <i2c1_readburst+0x5a>
 8001932:	f000 f84b 	bl	80019cc <i2c1_start>
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	bf00      	nop
 8001944:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f9      	beq.n	8001944 <i2c1_readburst+0x78>
 8001950:	797b      	ldrb	r3, [r7, #5]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d001      	beq.n	800195a <i2c1_readburst+0x8e>
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	e013      	b.n	8001988 <i2c1_readburst+0xbc>
 8001960:	f000 f85c 	bl	8001a1c <i2c1_ack>
 8001964:	bf00      	nop
 8001966:	4b18      	ldr	r3, [pc, #96]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f9      	beq.n	8001966 <i2c1_readburst+0x9a>
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <i2c1_readburst+0xfc>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3301      	adds	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	797b      	ldrb	r3, [r7, #5]
 800198c:	3b01      	subs	r3, #1
 800198e:	429a      	cmp	r2, r3
 8001990:	dbe6      	blt.n	8001960 <i2c1_readburst+0x94>
 8001992:	f000 f853 	bl	8001a3c <i2c1_nack>
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <i2c1_readburst+0xd4>
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <i2c1_readburst+0xfc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f000 f82c 	bl	80019fc <i2c1_request_stop>
 80019a4:	bf00      	nop
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <i2c1_readburst+0xfc>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f9      	beq.n	80019a6 <i2c1_readburst+0xda>
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <i2c1_readburst+0xfc>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e000      	b.n	80019c0 <i2c1_readburst+0xf4>
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40005400 	.word	0x40005400

080019cc <i2c1_start>:
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <i2c1_start+0x2c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <i2c1_start+0x2c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	bf00      	nop
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <i2c1_start+0x2c>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f9      	beq.n	80019de <i2c1_start+0x12>
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40005400 	.word	0x40005400

080019fc <i2c1_request_stop>:
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <i2c1_request_stop+0x1c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <i2c1_request_stop+0x1c>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40005400 	.word	0x40005400

08001a1c <i2c1_ack>:
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <i2c1_ack+0x1c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <i2c1_ack+0x1c>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40005400 	.word	0x40005400

08001a3c <i2c1_nack>:
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <i2c1_nack+0x1c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <i2c1_nack+0x1c>)
 8001a46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40005400 	.word	0x40005400

08001a5c <i2c1_release>:
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <i2c1_release+0xa4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a26      	ldr	r2, [pc, #152]	@ (8001b00 <i2c1_release+0xa4>)
 8001a68:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b24      	ldr	r3, [pc, #144]	@ (8001b00 <i2c1_release+0xa4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <i2c1_release+0xa4>)
 8001a74:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <i2c1_release+0xa4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a20      	ldr	r2, [pc, #128]	@ (8001b00 <i2c1_release+0xa4>)
 8001a80:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a84:	6053      	str	r3, [r2, #4]
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <i2c1_release+0xa4>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b00 <i2c1_release+0xa4>)
 8001a8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a90:	6153      	str	r3, [r2, #20]
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e024      	b.n	8001ae2 <i2c1_release+0x86>
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <i2c1_release+0xa4>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <i2c1_release+0xa4>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa2:	6153      	str	r3, [r2, #20]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	e003      	b.n	8001ab2 <i2c1_release+0x56>
 8001aaa:	bf00      	nop
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ab8:	dbf7      	blt.n	8001aaa <i2c1_release+0x4e>
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <i2c1_release+0xa4>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <i2c1_release+0xa4>)
 8001ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	e003      	b.n	8001ad4 <i2c1_release+0x78>
 8001acc:	bf00      	nop
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ada:	dbf7      	blt.n	8001acc <i2c1_release+0x70>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	ddd7      	ble.n	8001a98 <i2c1_release+0x3c>
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <i2c1_release+0xa4>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <i2c1_release+0xa4>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af2:	6153      	str	r3, [r2, #20]
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40020400 	.word	0x40020400

08001b04 <__errno>:
 8001b04:	4b01      	ldr	r3, [pc, #4]	@ (8001b0c <__errno+0x8>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000004 	.word	0x20000004

08001b10 <__libc_init_array>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4d0d      	ldr	r5, [pc, #52]	@ (8001b48 <__libc_init_array+0x38>)
 8001b14:	4c0d      	ldr	r4, [pc, #52]	@ (8001b4c <__libc_init_array+0x3c>)
 8001b16:	1b64      	subs	r4, r4, r5
 8001b18:	10a4      	asrs	r4, r4, #2
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	42a6      	cmp	r6, r4
 8001b1e:	d109      	bne.n	8001b34 <__libc_init_array+0x24>
 8001b20:	4d0b      	ldr	r5, [pc, #44]	@ (8001b50 <__libc_init_array+0x40>)
 8001b22:	4c0c      	ldr	r4, [pc, #48]	@ (8001b54 <__libc_init_array+0x44>)
 8001b24:	f000 fb18 	bl	8002158 <_init>
 8001b28:	1b64      	subs	r4, r4, r5
 8001b2a:	10a4      	asrs	r4, r4, #2
 8001b2c:	2600      	movs	r6, #0
 8001b2e:	42a6      	cmp	r6, r4
 8001b30:	d105      	bne.n	8001b3e <__libc_init_array+0x2e>
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
 8001b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b38:	4798      	blx	r3
 8001b3a:	3601      	adds	r6, #1
 8001b3c:	e7ee      	b.n	8001b1c <__libc_init_array+0xc>
 8001b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b42:	4798      	blx	r3
 8001b44:	3601      	adds	r6, #1
 8001b46:	e7f2      	b.n	8001b2e <__libc_init_array+0x1e>
 8001b48:	08002188 	.word	0x08002188
 8001b4c:	08002188 	.word	0x08002188
 8001b50:	08002188 	.word	0x08002188
 8001b54:	0800218c 	.word	0x0800218c

08001b58 <tanh>:
 8001b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b5c:	ec57 6b10 	vmov	r6, r7, d0
 8001b60:	4a43      	ldr	r2, [pc, #268]	@ (8001c70 <tanh+0x118>)
 8001b62:	f027 4300 	bic.w	r3, r7, #2147483648	@ 0x80000000
 8001b66:	4293      	cmp	r3, r2
 8001b68:	463c      	mov	r4, r7
 8001b6a:	d919      	bls.n	8001ba0 <tanh+0x48>
 8001b6c:	4b41      	ldr	r3, [pc, #260]	@ (8001c74 <tanh+0x11c>)
 8001b6e:	2f00      	cmp	r7, #0
 8001b70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b74:	4632      	mov	r2, r6
 8001b76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	db09      	blt.n	8001b92 <tanh+0x3a>
 8001b7e:	f7fe fe11 	bl	80007a4 <__aeabi_ddiv>
 8001b82:	4622      	mov	r2, r4
 8001b84:	462b      	mov	r3, r5
 8001b86:	f7fe fb2d 	bl	80001e4 <__adddf3>
 8001b8a:	ec41 0b10 	vmov	d0, r0, r1
 8001b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b92:	f7fe fe07 	bl	80007a4 <__aeabi_ddiv>
 8001b96:	4622      	mov	r2, r4
 8001b98:	462b      	mov	r3, r5
 8001b9a:	f7fe fb21 	bl	80001e0 <__aeabi_dsub>
 8001b9e:	e7f4      	b.n	8001b8a <tanh+0x32>
 8001ba0:	4a35      	ldr	r2, [pc, #212]	@ (8001c78 <tanh+0x120>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d85c      	bhi.n	8001c60 <tanh+0x108>
 8001ba6:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 8001baa:	d20b      	bcs.n	8001bc4 <tanh+0x6c>
 8001bac:	4931      	ldr	r1, [pc, #196]	@ (8001c74 <tanh+0x11c>)
 8001bae:	4632      	mov	r2, r6
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bb6:	f7fe fb15 	bl	80001e4 <__adddf3>
 8001bba:	4632      	mov	r2, r6
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	f7fe fcc7 	bl	8000550 <__aeabi_dmul>
 8001bc2:	e7e2      	b.n	8001b8a <tanh+0x32>
 8001bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <tanh+0x124>)
 8001bc6:	4d2e      	ldr	r5, [pc, #184]	@ (8001c80 <tanh+0x128>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d923      	bls.n	8001c14 <tanh+0xbc>
 8001bcc:	f000 fabc 	bl	8002148 <fabs>
 8001bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001bd4:	ec51 0b10 	vmov	r0, r1, d0
 8001bd8:	f7fe fcba 	bl	8000550 <__aeabi_dmul>
 8001bdc:	ec41 0b10 	vmov	d0, r0, r1
 8001be0:	f000 f852 	bl	8001c88 <expm1>
 8001be4:	4923      	ldr	r1, [pc, #140]	@ (8001c74 <tanh+0x11c>)
 8001be6:	ec53 2b10 	vmov	r2, r3, d0
 8001bea:	e9d1 6700 	ldrd	r6, r7, [r1]
 8001bee:	e9d5 8900 	ldrd	r8, r9, [r5]
 8001bf2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001bf6:	f7fe faf5 	bl	80001e4 <__adddf3>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4640      	mov	r0, r8
 8001c00:	4649      	mov	r1, r9
 8001c02:	f7fe fdcf 	bl	80007a4 <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	f7fe fae7 	bl	80001e0 <__aeabi_dsub>
 8001c12:	e01d      	b.n	8001c50 <tanh+0xf8>
 8001c14:	e9d5 6700 	ldrd	r6, r7, [r5]
 8001c18:	f000 fa96 	bl	8002148 <fabs>
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	ec53 2b10 	vmov	r2, r3, d0
 8001c22:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8001c26:	f7fe fc93 	bl	8000550 <__aeabi_dmul>
 8001c2a:	ec41 0b10 	vmov	d0, r0, r1
 8001c2e:	f000 f82b 	bl	8001c88 <expm1>
 8001c32:	ec53 2b10 	vmov	r2, r3, d0
 8001c36:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001c3a:	4616      	mov	r6, r2
 8001c3c:	f103 4700 	add.w	r7, r3, #2147483648	@ 0x80000000
 8001c40:	f7fe fad0 	bl	80001e4 <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4630      	mov	r0, r6
 8001c4a:	4639      	mov	r1, r7
 8001c4c:	f7fe fdaa 	bl	80007a4 <__aeabi_ddiv>
 8001c50:	2c00      	cmp	r4, #0
 8001c52:	bfbf      	itttt	lt
 8001c54:	4602      	movlt	r2, r0
 8001c56:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 8001c5a:	4610      	movlt	r0, r2
 8001c5c:	4619      	movlt	r1, r3
 8001c5e:	e794      	b.n	8001b8a <tanh+0x32>
 8001c60:	4b04      	ldr	r3, [pc, #16]	@ (8001c74 <tanh+0x11c>)
 8001c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <tanh+0x12c>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	e7cf      	b.n	8001c0e <tanh+0xb6>
 8001c6e:	bf00      	nop
 8001c70:	7fefffff 	.word	0x7fefffff
 8001c74:	08002180 	.word	0x08002180
 8001c78:	4035ffff 	.word	0x4035ffff
 8001c7c:	3fefffff 	.word	0x3fefffff
 8001c80:	08002178 	.word	0x08002178
 8001c84:	08002170 	.word	0x08002170

08001c88 <expm1>:
 8001c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c8c:	ec5b ab10 	vmov	sl, fp, d0
 8001c90:	49cf      	ldr	r1, [pc, #828]	@ (8001fd0 <expm1+0x348>)
 8001c92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8001c96:	428b      	cmp	r3, r1
 8001c98:	b085      	sub	sp, #20
 8001c9a:	f00b 4400 	and.w	r4, fp, #2147483648	@ 0x80000000
 8001c9e:	d943      	bls.n	8001d28 <expm1+0xa0>
 8001ca0:	49cc      	ldr	r1, [pc, #816]	@ (8001fd4 <expm1+0x34c>)
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d924      	bls.n	8001cf0 <expm1+0x68>
 8001ca6:	49cc      	ldr	r1, [pc, #816]	@ (8001fd8 <expm1+0x350>)
 8001ca8:	428b      	cmp	r3, r1
 8001caa:	d913      	bls.n	8001cd4 <expm1+0x4c>
 8001cac:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	d006      	beq.n	8001cc4 <expm1+0x3c>
 8001cb6:	4652      	mov	r2, sl
 8001cb8:	465b      	mov	r3, fp
 8001cba:	4650      	mov	r0, sl
 8001cbc:	4659      	mov	r1, fp
 8001cbe:	f7fe fa91 	bl	80001e4 <__adddf3>
 8001cc2:	e12b      	b.n	8001f1c <expm1+0x294>
 8001cc4:	2c00      	cmp	r4, #0
 8001cc6:	f000 812b 	beq.w	8001f20 <expm1+0x298>
 8001cca:	f8df b330 	ldr.w	fp, [pc, #816]	@ 8001ffc <expm1+0x374>
 8001cce:	f04f 0a00 	mov.w	sl, #0
 8001cd2:	e125      	b.n	8001f20 <expm1+0x298>
 8001cd4:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001f70 <expm1+0x2e8>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	4650      	mov	r0, sl
 8001cdc:	4659      	mov	r1, fp
 8001cde:	f7fe fec7 	bl	8000a70 <__aeabi_dcmpgt>
 8001ce2:	b128      	cbz	r0, 8001cf0 <expm1+0x68>
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	b005      	add	sp, #20
 8001ce8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cec:	f000 ba24 	b.w	8002138 <__math_oflow>
 8001cf0:	2c00      	cmp	r4, #0
 8001cf2:	f000 80c7 	beq.w	8001e84 <expm1+0x1fc>
 8001cf6:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001f78 <expm1+0x2f0>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	4650      	mov	r0, sl
 8001cfe:	4659      	mov	r1, fp
 8001d00:	f7fe fa70 	bl	80001e4 <__adddf3>
 8001d04:	2200      	movs	r2, #0
 8001d06:	2300      	movs	r3, #0
 8001d08:	f7fe fe94 	bl	8000a34 <__aeabi_dcmplt>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d1dc      	bne.n	8001cca <expm1+0x42>
 8001d10:	a39b      	add	r3, pc, #620	@ (adr r3, 8001f80 <expm1+0x2f8>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4650      	mov	r0, sl
 8001d18:	4659      	mov	r1, fp
 8001d1a:	f7fe fc19 	bl	8000550 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	49ae      	ldr	r1, [pc, #696]	@ (8001fdc <expm1+0x354>)
 8001d24:	2000      	movs	r0, #0
 8001d26:	e0b8      	b.n	8001e9a <expm1+0x212>
 8001d28:	4aad      	ldr	r2, [pc, #692]	@ (8001fe0 <expm1+0x358>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	f240 80e2 	bls.w	8001ef4 <expm1+0x26c>
 8001d30:	4aac      	ldr	r2, [pc, #688]	@ (8001fe4 <expm1+0x35c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f200 80d1 	bhi.w	8001eda <expm1+0x252>
 8001d38:	a393      	add	r3, pc, #588	@ (adr r3, 8001f88 <expm1+0x300>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	4650      	mov	r0, sl
 8001d40:	4659      	mov	r1, fp
 8001d42:	2c00      	cmp	r4, #0
 8001d44:	f040 8093 	bne.w	8001e6e <expm1+0x1e6>
 8001d48:	f7fe fa4a 	bl	80001e0 <__aeabi_dsub>
 8001d4c:	f20f 2940 	addw	r9, pc, #576	@ 0x240
 8001d50:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001d54:	4606      	mov	r6, r0
 8001d56:	460f      	mov	r7, r1
 8001d58:	2401      	movs	r4, #1
 8001d5a:	4642      	mov	r2, r8
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	4630      	mov	r0, r6
 8001d60:	4639      	mov	r1, r7
 8001d62:	f7fe fa3d 	bl	80001e0 <__aeabi_dsub>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4682      	mov	sl, r0
 8001d6c:	468b      	mov	fp, r1
 8001d6e:	4630      	mov	r0, r6
 8001d70:	4639      	mov	r1, r7
 8001d72:	f7fe fa35 	bl	80001e0 <__aeabi_dsub>
 8001d76:	4642      	mov	r2, r8
 8001d78:	464b      	mov	r3, r9
 8001d7a:	f7fe fa31 	bl	80001e0 <__aeabi_dsub>
 8001d7e:	e9cd 0100 	strd	r0, r1, [sp]
 8001d82:	4b99      	ldr	r3, [pc, #612]	@ (8001fe8 <expm1+0x360>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	4650      	mov	r0, sl
 8001d88:	4659      	mov	r1, fp
 8001d8a:	f7fe fbe1 	bl	8000550 <__aeabi_dmul>
 8001d8e:	4606      	mov	r6, r0
 8001d90:	460f      	mov	r7, r1
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4650      	mov	r0, sl
 8001d98:	4659      	mov	r1, fp
 8001d9a:	f7fe fbd9 	bl	8000550 <__aeabi_dmul>
 8001d9e:	a37e      	add	r3, pc, #504	@ (adr r3, 8001f98 <expm1+0x310>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	4680      	mov	r8, r0
 8001da6:	4689      	mov	r9, r1
 8001da8:	f7fe fbd2 	bl	8000550 <__aeabi_dmul>
 8001dac:	a37c      	add	r3, pc, #496	@ (adr r3, 8001fa0 <expm1+0x318>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fa17 	bl	80001e4 <__adddf3>
 8001db6:	4642      	mov	r2, r8
 8001db8:	464b      	mov	r3, r9
 8001dba:	f7fe fbc9 	bl	8000550 <__aeabi_dmul>
 8001dbe:	a37a      	add	r3, pc, #488	@ (adr r3, 8001fa8 <expm1+0x320>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fa0c 	bl	80001e0 <__aeabi_dsub>
 8001dc8:	4642      	mov	r2, r8
 8001dca:	464b      	mov	r3, r9
 8001dcc:	f7fe fbc0 	bl	8000550 <__aeabi_dmul>
 8001dd0:	a377      	add	r3, pc, #476	@ (adr r3, 8001fb0 <expm1+0x328>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fa05 	bl	80001e4 <__adddf3>
 8001dda:	4642      	mov	r2, r8
 8001ddc:	464b      	mov	r3, r9
 8001dde:	f7fe fbb7 	bl	8000550 <__aeabi_dmul>
 8001de2:	a375      	add	r3, pc, #468	@ (adr r3, 8001fb8 <expm1+0x330>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe f9fa 	bl	80001e0 <__aeabi_dsub>
 8001dec:	4642      	mov	r2, r8
 8001dee:	464b      	mov	r3, r9
 8001df0:	f7fe fbae 	bl	8000550 <__aeabi_dmul>
 8001df4:	4b7d      	ldr	r3, [pc, #500]	@ (8001fec <expm1+0x364>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f7fe f9f4 	bl	80001e4 <__adddf3>
 8001dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4630      	mov	r0, r6
 8001e06:	4639      	mov	r1, r7
 8001e08:	f7fe fba2 	bl	8000550 <__aeabi_dmul>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	2000      	movs	r0, #0
 8001e12:	4977      	ldr	r1, [pc, #476]	@ (8001ff0 <expm1+0x368>)
 8001e14:	f7fe f9e4 	bl	80001e0 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4606      	mov	r6, r0
 8001e1e:	460f      	mov	r7, r1
 8001e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e24:	f7fe f9dc 	bl	80001e0 <__aeabi_dsub>
 8001e28:	4632      	mov	r2, r6
 8001e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4650      	mov	r0, sl
 8001e32:	4659      	mov	r1, fp
 8001e34:	f7fe fb8c 	bl	8000550 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	496d      	ldr	r1, [pc, #436]	@ (8001ff4 <expm1+0x36c>)
 8001e40:	f7fe f9ce 	bl	80001e0 <__aeabi_dsub>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e4c:	f7fe fcaa 	bl	80007a4 <__aeabi_ddiv>
 8001e50:	4642      	mov	r2, r8
 8001e52:	464b      	mov	r3, r9
 8001e54:	f7fe fb7c 	bl	8000550 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d166      	bne.n	8001f2e <expm1+0x2a6>
 8001e60:	4650      	mov	r0, sl
 8001e62:	4659      	mov	r1, fp
 8001e64:	f7fe fb74 	bl	8000550 <__aeabi_dmul>
 8001e68:	4642      	mov	r2, r8
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	e04e      	b.n	8001f0c <expm1+0x284>
 8001e6e:	f7fe f9b9 	bl	80001e4 <__adddf3>
 8001e72:	f20f 194c 	addw	r9, pc, #332	@ 0x14c
 8001e76:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	460f      	mov	r7, r1
 8001e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8001e82:	e76a      	b.n	8001d5a <expm1+0xd2>
 8001e84:	a33e      	add	r3, pc, #248	@ (adr r3, 8001f80 <expm1+0x2f8>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	f7fe fb5f 	bl	8000550 <__aeabi_dmul>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4954      	ldr	r1, [pc, #336]	@ (8001fe8 <expm1+0x360>)
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7fe f9a3 	bl	80001e4 <__adddf3>
 8001e9e:	f7fe fdf1 	bl	8000a84 <__aeabi_d2iz>
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	f7fe faea 	bl	800047c <__aeabi_i2d>
 8001ea8:	a337      	add	r3, pc, #220	@ (adr r3, 8001f88 <expm1+0x300>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	4680      	mov	r8, r0
 8001eb0:	4689      	mov	r9, r1
 8001eb2:	f7fe fb4d 	bl	8000550 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4650      	mov	r0, sl
 8001ebc:	4659      	mov	r1, fp
 8001ebe:	f7fe f98f 	bl	80001e0 <__aeabi_dsub>
 8001ec2:	a333      	add	r3, pc, #204	@ (adr r3, 8001f90 <expm1+0x308>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	4606      	mov	r6, r0
 8001eca:	460f      	mov	r7, r1
 8001ecc:	4640      	mov	r0, r8
 8001ece:	4649      	mov	r1, r9
 8001ed0:	f7fe fb3e 	bl	8000550 <__aeabi_dmul>
 8001ed4:	4680      	mov	r8, r0
 8001ed6:	4689      	mov	r9, r1
 8001ed8:	e73f      	b.n	8001d5a <expm1+0xd2>
 8001eda:	a329      	add	r3, pc, #164	@ (adr r3, 8001f80 <expm1+0x2f8>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	4650      	mov	r0, sl
 8001ee2:	4659      	mov	r1, fp
 8001ee4:	f7fe fb34 	bl	8000550 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	f47f af18 	bne.w	8001d22 <expm1+0x9a>
 8001ef2:	e7d0      	b.n	8001e96 <expm1+0x20e>
 8001ef4:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <expm1+0x370>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d817      	bhi.n	8001f2a <expm1+0x2a2>
 8001efa:	a333      	add	r3, pc, #204	@ (adr r3, 8001fc8 <expm1+0x340>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	4650      	mov	r0, sl
 8001f02:	4659      	mov	r1, fp
 8001f04:	f7fe f96e 	bl	80001e4 <__adddf3>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	f7fe f968 	bl	80001e0 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4650      	mov	r0, sl
 8001f16:	4659      	mov	r1, fp
 8001f18:	f7fe f962 	bl	80001e0 <__aeabi_dsub>
 8001f1c:	4682      	mov	sl, r0
 8001f1e:	468b      	mov	fp, r1
 8001f20:	ec4b ab10 	vmov	d0, sl, fp
 8001f24:	b005      	add	sp, #20
 8001f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2a:	2400      	movs	r4, #0
 8001f2c:	e729      	b.n	8001d82 <expm1+0xfa>
 8001f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f32:	f7fe f955 	bl	80001e0 <__aeabi_dsub>
 8001f36:	4652      	mov	r2, sl
 8001f38:	465b      	mov	r3, fp
 8001f3a:	f7fe fb09 	bl	8000550 <__aeabi_dmul>
 8001f3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f42:	f7fe f94d 	bl	80001e0 <__aeabi_dsub>
 8001f46:	464b      	mov	r3, r9
 8001f48:	4642      	mov	r2, r8
 8001f4a:	f7fe f949 	bl	80001e0 <__aeabi_dsub>
 8001f4e:	1c63      	adds	r3, r4, #1
 8001f50:	4606      	mov	r6, r0
 8001f52:	460f      	mov	r7, r1
 8001f54:	d154      	bne.n	8002000 <expm1+0x378>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4650      	mov	r0, sl
 8001f5c:	4659      	mov	r1, fp
 8001f5e:	f7fe f93f 	bl	80001e0 <__aeabi_dsub>
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <expm1+0x360>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f7fe faf3 	bl	8000550 <__aeabi_dmul>
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <expm1+0x360>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	e7d3      	b.n	8001f18 <expm1+0x290>
 8001f70:	fefa39ef 	.word	0xfefa39ef
 8001f74:	40862e42 	.word	0x40862e42
 8001f78:	c2f8f359 	.word	0xc2f8f359
 8001f7c:	01a56e1f 	.word	0x01a56e1f
 8001f80:	652b82fe 	.word	0x652b82fe
 8001f84:	3ff71547 	.word	0x3ff71547
 8001f88:	fee00000 	.word	0xfee00000
 8001f8c:	3fe62e42 	.word	0x3fe62e42
 8001f90:	35793c76 	.word	0x35793c76
 8001f94:	3dea39ef 	.word	0x3dea39ef
 8001f98:	6e09c32d 	.word	0x6e09c32d
 8001f9c:	be8afdb7 	.word	0xbe8afdb7
 8001fa0:	86e65239 	.word	0x86e65239
 8001fa4:	3ed0cfca 	.word	0x3ed0cfca
 8001fa8:	9eaadbb7 	.word	0x9eaadbb7
 8001fac:	3f14ce19 	.word	0x3f14ce19
 8001fb0:	19fe5585 	.word	0x19fe5585
 8001fb4:	3f5a01a0 	.word	0x3f5a01a0
 8001fb8:	111110f4 	.word	0x111110f4
 8001fbc:	3fa11111 	.word	0x3fa11111
 8001fc0:	35793c76 	.word	0x35793c76
 8001fc4:	bdea39ef 	.word	0xbdea39ef
 8001fc8:	8800759c 	.word	0x8800759c
 8001fcc:	7e37e43c 	.word	0x7e37e43c
 8001fd0:	40436879 	.word	0x40436879
 8001fd4:	40862e41 	.word	0x40862e41
 8001fd8:	7fefffff 	.word	0x7fefffff
 8001fdc:	bfe00000 	.word	0xbfe00000
 8001fe0:	3fd62e42 	.word	0x3fd62e42
 8001fe4:	3ff0a2b1 	.word	0x3ff0a2b1
 8001fe8:	3fe00000 	.word	0x3fe00000
 8001fec:	3ff00000 	.word	0x3ff00000
 8001ff0:	40080000 	.word	0x40080000
 8001ff4:	40180000 	.word	0x40180000
 8001ff8:	3c8fffff 	.word	0x3c8fffff
 8001ffc:	bff00000 	.word	0xbff00000
 8002000:	2c01      	cmp	r4, #1
 8002002:	d125      	bne.n	8002050 <expm1+0x3c8>
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <expm1+0x44c>)
 8002006:	2200      	movs	r2, #0
 8002008:	4650      	mov	r0, sl
 800200a:	4659      	mov	r1, fp
 800200c:	f7fe fd12 	bl	8000a34 <__aeabi_dcmplt>
 8002010:	b188      	cbz	r0, 8002036 <expm1+0x3ae>
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <expm1+0x450>)
 8002014:	2200      	movs	r2, #0
 8002016:	4650      	mov	r0, sl
 8002018:	4659      	mov	r1, fp
 800201a:	f7fe f8e3 	bl	80001e4 <__adddf3>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4630      	mov	r0, r6
 8002024:	4639      	mov	r1, r7
 8002026:	f7fe f8db 	bl	80001e0 <__aeabi_dsub>
 800202a:	2200      	movs	r2, #0
 800202c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002030:	f7fe fa8e 	bl	8000550 <__aeabi_dmul>
 8002034:	e772      	b.n	8001f1c <expm1+0x294>
 8002036:	4632      	mov	r2, r6
 8002038:	463b      	mov	r3, r7
 800203a:	4650      	mov	r0, sl
 800203c:	4659      	mov	r1, fp
 800203e:	f7fe f8cf 	bl	80001e0 <__aeabi_dsub>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	f7fe f8cd 	bl	80001e4 <__adddf3>
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <expm1+0x454>)
 800204c:	2200      	movs	r2, #0
 800204e:	e636      	b.n	8001cbe <expm1+0x36>
 8002050:	1c63      	adds	r3, r4, #1
 8002052:	2b39      	cmp	r3, #57	@ 0x39
 8002054:	ea4f 5504 	mov.w	r5, r4, lsl #20
 8002058:	d90e      	bls.n	8002078 <expm1+0x3f0>
 800205a:	4652      	mov	r2, sl
 800205c:	465b      	mov	r3, fp
 800205e:	f7fe f8bf 	bl	80001e0 <__aeabi_dsub>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	2000      	movs	r0, #0
 8002068:	491c      	ldr	r1, [pc, #112]	@ (80020dc <expm1+0x454>)
 800206a:	f7fe f8b9 	bl	80001e0 <__aeabi_dsub>
 800206e:	186b      	adds	r3, r5, r1
 8002070:	4619      	mov	r1, r3
 8002072:	2200      	movs	r2, #0
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <expm1+0x454>)
 8002076:	e74f      	b.n	8001f18 <expm1+0x290>
 8002078:	2c13      	cmp	r4, #19
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	dc17      	bgt.n	80020b0 <expm1+0x428>
 8002080:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 8002084:	fa46 f404 	asr.w	r4, r6, r4
 8002088:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 800208c:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 8002090:	4616      	mov	r6, r2
 8002092:	461f      	mov	r7, r3
 8002094:	4652      	mov	r2, sl
 8002096:	465b      	mov	r3, fp
 8002098:	f7fe f8a2 	bl	80001e0 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4630      	mov	r0, r6
 80020a2:	4639      	mov	r1, r7
 80020a4:	f7fe f89c 	bl	80001e0 <__aeabi_dsub>
 80020a8:	4682      	mov	sl, r0
 80020aa:	eb05 0b01 	add.w	fp, r5, r1
 80020ae:	e737      	b.n	8001f20 <expm1+0x298>
 80020b0:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 80020b4:	3403      	adds	r4, #3
 80020b6:	0523      	lsls	r3, r4, #20
 80020b8:	f7fe f894 	bl	80001e4 <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4650      	mov	r0, sl
 80020c2:	4659      	mov	r1, fp
 80020c4:	f7fe f88c 	bl	80001e0 <__aeabi_dsub>
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <expm1+0x454>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	f7fe f88a 	bl	80001e4 <__adddf3>
 80020d0:	e7ea      	b.n	80020a8 <expm1+0x420>
 80020d2:	bf00      	nop
 80020d4:	bfd00000 	.word	0xbfd00000
 80020d8:	3fe00000 	.word	0x3fe00000
 80020dc:	3ff00000 	.word	0x3ff00000

080020e0 <with_errno>:
 80020e0:	b510      	push	{r4, lr}
 80020e2:	ed2d 8b02 	vpush	{d8}
 80020e6:	eeb0 8a40 	vmov.f32	s16, s0
 80020ea:	eef0 8a60 	vmov.f32	s17, s1
 80020ee:	4604      	mov	r4, r0
 80020f0:	f7ff fd08 	bl	8001b04 <__errno>
 80020f4:	eeb0 0a48 	vmov.f32	s0, s16
 80020f8:	eef0 0a68 	vmov.f32	s1, s17
 80020fc:	ecbd 8b02 	vpop	{d8}
 8002100:	6004      	str	r4, [r0, #0]
 8002102:	bd10      	pop	{r4, pc}

08002104 <xflow>:
 8002104:	4603      	mov	r3, r0
 8002106:	b507      	push	{r0, r1, r2, lr}
 8002108:	ec51 0b10 	vmov	r0, r1, d0
 800210c:	b183      	cbz	r3, 8002130 <xflow+0x2c>
 800210e:	4602      	mov	r2, r0
 8002110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002114:	e9cd 2300 	strd	r2, r3, [sp]
 8002118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800211c:	f7fe fa18 	bl	8000550 <__aeabi_dmul>
 8002120:	ec41 0b10 	vmov	d0, r0, r1
 8002124:	2022      	movs	r0, #34	@ 0x22
 8002126:	b003      	add	sp, #12
 8002128:	f85d eb04 	ldr.w	lr, [sp], #4
 800212c:	f7ff bfd8 	b.w	80020e0 <with_errno>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	e7ee      	b.n	8002114 <xflow+0x10>
	...

08002138 <__math_oflow>:
 8002138:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002140 <__math_oflow+0x8>
 800213c:	f7ff bfe2 	b.w	8002104 <xflow>
 8002140:	00000000 	.word	0x00000000
 8002144:	70000000 	.word	0x70000000

08002148 <fabs>:
 8002148:	ec51 0b10 	vmov	r0, r1, d0
 800214c:	4602      	mov	r2, r0
 800214e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002152:	ec43 2b10 	vmov	d0, r2, r3
 8002156:	4770      	bx	lr

08002158 <_init>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr

08002164 <_fini>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	bf00      	nop
 8002168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216a:	bc08      	pop	{r3}
 800216c:	469e      	mov	lr, r3
 800216e:	4770      	bx	lr
