/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

#define DIR_UP			0
#define DIR_DOWN		1

#define CONST_DUTY		0
#define CONST_SPEED		1

// arbitrary ADC values
#define CS_BTN1_ADC		1000
#define CS_BTN2_ADC		1500
#define CS_BTN3_ADC		1750
#define CS_BTN4_ADC		2000

// Keypad variables
volatile uint8_t pressed = 0;
volatile uint8_t key = 0;

// Counter variables
volatile uint8_t counter = 0;
volatile uint16_t overflows = 0;
uint8_t running = 0;
uint8_t dir = 0;

// Motor mode --> changed using button 'D'
uint8_t motor_mode = 0;

const uint8_t keypad[16] = { 	0xe, 0x0, 0xf, 0xd,
								0x7, 0x8, 0x9, 0xc,
								0x4, 0x5, 0x6, 0xb,
								0x1, 0x2, 0x3, 0xa };


void gpio_config();
void interrupt_config();
void pwm_config();
void enable_counter();
void disable_counter();
void adc_tim_config();
void adc_config();
uint16_t adc_read();
void display();

void EXTI0_IRQHandler() {

	// key has been pressed...

	// read keypad lines on PA[5:2] to get row of key pressed
	uint8_t rows = ~((GPIOA->IDR & 0b111100) >> 2) & 0xf;
	uint8_t col;

	// begin scan on PA[11:8]
	for (int i = 0; i < 4; i++) {

		// write pattern to keypad lines
		GPIOA->ODR = (GPIOA->ODR | (0b1111 << 8)) & ~(1 << (i + 8));

		// wait a few clock cycles for input lines to settle
		for (volatile int j = 0; j < 5; j++);

		// read keypad lines again
		col = (GPIOA->IDR & 0b111100) >> 2;

		// if column of pressed key is selected...
		if (col != 0b1111) {

			uint8_t index = 0;
			if (rows == 8)
				index = 12;
			else if (rows == 4)
				index = 8;
			else if (rows == 2)
				index = 4;
			else
				index = 0;

			index += 3 - i; // get column
			key = keypad[index]; // lookup key
			pressed = 1; // indicate key was pressed
			break;
		}
	}

	// reset keypad output lines
	GPIOA->ODR &= ~(GPIO_ODR_OD8 |
					GPIO_ODR_OD9 |
					GPIO_ODR_OD10 |
					GPIO_ODR_OD11);

	// debounce button
	for (volatile int i = 0; i < 50000; i++);

	// clear pending interrupt in NVIC (not necessary)
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
	// clear pending interrupt in peripheral (necessary)
	EXTI->PR1 |= EXTI_PR1_PIF0;

}


void TIM2_IRQHandler() {

	// since period is supposed to be 3/5 of a second
	// this will result in 1800 overflows of a 3kHz timer

	overflows++;

	if (overflows >= 1800) {

		if (dir == DIR_UP) {

			if (counter == 9)
				counter = 0;
			else
				counter++;
		}
		else if (dir == DIR_DOWN) {

			if (counter == 0)
				counter = 9;
			else
				counter--;
		}

		overflows = 0;
	}

	// clear pending interrupt
	TIM2->SR &= ~TIM_SR_UIF;
}


int main() {

	gpio_config();
	pwm_config();
	adc_tim_config();
	adc_config();
	interrupt_config();

	// initially drive all inputs 0
	GPIOA->ODR &= ~(GPIO_ODR_OD8 |
					GPIO_ODR_OD9 |
					GPIO_ODR_OD10 |
					GPIO_ODR_OD11);


	// enable global interrupts
	__enable_irq();

	uint32_t desired_adc;
	int32_t err;
	uint32_t feedback;

	const float p = 5;
	const float i = 0;
	const float d = 0;

	while (1) {

		// if new key is pressed, set equivalent duty cycle
		if (pressed) {

			// acknowledge interrupt
			pressed = 0;

			if (key == 0xe) {		// '*' button is pressed: start/stop counter

				running = !running;		// change states

				// enable/disable interrupt based on state
				if (running)
					enable_counter();
				else
					disable_counter();

			}

			else if (key == 0xf) {	// '#' button is pressed: change counter direction

				dir = !dir;
			}

			else if (key == 0xd) {	// 'D' button is pressed: change motor mode

				motor_mode = !motor_mode;
			}

			else if (motor_mode == CONST_DUTY) {

				uint32_t duty;

				if (key < 0x0a)
					duty = key * (TIM2->ARR) * 0.1;		// to get 20% duty cycle, 2 * 400 = 800  --> 800 / 4000 = 0.2
				else if (key == 0x0a)
					duty = TIM2->ARR + 1;
				else
					duty = TIM2->CCR1;		// if key is not between 0-10, keep same

				TIM2->CCR1 = duty;		// set duty cycle
			}

			else if (motor_mode == CONST_SPEED) {

				// determine desired ADC feedback from button press
				switch (key) {

				case 1:
					desired_adc = CS_BTN1_ADC;
					break;
				case 2:
					desired_adc = CS_BTN2_ADC;
					break;
				case 3:
					desired_adc = CS_BTN3_ADC;
					break;
				case 4:
					desired_adc = CS_BTN4_ADC;
					break;
				default:
					desired_adc = desired_adc;
				}
			}
		}

		display();

		// in constant speed mode, change CCR1 dynamically to match desired tachometer feedback
		if (motor_mode == CONST_SPEED) {

			err = desired_adc - adc_read();  // get error

			// if err is positive, increase duty cycle until desired ADC reading is met
			// if err is negative, lower duty cycle

			feedback = abs(err) * p;

			if (err >= 0)
				feedback += TIM2->CCR1;
			else
				feedback -= TIM2->CCR1;

//			switch (desired_adc) {
//
//			case CS_BTN1_ADC:
//				feedback += 0.1 * TIM2->ARR * 6;
//				break;
//			case CS_BTN2_ADC:
//				feedback += 0.1 * TIM2->ARR * 7;
//				break;
//			case CS_BTN3_ADC:
//				feedback += 0.1 * TIM2->ARR * 8;
//				break;
//			case CS_BTN4_ADC:
//				feedback += 0.1 * TIM2->ARR * 9;
//				break;
//			default:
//
//			}

			if (feedback > 1332)
				feedback = 1332;

			TIM2->CCR1 = feedback;
		}
	}
}


void gpio_config() {

	// enable GPIOA and GPIOB clocks
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN |
	RCC_AHB2ENR_GPIOBEN;

	// PA[11:8] outputs (MODERx = 01) --> connect to header pins 4:1 --> keypad columns
	GPIOA->MODER |= GPIO_MODER_MODE8_0 |
					GPIO_MODER_MODE9_0 |
					GPIO_MODER_MODE10_0 |
					GPIO_MODER_MODE11_0;
	GPIOA->MODER &= ~(GPIO_MODER_MODE8_1 |
					GPIO_MODER_MODE9_1 |
					GPIO_MODER_MODE10_1 |
					GPIO_MODER_MODE11_1);

	// PA[5:2] inputs --> connect to header pins 8:5 --> keypad rows
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 |
					GPIO_MODER_MODE3 |
					GPIO_MODER_MODE4 |
					GPIO_MODER_MODE5);

	// connect internal pull ups to PA[5:2] (PUPDx = 01)
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD2_0 |
					GPIO_PUPDR_PUPD3_0 |
					GPIO_PUPDR_PUPD4_0 |
					GPIO_PUPDR_PUPD5_0;
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_1 |
					GPIO_PUPDR_PUPD3_1 |
					GPIO_PUPDR_PUPD4_1 |
					GPIO_PUPDR_PUPD5_1);

	// PB[6:3] output (MODERx = 01) --> lower 4 bits of ADC value
	GPIOB->MODER |= GPIO_MODER_MODE3_0 |
					GPIO_MODER_MODE4_0 |
					GPIO_MODER_MODE5_0 |
					GPIO_MODER_MODE6_0;
	GPIOB->MODER &= ~(GPIO_MODER_MODE3_1 |
					GPIO_MODER_MODE4_1 |
					GPIO_MODER_MODE5_1 |
					GPIO_MODER_MODE6_1);

	// PA[11:8] output (MODERx = 01) --> upper 4 bits of ADC
	GPIOA->MODER |= GPIO_MODER_MODE8_0 |
					GPIO_MODER_MODE9_0 |
					GPIO_MODER_MODE10_0 |
					GPIO_MODER_MODE11_0;
	GPIOA->MODER &= ~(GPIO_MODER_MODE8_1 |
					GPIO_MODER_MODE9_1 |
					GPIO_MODER_MODE10_1 |
					GPIO_MODER_MODE11_1);

	// configure PB0 as input (interrupt trigger)
	GPIOB->MODER &= ~GPIO_MODER_MODE0;

}


void interrupt_config() {

	// turn on SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

	// select PB0 as EXTI0 input
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PB;

	// unmask EXTI0 interrupt
	EXTI->IMR1 |= EXTI_IMR1_IM0;

	// select falling edge trigger for interrupt
	EXTI->FTSR1 |= EXTI_FTSR1_FT0;

	// clear any pending interrupt
	EXTI->PR1 |= EXTI_PR1_PIF0;

	// enable interrupt on NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
}


void pwm_config() {

	// select PA0 as alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODE0_1;
	GPIOA->MODER &= ~GPIO_MODER_MODE0_0;

	// select AF mode 1 for TIM2_CH1
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL0_0;
	GPIOA->AFR[0] &= ~(	GPIO_AFRL_AFSEL0_1 |
						GPIO_AFRL_AFSEL0_2 |
						GPIO_AFRL_AFSEL0_3);

	// enable TIM2 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;

	// up counter
	TIM2->CR1 &= ~TIM_CR1_DIR;

	// set prescaler to /1
	TIM2->PSC = 0;

	// select PWM mode 1
	TIM2->CCMR1 |= 	TIM_CCMR1_OC1M_1 |
					TIM_CCMR1_OC1M_2;

	// preload register enable
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;

	// TIM2_CH1 output enable
	TIM2->CCER |= TIM_CCER_CC1E;

	// base clock fCK_CNT is 4MHz
	// Nix has 3 letters --> 3 kHz PWM
	// TIMx_ARR = 1/3 ms * fCK_CNT - 1
	TIM2->ARR = 1333 - 1;

	// 50% duty cycle to start
	TIM2->CCR1 = TIM2->ARR * 0.5;

	// clear any pending interrupts before enabling them
	TIM2->SR &= ~TIM_SR_UIF;

	// update interrupt enable (overflow)
	TIM2->DIER |= TIM_DIER_UIE;
//
//	// enable NVIC interrupt
//	NVIC_EnableIRQ(TIM2_IRQn);

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
}


void enable_counter() {

	// clear any pending interrupts and enable NVIC
	TIM2->SR &= ~TIM_SR_UIF;
	NVIC_EnableIRQ(TIM2_IRQn);
}


void disable_counter() {

	// only disable the NVIC so counter continues to run
	NVIC_DisableIRQ(TIM2_IRQn);
}



void adc_tim_config() {

	// ADC must sample at 192kHz
	// use TIM6 to generate 192kHz signal

	// enable TIM6 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM6EN;

	// disable counter
	TIM6->CR1 &= ~TIM_CR1_CEN;

	// to generate 192kHz from 4MHz
	// 4M / 192k = 20.83
	TIM6->ARR = 21;

	// Master mode selection - enable TRGO to trigger ADC
	TIM6->CR2 &= ~TIM_CR2_MMS;
	TIM6->CR2 |= TIM_CR2_MMS_1;

	// clear flags before enabling
	TIM6->SR &= ~TIM_SR_UIF;

	// enable counter
	TIM6->CR1 |= TIM_CR1_CEN;
}

void adc_config() {

	// use pin PA7 --> ADC1_IN12 as analog input
	// ADC sampling period = 1 / ((1 / 3kHz) / 64) = 192kHz

	// enable GPIOA clock (again)
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
	// enable ADC1 clock
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
	// select system clock as ADC1 clock
	RCC->CCIPR |= RCC_CCIPR_ADCSEL;

	// set analog mode for PA7
	GPIOA->MODER |= GPIO_MODER_MODE7;

	// disable ADC to initialize
	ADC1->CR &= ~ADC_CR_ADEN;

	// disable deep-power-down enable
	ADC1->CR &= ~ADC_CR_DEEPPWD;

	// enable ADC voltage regulator and wait until start-up complete
	ADC1->CR |= ADC_CR_ADVREGEN;

	volatile int i;
	for (i = 0; i < 1000; i++);

	// continuous conversion, 12-bit ADC, overrun mode
//	ADC1->CFGR |= ADC_CFGR_CONT | ADC_CFGR_OVRMOD;
	ADC1->CFGR |= ADC_CFGR_OVRMOD;

	// select rising edge external trigger to begin ADC sample
	ADC1->CFGR |= ADC_CFGR_EXTEN_0;
	ADC1->CFGR &= ~ADC_CFGR_EXTEN_1;

	// select external channel 13 (TIM6_TRGO)
	ADC1->CFGR &= ~ADC_CFGR_EXTSEL;
	ADC1->CFGR |= 	ADC_CFGR_EXTSEL_3 |
					ADC_CFGR_EXTSEL_2 |
					ADC_CFGR_EXTSEL_0;

	// one conversion, reset channel number
	ADC1->SQR1 &= ~(ADC_SQR1_L | ADC_SQR1_SQ1);
	// set ADC channel to 12
	ADC1->SQR1 |= ADC_SQR1_SQ1_3 | ADC_SQR1_SQ1_2;

	// enable ADC
	ADC1->CR |= ADC_CR_ADEN;
	// wait until ADC ready to accept conversion requests
	while (!(ADC1->ISR & ADC_ISR_ADRDY));
	// start ADC
	ADC1->CR |= ADC_CR_ADSTART;
}


uint16_t adc_read() {

	return ADC1->DR;
}


void display() {

	// display decade counter on PB[6:3]
	GPIOB->ODR = (GPIOB->ODR & ~0b1111000) | (counter << 3);
}
